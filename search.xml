<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown 快速入门（typora）</title>
    <url>/2022/10/17/Markdown-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="Markdown入门1"><a href="#Markdown入门1" class="headerlink" title="Markdown入门1"></a>Markdown入门1</h3><span id="more"></span>

<p>ctrl +shift +1   来呈现菜单</p>
<h2 id="1-代码块："><a href="#1-代码块：" class="headerlink" title="1.代码块："></a>1.代码块：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码块语法：(英文状态下)</span></span><br><span class="line">​```java</span><br><span class="line">    </span><br><span class="line">​```shell</span><br></pre></td></tr></table></figure>

<p>1.java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*一维数组</span></span><br><span class="line"><span class="comment"> * 1.数组的定义</span></span><br><span class="line"><span class="comment"> * 2.向数组中添加元素</span></span><br><span class="line"><span class="comment"> * 3.获取数组中的一个元素</span></span><br><span class="line"><span class="comment"> * 4.获取数组的空间个数</span></span><br><span class="line"><span class="comment"> * 5.获取每一个元素 迭代 遍历</span></span><br><span class="line"><span class="comment"> * 6.数组的复制</span></span><br><span class="line"><span class="comment"> * 7.数组的排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test101</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">//1.数组的四种定义</span></span><br><span class="line">		<span class="type">int</span> []arr;</span><br><span class="line">		arr=<span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">100</span>];</span><br><span class="line">		</span><br><span class="line">		<span class="type">int</span> []arr1 =<span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">3</span>];</span><br><span class="line">		<span class="type">int</span> []arr2=<span class="keyword">new</span> <span class="title class_">int</span> [] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">		<span class="type">int</span> []arr3= &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">		<span class="comment">//2.向数组中添加元素</span></span><br><span class="line">		arr1[<span class="number">0</span>]=<span class="number">10</span>;<span class="comment">//指定一个空间个数去赋值，该空间位置通过索引值即下标来找到，该索引值从0开始</span></span><br><span class="line">		arr[<span class="number">1</span>]=<span class="number">20</span>;</span><br><span class="line">		arr[<span class="number">2</span>]=<span class="number">30</span>;</span><br><span class="line">	    <span class="comment">//3.获取数组中的一个元素</span></span><br><span class="line">		System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">		<span class="comment">//4.获取数组的的空间个数</span></span><br><span class="line">		System.out.println(<span class="string">&quot;该数组的空间个数为：&quot;</span>+arr3.length);</span><br><span class="line">		<span class="comment">//5.获取数组的每一个元素的两种方法 遍历 迭代</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr3.length; i++) &#123;</span><br><span class="line">			System.out.println(arr3[i]);</span><br><span class="line">		&#125;</span><br><span class="line">			System.out.println(<span class="string">&quot;==============数组遍历方法二=========&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> m : arr3) &#123;</span><br><span class="line">			System.out.println(m);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;==============数组的遍历三============&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr3.length; i++) &#123;</span><br><span class="line">			arr3[i]=i+<span class="number">5</span>;</span><br><span class="line">			System.out.println(arr3[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//6.数组的复制</span></span><br><span class="line">		System.out.println(<span class="string">&quot;数组的复制&quot;</span>);</span><br><span class="line">		<span class="type">int</span> []y=<span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>&#125;;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;最可笑的复制方式&quot;</span>);</span><br><span class="line">		<span class="type">int</span> []m1=y;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i : m1) &#123;</span><br><span class="line">			System.out.println(i);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;最劳累的复制方式&quot;</span>);</span><br><span class="line">		<span class="type">int</span> [] m2=<span class="keyword">new</span> <span class="title class_">int</span>[y.length];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; y.length; i++) &#123;</span><br><span class="line">			m2[i]=y[i];<span class="comment">//目标数组赋值上原数组的每一个元素</span></span><br><span class="line">			System.out.println(m2[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;最简单的复制方式&quot;</span>);</span><br><span class="line">		<span class="type">int</span> [] m3=y.clone();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i : m3) &#123;</span><br><span class="line">			System.out.println(i);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;最灵活的复制方式，可以实现删除功能&quot;</span>);</span><br><span class="line">		<span class="type">int</span> []m4=<span class="keyword">new</span> <span class="title class_">int</span> [y.length];</span><br><span class="line">		<span class="comment">//System.arraycopy(1, 2, 3, 4, 5);</span></span><br><span class="line">		<span class="comment">//1.原数组</span></span><br><span class="line">		<span class="comment">//2.原数组的起始位置</span></span><br><span class="line">		<span class="comment">//3.目标数组</span></span><br><span class="line">		<span class="comment">//4.目标数组的起始位置</span></span><br><span class="line">		<span class="comment">//5.个数        </span></span><br><span class="line">		System.out.println(<span class="string">&quot;输出 5  3  1&quot;</span>);</span><br><span class="line">		System.arraycopy(y, <span class="number">0</span>, m4, <span class="number">0</span>,y.length-<span class="number">2</span> );</span><br><span class="line">		System.arraycopy(y, <span class="number">3</span>, m4, <span class="number">2</span>, y.length-<span class="number">3</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i : m4) &#123;</span><br><span class="line">			System.out.println(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//7.数组的排序</span></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		int []x= &#123;6,3,8,2,9,1&#125;;</span></span><br><span class="line"><span class="comment">	          6  3  8  2  9  1----&gt;1  2  3  6  8  9</span></span><br><span class="line"><span class="comment">	   第一趟：6  3  8  2  9  1</span></span><br><span class="line"><span class="comment">	     第一次：3  6  8  2  9  1</span></span><br><span class="line"><span class="comment">	     第二次：3  6  8  2  9  1</span></span><br><span class="line"><span class="comment">	     第三次：3  6  2  8  9  1</span></span><br><span class="line"><span class="comment">	     第四次：3  6  2  8  9  1</span></span><br><span class="line"><span class="comment">	     第五次：3  6  2  8  1  9</span></span><br><span class="line"><span class="comment">	   第二趟：3  6  2  8  1  9</span></span><br><span class="line"><span class="comment">	     第一次：3  6  2  8  1  9</span></span><br><span class="line"><span class="comment">	     第二次：3  2  6  8  1  9</span></span><br><span class="line"><span class="comment">	     第三次：3  2  6  8  1  9</span></span><br><span class="line"><span class="comment">	     第四次：3  2  6  1  8  9</span></span><br><span class="line"><span class="comment">	   第三趟：3  2  6  1  8  9</span></span><br><span class="line"><span class="comment">	     第一次：2  3  6  1  8  9</span></span><br><span class="line"><span class="comment">	     第二次：2  3  6  1  8  9</span></span><br><span class="line"><span class="comment">	     第三次：2  3  1  6  8  9</span></span><br><span class="line"><span class="comment">	   第四趟:2  3  1  6  8  9</span></span><br><span class="line"><span class="comment">	     第一次：2  3  1  6  8  9</span></span><br><span class="line"><span class="comment">	     第二次：2  1  3  6  8  9</span></span><br><span class="line"><span class="comment">	   第五趟：2  1  3  6  8  9</span></span><br><span class="line"><span class="comment">	     第一次：1  2  3  6  8  9</span></span><br><span class="line"><span class="comment">总结：x.length=4</span></span><br><span class="line"><span class="comment">    趟数：x.length-1</span></span><br><span class="line"><span class="comment">    次数：x.length-趟数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">		System.out.println(<span class="string">&quot;===========数组的排序=============&quot;</span>);</span><br><span class="line">		<span class="type">int</span> []x=&#123;<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; x.length-<span class="number">1</span>; i++) &#123;<span class="comment">//趟数</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; x.length-<span class="number">1</span>-i; j++) &#123;<span class="comment">//次数</span></span><br><span class="line">				<span class="keyword">if</span> (x[j]&gt;x[j+<span class="number">1</span>]) &#123;</span><br><span class="line">					<span class="type">int</span> n=x[j];</span><br><span class="line">					x[j]=x[j+<span class="number">1</span>];</span><br><span class="line">					x[j+<span class="number">1</span>]=n;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i : x) &#123;</span><br><span class="line">			System.out.print(i+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;利用数组的工具类Arrays中的Sort方法&quot;</span>);</span><br><span class="line">		<span class="type">int</span>[]xx=<span class="keyword">new</span> <span class="title class_">int</span> [] &#123;<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>&#125;;</span><br><span class="line">		Arrays.sort(xx);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i : xx) &#123;</span><br><span class="line">			System.out.print(i+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2.shell 脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//在linux下spring项目的启动命令</span><br><span class="line">#java -jar blog start</span><br></pre></td></tr></table></figure>

<h2 id="2-标题语法"><a href="#2-标题语法" class="headerlink" title="2.标题语法"></a>2.标题语法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>

<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="3-字体："><a href="#3-字体：" class="headerlink" title="3.字体："></a>3.字体：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加粗、</span></span><br><span class="line">**加粗内容**</span><br><span class="line"><span class="comment">//代码高亮显示</span></span><br><span class="line">    ==我是高亮的内容==</span><br><span class="line"><span class="comment">//删除线</span></span><br><span class="line">    ~~被删除的文字~~</span><br><span class="line"><span class="comment">//斜体</span></span><br><span class="line">    *斜体内容*</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;加粗、<br><strong>加粗内容</strong><br>&#x2F;&#x2F;代码高亮显示<br>    &#x3D;&#x3D;我是高亮的内容&#x3D;&#x3D;<br>&#x2F;&#x2F;删除线<br>    <del>被删除的文字</del><br>&#x2F;&#x2F;斜体<br>    <em>斜体内容</em></p>
<h2 id="4-引用语法"><a href="#4-引用语法" class="headerlink" title="4.引用语法"></a>4.引用语法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用</span></span><br><span class="line">&gt;引用内容<span class="number">1</span></span><br><span class="line">&gt;&gt;引用内容<span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;引用内容<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;引用</p>
<blockquote>
<p>引用内容1</p>
<blockquote>
<p>引用内容2</p>
<blockquote>
<p>引用内容3</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="5-分割线"><a href="#5-分割线" class="headerlink" title="5.分割线"></a>5.分割线</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.部分分割线</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">//2.全屏分割线</span></span><br><span class="line">***</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<h2 id="6-图片插入"><a href="#6-图片插入" class="headerlink" title="6.图片插入"></a>6.图片插入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.在线图片(!为英文状态下)</span></span><br><span class="line">![图片名]（图片路径）</span><br><span class="line"><span class="comment">//2.本地图片</span></span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://img2.baidu.com/it/u=3565643375,1286481123&fm=253&app=138&size=w931&n=0&f=JPEG&fmt=auto?sec=1666285200&t=b6c0b46e8f7023c832ed0e18ecb4a89a" alt="背景图"></p>
<h2 id="7-超链接"><a href="#7-超链接" class="headerlink" title="7.超链接"></a>7.超链接</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//超链接语法</span></span><br><span class="line">[超链接的内容](超链接地址)</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/bucacg/bucacg.github.io">github.com</a></p>
<p><a href="%5Bgithub.com%5D(https://github.com/bucacg/bucacg.github.io)">my Github</a></p>
<h2 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无序列表</span></span><br><span class="line">- 目录<span class="number">1</span></span><br><span class="line">- 目录<span class="number">2</span></span><br><span class="line">- 目录<span class="number">3</span></span><br><span class="line"><span class="comment">//有序列表</span></span><br><span class="line">    数字键+.+名称</span><br></pre></td></tr></table></figure>

<ul>
<li>目录1<ul>
<li>目录2<ul>
<li>目录3</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>1.首页</p>
<p>2.目录</p>
<p>3.正文</p>
<h2 id="9-表格"><a href="#9-表格" class="headerlink" title="9.表格"></a>9.表格</h2><p>右键插入表格（ctrl+&#x2F;  可查看源码）</p>
<table>
<thead>
<tr>
<th>学号</th>
<th>姓名</th>
<th>班级</th>
</tr>
</thead>
<tbody><tr>
<td>001</td>
<td>咯这是</td>
<td>java班</td>
</tr>
<tr>
<td>002</td>
<td>模型</td>
<td>python班</td>
</tr>
<tr>
<td>003</td>
<td>先江苏南京</td>
<td>c++班</td>
</tr>
</tbody></table>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=536623312&auto=0&height=66"></iframe>]]></content>
  </entry>
  <entry>
    <title>Python(胶水语言)入门</title>
    <url>/2022/10/20/Python%E6%88%90%E9%95%BF%E8%AE%B01/</url>
    <content><![CDATA[<h3 id="python基础1"><a href="#python基础1" class="headerlink" title="python基础1"></a><em>python基础1</em></h3><span id="more"></span>

<p><em>先安利学习网站</em></p>
<p><a href="http://c.biancheng.net/python/">C语言中文网</a> </p>
<p><a href="https://www.cnblogs.com/">博客网</a></p>
<p><a href="https://www.runoob.com/">菜鸟教程</a></p>
<h2 id="一-Python相关"><a href="#一-Python相关" class="headerlink" title="一.Python相关"></a>一.Python相关</h2><h3 id="1-Python前景"><a href="#1-Python前景" class="headerlink" title="1.Python前景"></a>1.Python前景</h3><h6 id="爬虫工程师"><a href="#爬虫工程师" class="headerlink" title="爬虫工程师"></a>爬虫工程师</h6><p>​    爬数据分析</p>
<h6 id="Web开发工程师"><a href="#Web开发工程师" class="headerlink" title="Web开发工程师"></a>Web开发工程师</h6><p>​    网页设计（前端）<br>    通过后台处理，返回给前端（后端）<br>    小程序，网站，app等</p>
<h3 id="2-编程语言"><a href="#2-编程语言" class="headerlink" title="2.编程语言"></a>2.编程语言</h3><h4 id="1-何为编程语言"><a href="#1-何为编程语言" class="headerlink" title="1.何为编程语言"></a>1.何为编程语言</h4><p>编程就是编写程序，程序就是一系列指令，告诉计算机做什么。</p>
<p>编程语言就是我们能让计算机识别的语言。</p>
<h4 id="2-编程语言发展史"><a href="#2-编程语言发展史" class="headerlink" title="2.编程语言发展史"></a>2.编程语言发展史</h4><ul>
<li><p>机器码:  0   1</p>
<p>​	二进制   八进制    十进制  十六进制</p>
</li>
<li><p>汇编语言</p>
</li>
<li><p>高级语言</p>
<p>​	用人类的方式来编写程序</p>
<p>​	高级语言的老大哥C</p>
<pre><code>  Java   go python. 都有c的影子
</code></pre>
<h3 id="3-Python特点"><a href="#3-Python特点" class="headerlink" title="3.Python特点"></a>3.Python特点</h3><p>​	Python（胶水语言）简单灵活易上手。可配合其他语言使用。可用于游戏开发，系统管理，web应用，web安全，爬虫……</p>
<h3 id="4-Python官网-卡"><a href="#4-Python官网-卡" class="headerlink" title="4.Python官网:(卡)"></a>4.Python官网:(卡)</h3><h4 id="网站以及问题"><a href="#网站以及问题" class="headerlink" title="网站以及问题"></a>网站以及问题</h4><p>​	[官网]<a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></p>
<p>​	验证是否安装成功: cmd里输入python出现版本则成功<br>为什么要加入环境变量呢？为了让计算机知道Python的位置<br>如何卸载干净？打开控制面板——_卸载程序_找到卸载程序——卸载	</p>
<h2 id="二-输入-amp-输出"><a href="#二-输入-amp-输出" class="headerlink" title="二.输入 &amp;输出"></a>二.输入 &amp;输出</h2><p>​	所有符号英文状态。必须有双引号</p>
<h3 id="1-输入input（“系统提示内容”）"><a href="#1-输入input（“系统提示内容”）" class="headerlink" title="1.输入input（“系统提示内容”）"></a>1.输入input（“系统提示内容”）</h3><p>​	input (“系统提示的内容”)#input是提示用户输入什么的<br>input ()#获取你键盘输入的数据<br>input (“请输入电话号:”)#程序运行后会暂停等待你回车，继续执行</p>
<h3 id="2-输出print-“输出内容”"><a href="#2-输出print-“输出内容”" class="headerlink" title="2.输出print(“输出内容”)"></a>2.输出print(“输出内容”)</h3><p>​	怎么输出引号？</p>
<h2 id="三-注释"><a href="#三-注释" class="headerlink" title="三.注释"></a>三.注释</h2><p>给程序做批注的，不会显示到程序中去</p>
<p>不想打印时可用</p>
<ul>
<li>单行注释</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2022年10月19号</span></span><br><span class="line"><span class="comment"># 作者：bucacg</span></span><br><span class="line"><span class="comment"># 注释的demo</span></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;请输入你的名字：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;注释&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>多行注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">三对引号内多行注释的内容，都不会对程序造成影响，</span><br><span class="line">但必须英文状态下的三对符号</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">2022年10月19号</span><br><span class="line">作者：bucacg</span><br><span class="line">注释的demo</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="四-开发模式"><a href="#四-开发模式" class="headerlink" title="四.开发模式"></a>四.开发模式</h2><h4 id="1-命令行模式（交互模式）"><a href="#1-命令行模式（交互模式）" class="headerlink" title="1.命令行模式（交互模式）"></a>1.命令行模式（交互模式）</h4><ul>
<li>win + r   输入cmd ，打开黑窗口   》》 输入 Python 》》 这就是命令行模式</li>
</ul>
<h4 id="2-文本模式（脚本模式）idle可打开"><a href="#2-文本模式（脚本模式）idle可打开" class="headerlink" title="2.文本模式（脚本模式）idle可打开"></a>2.文本模式（脚本模式）idle可打开</h4><ul>
<li>new file  新建        open file来修改，</li>
<li>鼠标右键新建文本txt— 编写Python代码–修改文件名的后缀 为 .py</li>
<li>两者区别：<ul>
<li>命令行不能长期保存代码 ，不太好进行 修改， 好处就是方便我们测试一些模块的简单使用，以及快速打印变量的值</li>
<li>文本的就能够长期保存我们的代码  下次修改 也是比较方便， 我们一般开发也是基于文本模式</li>
</ul>
</li>
</ul>
<h2 id="五-数据类型与变量"><a href="#五-数据类型与变量" class="headerlink" title="五.数据类型与变量"></a>五.数据类型与变量</h2><h3 id="何为变量"><a href="#何为变量" class="headerlink" title="何为变量"></a>何为变量</h3><p>输出变量不需要引号</p>
<p>目的：计算两个数的和</p>
<p>场景：我们去超市购物，用菜篮来装东西（肉，菜，调味品）购物结束，需要去结算金额</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a 表示青菜 价格</span></span><br><span class="line"><span class="comment"># b 表示肉 价格</span></span><br><span class="line">a = <span class="number">12</span>   <span class="comment"># a 存放了  数据 12 </span></span><br><span class="line">b = <span class="number">32</span></span><br><span class="line">result = a+b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最后结果为&quot;</span>, a+b)</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ul>
<li><strong>变量就是一个容器可以是菜篮子,存储各种数据，也可以存储一个数据</strong></li>
<li><strong>程序用来处理数据的，变量则是用来存储数据的</strong></li>
</ul>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- <span class="built_in">int</span>    （整形）  <span class="number">123</span> <span class="number">10000</span> </span><br><span class="line">- <span class="built_in">float</span>  （浮点数） <span class="number">3.14</span> </span><br><span class="line">- <span class="built_in">bool</span> 布尔类型     <span class="literal">True</span> 真   <span class="literal">False</span> 假</span><br><span class="line">- <span class="built_in">str</span>（字符串）  <span class="string">&quot;引号里的就是字符串&quot;</span></span><br><span class="line">- <span class="built_in">tuple</span>（元组）</span><br><span class="line">- <span class="built_in">dict</span>（字典）</span><br><span class="line">- <span class="built_in">list</span>（列表）</span><br><span class="line">- <span class="built_in">set</span>（集合）</span><br></pre></td></tr></table></figure>

<h3 id="怎样知道一个变量的类型呢"><a href="#怎样知道一个变量的类型呢" class="headerlink" title="怎样知道一个变量的类型呢"></a>怎样知道一个变量的类型呢</h3><blockquote>
<p>type(变量名)  会返回变量的类型</p>
<p>在Python中，只要我们自己定义好变量后，解释器就会自动识别他的一个类型 ，不需要我们自动说明</p>
<p>type一次只能查看一个数据类型</p>
</blockquote>
<h3 id="int整形"><a href="#int整形" class="headerlink" title="int整形"></a>int整形</h3><blockquote>
<p>人数，日期，牙齿的数量，</p>
</blockquote>
<p>声明方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量名 = 整数值</span><br><span class="line">a = <span class="number">12</span></span><br><span class="line">b = <span class="number">32</span></span><br><span class="line">d,f，e = <span class="number">23</span>,<span class="number">22222223</span>,<span class="number">5662</span></span><br></pre></td></tr></table></figure>

<h3 id="float-浮点型"><a href="#float-浮点型" class="headerlink" title="float 浮点型"></a>float 浮点型</h3><blockquote>
<p>金钱，身高，体重，圆周率</p>
</blockquote>
<p>声明方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量名 = 浮点数</span><br><span class="line">num1 =  <span class="number">3.14</span></span><br><span class="line">height = <span class="number">1.78</span></span><br><span class="line"><span class="built_in">print</span>(height)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(height))</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<blockquote>
<p>浮点类型的计算是不精准的，两个浮点值运算，可能会丢失精度(带小数点的十进制数据,转为二进制数据的时候会丢失) 0.3 -0.2 不等于0.1 </p>
</blockquote>
<h3 id="bool-类型"><a href="#bool-类型" class="headerlink" title="bool 类型"></a>bool 类型</h3><blockquote>
<p>生活的 真 与 假 </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">变量名 = 布尔值</span><br><span class="line"></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line">lose = <span class="literal">False</span></span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">注意：</span><br><span class="line"></span><br><span class="line">- 首字母必须要大写，</span><br><span class="line">- 布尔类型，也可以是数值， 并且运算，True = 1  False = 0</span><br><span class="line"></span><br><span class="line">## 五.标识符与关键字</span><br><span class="line"></span><br><span class="line">### 什么是标识符</span><br><span class="line"></span><br><span class="line">![1655048857217](D:/02%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.assets/1655048857217.png)</span><br><span class="line"></span><br><span class="line">### 标识符规则</span><br><span class="line"></span><br><span class="line">- 标识符由字母、下划线和数字组成，且数字不能开头 </span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">    fromNo12	 #True   </span><br><span class="line">	from#12      #False</span><br><span class="line">	my_Boolean   #True</span><br><span class="line">	my-Boolean   #False</span><br><span class="line">	Obj2         #True</span><br><span class="line">	2ndObj       #False</span><br><span class="line">	myInt        #True</span><br><span class="line">	test1        #True</span><br><span class="line">	Mike2jack    #True</span><br><span class="line">	My_tExt      #True</span><br><span class="line">	_test        #True</span><br><span class="line">	test!32      #True</span><br><span class="line">	haha(da)tt   #False</span><br><span class="line">	int   # int 类型标识符  不要与Python解释器的重复，会产生冲突    #False</span><br><span class="line">	jack_roseint  #True  </span><br><span class="line">	jack&amp;rose     #False</span><br><span class="line">	GUI           #False</span><br><span class="line">	G.U.I         #False</span><br></pre></td></tr></table></figure>

<p><strong>Python 标识符是区分大小写</strong> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Andy != andy </span><br></pre></td></tr></table></figure>

<h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ul>
<li><p>见面知意</p>
<blockquote>
<p>起一个有意义的名字，尽量做到看一眼就知道是什么意思(提高代码可 读性) 比如: 名字 就定义为 name , 定义学生 用 student</p>
</blockquote>
</li>
</ul>
<p><img src="D:/02%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.assets/1655049741609.png" alt="1655049741609"></p>
<h4 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h4><blockquote>
<p>小驼峰式命名法（lower camel case）： 第一个单词以小写字母开始；第二个单词的首字母大写，例如：myName、aDog<br>大驼峰式命名法（upper camel case）： 每一个单字的首字母都采用大写字母，例如：FirstName、LastName</p>
<p>​</p>
</blockquote>
<h3 id="下划线命名法"><a href="#下划线命名法" class="headerlink" title="下划线命名法"></a>下划线命名法</h3><p>还有一种命名法是用下划线“_”来连接所有的单词，比如<code>send_buf</code> 、 <code>save_img</code>， </p>
<p><strong>小结：</strong></p>
<ul>
<li>推荐使用下划线的命名法来定义变量名</li>
<li>不要与关键字重名</li>
</ul>
<h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span>     <span class="keyword">as</span>      <span class="keyword">assert</span>     <span class="keyword">break</span>     <span class="keyword">class</span>      <span class="title class_">continue</span>    <span class="keyword">def</span>     <span class="title function_">del</span></span><br><span class="line"><span class="keyword">elif</span>    <span class="keyword">else</span>    <span class="keyword">except</span>     <span class="built_in">exec</span>      <span class="keyword">finally</span>    <span class="keyword">for</span>         <span class="keyword">from</span>    <span class="keyword">global</span></span><br><span class="line"><span class="keyword">if</span>      <span class="keyword">in</span>      <span class="keyword">import</span>     <span class="keyword">is</span>        <span class="keyword">lambda</span>     <span class="keyword">not</span>         <span class="keyword">or</span>      <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>   <span class="keyword">raise</span>   <span class="keyword">return</span>     <span class="keyword">try</span>       <span class="keyword">while</span>      <span class="keyword">with</span>        <span class="keyword">yield</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过Python shell 来查看关键字</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> keyword </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keyword.kwlist </span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(<span class="string">&#x27;keywords&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>小结：</strong></p>
<ul>
<li>关键字的学习以及使用，咱们会在后面的课程中依一一进行学习。 </li>
<li>关键字不需要同学们进行记忆，大家只要经常使用，就会记住了</li>
<li>变量名也不要与关键字重名</li>
</ul>
<h2 id="六-运算符"><a href="#六-运算符" class="headerlink" title="六.运算符"></a>六.运算符</h2><p>提到运算符，我想大家首先想到的就是加、减、乘、除之类，但python可以进行的运算有很多种，可不只加减乘除这么简单 ，我们写代码时常见的运算符有以下几种</p>
<h3 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h3><p>下面以a&#x3D;10 ,b&#x3D;20为例进行计算</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加</td>
<td>两个对象相加 a + b 输出结果 30</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>得到负数或是一个数减去另一个数 a - b 输出结果 -10</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 200</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>除</td>
<td>b &#x2F; a 输出结果 2</td>
</tr>
<tr>
<td>&#x2F;&#x2F;</td>
<td>取整除</td>
<td>返回商的整数部分 9&#x2F;&#x2F;2 输出结果 4 , 9.0&#x2F;&#x2F;2.0 输出结果 4.0</td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
<td>返回除法的余数 b % a 输出结果 0</td>
</tr>
<tr>
<td>**</td>
<td>指数</td>
<td>a**b 为10的20次方， 输出结果 100000000000000000000</td>
</tr>
</tbody></table>
<blockquote>
<p>注意：混合运算时，优先级顺序为： ** 高于 * &#x2F; % &#x2F;&#x2F; 高于 + - ，为了避免歧义，建议使用 () 来处理运算符优先级。<br>并且，不同类型的数字在进行混合运算时，整数将会转换成浮点数进行运算。	</p>
</blockquote>
<h3 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2.赋值运算符"></a>2.赋值运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>赋值运算符</td>
<td>把 &#x3D; 号<em>右边的结果 赋给 左边的变量</em>，如 num &#x3D; 1 + 2 * 3，结果num的值为7</td>
</tr>
</tbody></table>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单个变量赋值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num</span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个变量赋值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num1, num2, f1, str1 = <span class="number">100</span>, <span class="number">200</span>, <span class="number">3.14</span>, <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num1</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num2</span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1</span><br><span class="line"><span class="number">3.14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出多个变量</span></span><br><span class="line"><span class="built_in">print</span>(num1, num2, f1, str1)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>  复合赋值运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>+&#x3D;</td>
<td>加法赋值运算符</td>
<td>c +&#x3D; a 等效于 c &#x3D; c + a</td>
</tr>
<tr>
<td>-&#x3D;</td>
<td>减法赋值运算符</td>
<td>c -&#x3D; a 等效于 c &#x3D; c - a</td>
</tr>
<tr>
<td>*&#x3D;</td>
<td>乘法赋值运算符</td>
<td>c *&#x3D; a 等效于 c &#x3D; c * a</td>
</tr>
<tr>
<td>&#x2F;&#x3D;</td>
<td>除法赋值运算符</td>
<td>c &#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F; a</td>
</tr>
<tr>
<td>%&#x3D;</td>
<td>取模赋值运算符</td>
<td>c %&#x3D; a 等效于 c &#x3D; c % a</td>
</tr>
<tr>
<td>**&#x3D;</td>
<td>幂赋值运算符</td>
<td>c **&#x3D; a 等效于 c &#x3D; c **a</td>
</tr>
<tr>
<td>&#x2F;&#x2F;&#x3D;</td>
<td>取整除赋值运算符</td>
<td>c &#x2F;&#x2F;&#x3D; a 等效于 c &#x3D; c &#x2F;&#x2F; a</td>
</tr>
</tbody></table>
<h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 1.用变量存储我们生活中的数值信息,并输出  </span><br><span class="line">   ``年龄</span><br><span class="line">   ``身高</span><br><span class="line">   ``生日</span><br><span class="line">   ``日期</span><br><span class="line">   ``时间</span><br><span class="line"> ``tips: 年龄为int类型 身高为float类型 生日为int类型 日期为int类型 时间 int类型</span><br><span class="line"> </span><br><span class="line"> 2.用什么函数可以知道变量的类型</span><br><span class="line"> 	tips：自己定义两个变量，用Python内置函数</span><br><span class="line"> </span><br><span class="line">3.判断以下变量是否正确, 并且用True（对） False（错）表示对错</span><br><span class="line">	_=6			(T) #正确但不建议</span><br><span class="line">	_8=12		(T)</span><br><span class="line">	6age=12 	(F)</span><br><span class="line">	true=23 	(T)#True才是关键字，这里原则上正确，但是不符合规范</span><br><span class="line">	print=22	(F)</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">4.用编程计算 a = 10，b = 20 的 加，减，乘，除。 并且打印出结果</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5.交换两个变量的值，a = 10 ,b =20   变成 a =20 ,b=10  （面试题）</span><br><span class="line">	不能直接复值 a =20 b =10</span><br><span class="line">	tips：利用Python特殊机制</span><br><span class="line">		  算数运算符</span><br><span class="line">		  第三个变量</span><br><span class="line">		  a,b=b,a</span><br><span class="line">		  </span><br><span class="line">6.变量赋值：如何将100赋值给变量A，将100.0赋值给变量B；并分别判断A，B的变量类型	</span><br><span class="line"></span><br><span class="line">7.如何将 Hello，world!赋值给变量C，并判断C的变量类型</span><br><span class="line"></span><br><span class="line">8.如何实现将对象 1, 2, john 同时复制给变量a,b,c(一行代码)</span><br><span class="line"></span><br><span class="line">9.请找出下面代码的错误</span><br><span class="line">   break=1  #  break为关键字</span><br><span class="line">   print(break)</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>  ​</p>
<h2 id="巩固博客"><a href="#巩固博客" class="headerlink" title="巩固博客"></a>巩固博客</h2><ul>
<li><a href="http://c.biancheng.net/view/2171.html">http://c.biancheng.net/view/2171.html</a></li>
<li>前期不建议你们使用pycharm ， 为什么， 因为他会自动提示， 补全代码</li>
<li>idle，方便练习代码    </li>
<li>pycharm 熟悉了再用</li>
</ul>
<h1 id="七-序列类型"><a href="#七-序列类型" class="headerlink" title="七.序列类型"></a>七.序列类型</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>用来存储描述性质的数据，eg：姓名，地址。自我介绍等。字符串是一个有序的集合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a  = <span class="number">10000</span>  <span class="comment"># 什么类型   int</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br></pre></td></tr></table></figure>

<p>字符串类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str01 = <span class="string">&quot;hello world&quot;</span>    <span class="comment"># str</span></span><br><span class="line">str02 = <span class="string">&#x27;女士，先生们下午好！&#x27;</span>  <span class="comment"># str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串引号的嵌套报错 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;bucacg&quot;)    # 不能单双混合</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">print(&#x27;</span>人生苦短，<span class="string">&#x27;我用Python&quot;) # 解决print(&quot;&#x27;</span>人生苦短，<span class="string">&#x27;我用Python&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>三引号的使用:可以用来注释，也可以用来包裹一些常用的字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一般都用来包裹 长的字符串</span></span><br><span class="line">a=<span class="string">&quot;&quot;&quot;床前明月光，疑是地上霜。举头望明月，低头思故乡</span></span><br><span class="line"><span class="string">床前明月光，疑是地上霜。举头望明月，低头思故乡</span></span><br><span class="line"><span class="string">床前明月光，疑是地上霜。举头望明月，低头思故乡</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">床前明月光，疑是地上霜。举头望明月，低头思故乡</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">床前明月光，疑是地上霜。举头望明月，低头思故乡</span></span><br><span class="line"><span class="string">床前明月光，疑是地上霜。举头望明月，低头思故乡</span></span><br><span class="line"><span class="string">床前明月光，疑是地上霜。举头望明月，低头思故乡</span></span><br><span class="line"><span class="string">床前明月光，疑是地上霜。举头望明月，低头思故乡</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">      </span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行注释 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">同学们好，我是多行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一定要记住他们的区别，多行注释是 三引号 独占一行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>小结：</p>
<ul>
<li>双引号或者单引号中的数据，就是字符串 </li>
<li>不能单双混合 </li>
<li>不能出现多对引号 print(‘我说:’晚上好’’)    # 里面两对引号都是单引号</li>
</ul>
<h2 id="下标和切片"><a href="#下标和切片" class="headerlink" title="下标和切片"></a>下标和切片</h2><p>“下标” 就是编号，就比如超市的存储柜的编号，通过编号就能找到相应的存储空间</p>
<p>生活中的“下标”</p>
<ul>
<li>超市的存储柜</li>
<li>高铁座位</li>
</ul>
<p>字符串，列表，元组都支持下标索引， <strong>字符串 实际上就是字符的数据集合， 索引支持的下标索引</strong></p>
<p>切片：就是取出一部分 ，切出一部分数据，	</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">变量[下标]</span><br><span class="line">变量[起始:结束:步长]</span><br><span class="line"></span><br><span class="line"><span class="comment"># demo；</span></span><br><span class="line">hel_str = <span class="string">&quot;大家晚上好，今天星期六&quot;</span></span><br><span class="line"><span class="comment">#          0 1 2 3 45 6 7 8 9 10</span></span><br><span class="line"><span class="built_in">print</span>(hel_str[<span class="number">3</span>]) <span class="comment"># 上</span></span><br><span class="line"><span class="built_in">print</span>(hel_str[<span class="number">0</span>:<span class="number">2</span>]) <span class="comment"># 大家</span></span><br><span class="line"><span class="built_in">print</span>(hel_str[<span class="number">2</span>::<span class="number">2</span>])  <span class="comment"># &#x27;晚好今星六 &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(hel_str[::-<span class="number">1</span>])  <span class="comment"># &#x27;六期星天今，好上晚家大&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(hel_str[<span class="number">1</span>:<span class="number">10</span>])   <span class="comment"># 这里 取到 1到9 </span></span><br><span class="line"><span class="built_in">print</span>(hel_str[<span class="number">11</span>])    <span class="comment"># 下标越界</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hel_str[:<span class="number">3</span>]     <span class="comment"># &#x27;大家晚&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hel_str[:<span class="number">3</span>:-<span class="number">1</span>]  <span class="comment">#&#x27;六期星天今，好&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hel_str[::-<span class="number">1</span>]   <span class="comment">#&#x27;六期星天今，好上晚家大&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hel_str[::<span class="number">2</span>]    <span class="comment">#&#x27;大晚好今星六&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hel_str[::-<span class="number">2</span>]   <span class="comment">#&#x27;六星今好晚大&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hel_str[:<span class="number">3</span>:-<span class="number">2</span>]  <span class="comment">#&#x27;六星今好&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hel_str[:<span class="number">3</span>:<span class="number">2</span>]   <span class="comment">#&#x27;大晚&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hel_str[::-<span class="number">100</span>]  <span class="comment">#&#x27;六&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hel_str[::-<span class="number">10</span>]   <span class="comment">#&#x27;六大&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hel_str[::-<span class="number">11</span>]   <span class="comment">#&#x27;六&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hel_str[::-<span class="number">12</span>]   <span class="comment">#&#x27;六&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hel_str[::-<span class="number">9</span>]    <span class="comment">#&#x27;六家&#x27;</span></span><br><span class="line">&gt;&gt;&gt;hel_str[:<span class="built_in">len</span>(hel_str)/<span class="number">2</span>]</span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">输出结果为;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;&lt;pyshell#18&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    hel_str[:len(hel_str)/2]</span></span><br><span class="line"><span class="string">TypeError: slice indices must be integers or None or have an __index__ method</span></span><br><span class="line"><span class="string">意思是不是整数，解决方法是整除//</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">hel_str[:<span class="built_in">len</span>(hel_str)//<span class="number">2</span>]</span><br><span class="line"><span class="comment">#&#x27;大家晚上好&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hel_str[<span class="number">11</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;&lt;pyshell#20&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    hel_str[11]</span></span><br><span class="line"><span class="string">IndexError: string index out of range</span></span><br><span class="line"><span class="string">超出范围</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">super_people = <span class="string">&quot;超级赛亚人&quot;</span></span><br><span class="line">                <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(super_people[<span class="number">0</span>:<span class="number">2</span>])<span class="comment"># 超级</span></span><br><span class="line"><span class="built_in">print</span>(super_people[<span class="number">4</span>:<span class="number">2</span>】<span class="comment">#无结果</span></span><br><span class="line"><span class="built_in">print</span>(super_people[<span class="number">4</span>:<span class="number">2</span>:-<span class="number">1</span>])<span class="comment"># 人亚</span></span><br><span class="line"><span class="built_in">print</span>(super_people[<span class="number">4</span>])<span class="comment"># 人</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>下标 是从0开始  且不能越界（报错）</li>
<li>切片 只包含 起始位置，不包含 结束位置，（取头不取尾）</li>
<li>切片  空着不写，默认是全部取出</li>
<li>步长 常用于逆序输出 [::-1]</li>
</ul>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>在实际开发中，经常需要将多个数据存储起来，以便后边的代码使用。<em>列表<code>list</code>，是一个<strong>有序</strong>且<strong>可变</strong>的容器，在里面可以存放多个<strong>不同类型</strong>的元素</em>。</p>
<p>列表会将所有数据都放在一对中括号<code>[ ]</code>里面，相邻数据之间用逗号<code>,</code>分隔</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">列表名 = [数据<span class="number">1</span>， 数据<span class="number">2</span>]</span><br><span class="line">demo1 = [<span class="string">&quot;2022&quot;</span>, <span class="string">&quot;jk&quot;</span>, <span class="number">18</span>, <span class="literal">True</span>, <span class="number">99.1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表里面,还可以再放列表 </span></span><br><span class="line">a = [<span class="number">12</span>,<span class="number">13</span>,<span class="number">33</span>]</span><br><span class="line">b = [a,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]      <span class="comment">#[[12, 13, 33], 4, 5, 6]</span></span><br><span class="line"><span class="comment"># 我想输出b里面的12</span></span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">0</span>]) <span class="comment"># 取出[12,13,33]</span></span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">0</span>][<span class="number">0</span>]) <span class="comment"># 取出12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表里的值是可以修改的</span></span><br><span class="line">demo1[<span class="number">0</span>] = <span class="number">9999</span>   <span class="comment">#[9999, &quot;jk&quot;, 18, True, 99.1]</span></span><br><span class="line">demo1[:<span class="number">3</span>]=<span class="number">1314</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;&lt;pyshell#44&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    demo1[:3]=1314</span></span><br><span class="line"><span class="string">TypeError: can only assign an iterable</span></span><br><span class="line"><span class="string">  这里修改切片的内容必须有[]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo1[:<span class="number">3</span>]=<span class="number">1314</span></span><br><span class="line">TypeError: can only assign an iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo1[<span class="number">0</span>:<span class="number">3</span>]=[<span class="number">1314</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo1   <span class="comment">#[1314, True, 99.1]</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo1[:<span class="number">3</span>]=<span class="string">&quot;1314&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo1   <span class="comment">#[&#x27;1&#x27;, &#x27;3&#x27;, &#x27;1&#x27;, &#x27;4&#x27;, True, 99.1]</span></span><br></pre></td></tr></table></figure>

<h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><blockquote>
<p>虽然可以将不同类型的数据放入到同一个列表中，但通常情况下不这么做，同一列表中只放入同一类型的数据，这样可以提高程序的可读性。</p>
</blockquote>
<h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h2><p>元组（tuple），是一个有序且<em><strong>不可变</strong></em>的容器，在里面可以存放多个<em><strong>不同类型</strong></em>的元素。</p>
<p>元组的表现形式为用()小括号包裹起来的数据,里面的数据用逗号，隔开</p>
<p><em><strong>但是在（）里面仅仅只有一个数据时为int类型，，除非数字后面加个逗号就是元组。</strong></em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line">变量名 = (数据<span class="number">1</span>，数据<span class="number">2</span>)</span><br><span class="line">tu = (<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;dfds&quot;</span>, [<span class="number">12</span>,<span class="number">23</span>,<span class="number">21</span>,<span class="number">3</span>,<span class="number">23</span>,<span class="number">1</span>])</span><br><span class="line">tu = (<span class="number">11</span>,)   <span class="comment">#元组类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tu[-<span class="number">1</span>]=<span class="number">1314</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;&lt;pyshell#58&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    tu[-1]=1314</span></span><br><span class="line"><span class="string">TypeError: &#x27;tuple&#x27; object does not support item assignment</span></span><br><span class="line"><span class="string">元组类型的值不支持修改，可以重新赋值 （同字符串）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tu=(<span class="number">123</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tu     <span class="comment">#123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1=<span class="string">&quot;lalalala&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1[<span class="number">1</span>]=<span class="number">123</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">结果为：</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;&lt;pyshell#69&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    str1[1]=123</span></span><br><span class="line"><span class="string">TypeError: &#x27;str&#x27; object does not support item assignment</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>[<span class="number">1</span>]=<span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;&lt;pyshell#70&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    str[1]=&quot;123&quot;</span></span><br><span class="line"><span class="string">TypeError: &#x27;str&#x27; object does not support item assignment</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">age = (<span class="number">18</span>)  <span class="comment"># int类型</span></span><br><span class="line">age = (<span class="number">18</span>,) <span class="comment"># tuple类型 --&gt; 就算元组里面只有一个数据,也要加个逗号.否则不会被认为是元组</span></span><br></pre></td></tr></table></figure>

<h4 id="小结：-1"><a href="#小结：-1" class="headerlink" title="小结："></a>小结：</h4><blockquote>
<p>元组的用法和列表基本类似,有两个不同之处:<br>   1.元组用小括号,列表用中括号 </p>
<p>   2.<strong>元组里面的数据,是不可以改变的</strong>，如果修改就得重新赋值(<strong>字符串也是不可变类型</strong>)</p>
<ol start="3">
<li><em><strong>tuple类型 –&gt; 就算元组里面只有一个数据,也要加个逗号.否则不会被认为是元组</strong></em></li>
</ol>
<p>如果你要保存的数据,可能会修改 –&gt; 列表来保存<br>如果你要保存的数据,不会修改 –&gt; 元组来保存</p>
</blockquote>
<h4 id="序列类型特点："><a href="#序列类型特点：" class="headerlink" title="序列类型特点："></a>序列类型特点：</h4><ul>
<li>能存储多个数据</li>
<li>内部数据有序 </li>
<li>能通过下标获取</li>
<li>通过切片切割</li>
<li>字符串和元组不能修改，列表可以。</li>
</ul>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>为了满足我们需求 需要 把一些数据，转换为别的类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># int(数据) --&gt; 把数据转为整形</span><br><span class="line"># float(数据) --&gt; 把数据转为浮点型形</span><br><span class="line"># bool(数据) --&gt; 把数据转为布尔形</span><br><span class="line"># str(数据) --&gt; 把数据转为字符串</span><br><span class="line"># list(数据) --&gt; 把数据转为列表</span><br><span class="line"># tuple(数据) --&gt; 把数据转为元组</span><br><span class="line"># input可以用来给变量赋值</span><br><span class="line"># 万能方法 eval()  ---&gt; 只对字符串有效  #一般不要使用</span><br><span class="line">name = input(&#x27;输入姓名&#x27;)</span><br><span class="line">age = input(&#x27;输入年龄&#x27;)  #age为str类型</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 注意：</p>
<ul>
<li><strong>input输入,得到的数据,默认是str类型</strong>.有些时候需要存储数字类型 则 int&#x2F;float  进行类型转换，</li>
<li>比如以上的age 变量，年龄大家 一般都存为数字，</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">age = int(input(&#x27;输入年龄&#x27;)) # 把得到的数据转换为整形再赋值给age       str为int型</span><br></pre></td></tr></table></figure>

<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>一些特殊意思的字符！！比如 暗号，</p>
<p>编程中,字符串里同样也有特殊意思的字符，，，即转义字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">\n --&gt; 换行</span><br><span class="line">\t --&gt; 制表符(tab)一般是<span class="number">4</span>个空格</span><br><span class="line">\\ --&gt; 正常输出一个\</span><br><span class="line">\<span class="string">&#x27; --&gt; 正常输出一个引号  </span></span><br><span class="line"><span class="string">\a </span></span><br><span class="line"><span class="string">print(&#x27;</span>老板说:\t大家要注意身体\<span class="string">&#x27;&#x27;</span>)  <span class="comment">#老板说:	大家要注意身体&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;老板说:\n大家要注意身体\&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#老板说:</span></span><br><span class="line"><span class="comment">#大家要注意身体&#x27;    </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有的时候.不需要一个字符串里出现转义.可以在字符串前面加个r.就会取消转义功能</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;晚上好\t你吃饭了么啊\n哈哈哈\a&#x27;</span>)   <span class="comment">#晚上好\t你吃饭了么啊\n哈哈哈\a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;晚上好\t你吃饭了么啊\n哈哈哈\a&#x27;</span>)    </span><br><span class="line"><span class="comment">#晚上好	你吃饭了么啊</span></span><br><span class="line"><span class="comment">#哈哈哈</span></span><br></pre></td></tr></table></figure>

<h2 id="作业-1"><a href="#作业-1" class="headerlink" title="作业"></a>作业</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.定义一个列表,列表中有3种&quot;数值类型&quot;,用多种方法获取里面的第二个值</span><br><span class="line">2.现有一变量 phone = 1314520,把phone转换为字符串,并输出1314与520</span><br><span class="line">3.现有一变量 names = &quot;pdd陈奕迅刘德华周杰伦&quot; 输出&quot;pdd&quot;,&quot;奕迅&quot;,&quot;德华周杰伦&quot;</span><br><span class="line">4.现有一变量 times = &quot;20990611&quot; 把其中的年,月,日分别输出出来</span><br><span class="line">5.现有一变量 talk=&quot;多喝热水&quot;,想办法输出&quot;水热喝多&quot;</span><br><span class="line">6.用一个print,输出下面内容</span><br><span class="line">众人    寻他千百度    </span><br><span class="line">那人    却在灯火阑珊处</span><br><span class="line"></span><br><span class="line">7.计算a, b, 相加 并打印出来 （代码题）</span><br><span class="line">	a = &quot;12&quot;</span><br><span class="line">	b = 111111111</span><br><span class="line">	</span><br><span class="line">8.元组可以进行修改吗（判断题）</span><br><span class="line">9.列表数据不能修改（判断题）</span><br><span class="line">10.字符串+数字类型可以吗（解答题）</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.定义一个列表,列表中有3种&quot;数值类型&quot;,用多种方法获取里面的第二个值</span></span><br><span class="line"><span class="built_in">list</span>=[<span class="number">12</span>,<span class="string">&quot;lallala&quot;</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="literal">False</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[<span class="number">1</span>])     <span class="comment">#下标</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[<span class="number">1</span>:<span class="number">2</span>])   <span class="comment">#切片</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[<span class="number">1</span>:<span class="number">0</span>:-<span class="number">1</span>])  <span class="comment">#切片</span></span><br><span class="line"><span class="comment">#2.现有一变量 phone = 1314520,把phone转换为字符串,并输出1314与520</span></span><br><span class="line">phone=<span class="number">1314520</span></span><br><span class="line">phone1=<span class="built_in">str</span>(phone)</span><br><span class="line"><span class="built_in">print</span>(phone1[:<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(phone1[<span class="number">4</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.现有一变量 names = &quot;pdd陈奕迅刘德华周杰伦&quot; 输出&quot;pdd&quot;,&quot;奕迅&quot;,&quot;德华周杰伦&quot;</span></span><br><span class="line">names = <span class="string">&quot;pdd陈奕迅刘德华周杰伦&quot;</span></span><br><span class="line"><span class="built_in">print</span>(names[:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(names[<span class="number">4</span>:<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(names[<span class="number">7</span>:<span class="number">12</span>])</span><br><span class="line"><span class="built_in">print</span>(names[-<span class="number">5</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.现有一变量 times = &quot;20990611&quot; 把其中的年,月,日分别输出出来</span></span><br><span class="line">times = <span class="string">&quot;20990611&quot;</span></span><br><span class="line">year=times[:<span class="number">4</span>]</span><br><span class="line">month=times[<span class="number">5</span>:<span class="number">6</span>]</span><br><span class="line"><span class="built_in">print</span>(times[<span class="number">7</span>:<span class="number">5</span>:-<span class="number">1</span>])</span><br><span class="line">days=times[-<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(year,month,days)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.现有一变量 talk=&quot;多喝热水&quot;,想办法输出&quot;水热喝多&quot;</span></span><br><span class="line">talk=<span class="string">&quot;多喝热水&quot;</span></span><br><span class="line"><span class="built_in">print</span>(talk[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">6.用一个print,输出下面内容</span></span><br><span class="line"><span class="string">众人    寻他千百度    </span></span><br><span class="line"><span class="string">那人    却在灯火阑珊处</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;众人\t寻他千百度\n那人\t却在灯火阑珊处&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">7.计算a, b, 相加 并打印出来 （代码题）</span></span><br><span class="line"><span class="string">	a = &quot;12&quot;</span></span><br><span class="line"><span class="string">	b = 111111111</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="string">&quot;12&quot;</span></span><br><span class="line">b = <span class="number">111111111</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(a)+b)</span><br><span class="line"><span class="comment">#8.元组可以进行修改吗（判断题）  不能</span></span><br><span class="line">tupe=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment">#type[2]=10   #TypeError: &#x27;type&#x27; object does not support item assignment</span></span><br><span class="line"><span class="comment">#9.列表数据不能修改（判断题）  #列表可以修改</span></span><br><span class="line">list2=[<span class="number">1</span>,(<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>),<span class="number">5</span>]</span><br><span class="line">list2[<span class="number">1</span>]=<span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"><span class="comment">#10.字符串+数字类型可以吗（解答题）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;因为类型不同，所以不能相加。转化类型就可以了&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h3><p><a href="http://c.biancheng.net/view/4312.html">序列类型的方法</a></p>
<h1 id="八-序列类型的常用方法"><a href="#八-序列类型的常用方法" class="headerlink" title="八.序列类型的常用方法"></a>八.序列类型的常用方法</h1><h2 id="上节回顾"><a href="#上节回顾" class="headerlink" title="上节回顾"></a>上节回顾</h2><ul>
<li>字符串  str 用单引号或者是双引号包裹的数据就是字符串  <strong>不可变类型</strong></li>
<li>列表  list   用中括号 <code>[]</code> 包裹的数据就是列表  <strong>可变类型</strong>  列表里面可以放各种数据  包括元组列表</li>
<li>元组 tuple   用小括号 <code>()</code> 包裹的数据就是 元组， <strong>不可变类型，</strong></li>
<li><strong>int也是不可变类型</strong></li>
</ul>
<p>序列类型的特点</p>
<ul>
<li>下标    门牌号，我们通过下标去拿到数据 都是  以0开始</li>
<li>切片，[起始:结束: 步长]   取头不取尾，也就是 [0:5]   实际上 0到4 的数据</li>
</ul>
<h2 id="初始方法"><a href="#初始方法" class="headerlink" title="初始方法"></a>初始方法</h2><p>​		方法,eg:生活中解决的方法，方案，特定的功能</p>
<p>​		比如：车出现了问题      方法 1. 去修车厂 维修           方法2 直接买新的，</p>
<p>​		其实就是， <strong>对数据的增，删，改，查，</strong> 在我们一个程序中， 经常对数据进行操作，为了提高我们的开发效率，Python为我们设置一些内置方法，	</p>
<h2 id="列表方法"><a href="#列表方法" class="headerlink" title="列表方法"></a>列表方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表的方法</span><br><span class="line">li = [<span class="string">&quot;jk&quot;</span>, <span class="string">&quot;韦寻&quot;</span>, <span class="number">100</span>, <span class="string">&quot;张三&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line"><span class="comment"># 1. append 添加一个数据，添加到列表的最后面</span></span><br><span class="line"><span class="comment"># 变量.append(数据)</span></span><br><span class="line"> li.append(<span class="string">&quot;李四&quot;</span>) <span class="comment">#[&#x27;jk&#x27;, &#x27;韦寻&#x27;, 100, &#x27;张三&#x27;, &#x27;李四&#x27;]</span></span><br><span class="line"><span class="comment">#  li.append(&quot;bbbb&quot;,&quot;pppppppppp&quot;)  #TypeError: append()只接受一个参数(给定2)</span></span><br><span class="line"> <span class="built_in">print</span>(li)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.insert  添加一个数据，必须指定位置，并且原数据会被挤在后面。不加位置会报错</span></span><br><span class="line"><span class="comment"># 变量.insert(下标,&quot;数据&quot;)</span></span><br><span class="line"><span class="comment"># li.insert(0,&quot;阿飞&quot;)</span></span><br><span class="line"><span class="comment"># print(li)</span></span><br><span class="line">li.insert(<span class="number">10000000000</span>,<span class="string">&quot;uuuuuuuuu&quot;</span>)   <span class="comment">#[&#x27;阿飞&#x27;, &#x27;jk&#x27;, &#x27;周杰伦&#x27;, 100, &#x27;张三&#x27;, &#x27;lalalalala&#x27;, &#x27;uuuuuuuuu&#x27;]</span></span><br><span class="line">name=li.insert(<span class="number">100000000</span>,<span class="string">&quot;oooooooooooo&quot;</span>) <span class="comment">#None   insert的返回值为None</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">insert插入必须给位置，否则报错</span></span><br><span class="line"><span class="string">insert插入的位置为负值且超过它自身长度时默认插在最前面</span></span><br><span class="line"><span class="string">insert插入的位置为正值且超过它自身长度时默认插在最后面</span></span><br><span class="line"><span class="string">insert插入的位置为长度范围之内时，正值从前往后，负值从后往前</span></span><br><span class="line"><span class="string">当给insert插入的值赋值给另一变量时，输出为None</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.extend 追加一个数据到最后一位，把数据打散放入</span></span><br><span class="line"></span><br><span class="line">li.extend(<span class="string">&quot;hello world,&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(li)<span class="comment">#[&#x27;jk&#x27;, &#x27;周杰伦&#x27;, 100, &#x27;张三&#x27;, &#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27; &#x27;, &#x27;w&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;, &#x27;,&#x27;]</span></span><br><span class="line">li.append(<span class="string">&quot;hello world,&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(li)<span class="comment">#[&#x27;jk&#x27;, &#x27;周杰伦&#x27;, 100, &#x27;张三&#x27;, &#x27;hello world,&#x27;]</span></span><br><span class="line"></span><br><span class="line">li.extend([<span class="number">123</span>,<span class="number">123</span>,])</span><br><span class="line">li.extend([<span class="number">123</span>,<span class="number">123</span>])</span><br><span class="line"><span class="built_in">print</span>(li) <span class="comment">#[&#x27;jk&#x27;, &#x27;周杰伦&#x27;, 100, &#x27;张三&#x27;, 123, 123]</span></span><br><span class="line">li.append([<span class="number">123</span>,<span class="number">123</span>,])</span><br><span class="line">li.append([<span class="number">123</span>,<span class="number">123</span>])</span><br><span class="line"><span class="built_in">print</span>(li) <span class="comment">#[&#x27;jk&#x27;, &#x27;周杰伦&#x27;, 100, &#x27;张三&#x27;, [123, 123]]</span></span><br><span class="line"></span><br><span class="line">li.extend((<span class="number">123</span>,<span class="number">123</span>,))</span><br><span class="line">li.extend((<span class="number">123</span>,<span class="number">123</span>))</span><br><span class="line"><span class="built_in">print</span>(li) <span class="comment">#[&#x27;jk&#x27;, &#x27;周杰伦&#x27;, 100, &#x27;张三&#x27;, 123, 123]</span></span><br><span class="line">li.append((<span class="number">123</span>,<span class="number">123</span>,))</span><br><span class="line">li.append((<span class="number">123</span>,<span class="number">123</span>))</span><br><span class="line"><span class="built_in">print</span>(li) <span class="comment">#[&#x27;jk&#x27;, &#x27;周杰伦&#x27;, 100, &#x27;张三&#x27;, (123, 123)]</span></span><br><span class="line">          <span class="comment">#[&#x27;jk&#x27;, &#x27;周杰伦&#x27;, 100, &#x27;张三&#x27;, (123, 123)]</span></span><br><span class="line">    </span><br><span class="line">li.extend(<span class="number">123</span>)</span><br><span class="line"><span class="built_in">print</span>(li)<span class="comment">#TypeError: &#x27;int&#x27; object is not iterable可迭代的</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">添加的值必须是序列类型   所以int不能加入  因为int不是序列类型</span></span><br><span class="line"><span class="string">如果添加的列表[]  ，元组（&quot;Hello world&quot;，）    不会被打散</span></span><br><span class="line"><span class="string">append添加带[]or(),ectend不带</span></span><br><span class="line"><span class="string">无论append还是extend,(123,123,)与(123,123)输出结果一样</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line"><span class="comment"># 1. pop 删除一个值， 也可以指定位置  默认就是删最后一位</span></span><br><span class="line"><span class="comment"># 变量.pop()</span></span><br><span class="line"><span class="comment"># 变量.pop(下标)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(li)   <span class="comment">#[&#x27;jk&#x27;, &#x27;周杰伦&#x27;, 100, &#x27;张三&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(li.pop())  <span class="comment">#张三   pop方法返回删除值</span></span><br><span class="line"><span class="built_in">print</span>(li)  <span class="comment">#[&#x27;jk&#x27;, &#x27;周杰伦&#x27;, 100]</span></span><br><span class="line"></span><br><span class="line">li.pop(<span class="number">1</span>)  </span><br><span class="line"><span class="built_in">print</span>(li)   <span class="comment"># [&#x27;jk&#x27;, 100, &#x27;张三&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> pop方法返回删除值</span></span><br><span class="line"><span class="string"> 下标越界会报错</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. remove 删除一个值， 有多个值， 根据下标 数据删除</span></span><br><span class="line"><span class="comment"># 变量.remove(数据)</span></span><br><span class="line">li1 = [<span class="string">&quot;杰伦&quot;</span>, <span class="string">&quot;jk&quot;</span>,<span class="string">&quot;阿飞&quot;</span>,<span class="string">&quot;jk&quot;</span>]</span><br><span class="line"><span class="comment"># li1.remove(&quot;jk&quot;) # [&#x27;杰伦&#x27;, &#x27;阿飞&#x27;, &#x27;jk&#x27;]</span></span><br><span class="line"><span class="comment"># print(li1)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">若有多个相同值，根据下标小的删除</span></span><br><span class="line"><span class="string">若remove一个没有的值会报错#ValueError: list.remove(x): x not in list</span></span><br><span class="line"><span class="string">若remove的里面啥都不给也会报错#ypeError: remove() takes exactly one argument (0 given)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear 直接清空 列表，</span></span><br><span class="line"><span class="comment"># 变量.clear()</span></span><br><span class="line"><span class="comment"># li1.clear()</span></span><br><span class="line"><span class="comment"># print(li1)  # []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># del 删除 直接干掉</span></span><br><span class="line"><span class="comment"># del 变量名</span></span><br><span class="line"><span class="comment"># del 列表名</span></span><br><span class="line"><span class="comment"># del 列表[下标]</span></span><br><span class="line"><span class="keyword">del</span> li1  <span class="comment">#NameError: name &#x27;li1&#x27; is not defined</span></span><br><span class="line"><span class="keyword">del</span> li1[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">del</span> li1[:<span class="number">1</span>]</span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line"><span class="keyword">del</span> li1[<span class="number">2</span>] <span class="comment"># [&#x27;杰伦&#x27;, &#x27;jk&#x27;, &#x27;jk&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(li1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下标修改</span></span><br><span class="line"><span class="comment"># 列表[下标] = 数据</span></span><br><span class="line">li1 = [<span class="string">&quot;杰伦&quot;</span>, <span class="string">&quot;jk&quot;</span>,<span class="string">&quot;阿飞&quot;</span>,<span class="string">&quot;jk&quot;</span>]</span><br><span class="line"> <span class="comment">#通过下标修改</span></span><br><span class="line">li1[<span class="number">1</span>] = <span class="number">1</span>    <span class="comment"># [&#x27;杰伦&#x27;, 1, &#x27;阿飞&#x27;, &#x27;jk&#x27;]</span></span><br><span class="line">li1[<span class="number">1</span>]=<span class="string">&quot;1&quot;</span>    <span class="comment">#[&#x27;杰伦&#x27;, &#x27;1&#x27;, &#x27;阿飞&#x27;, &#x27;jk&#x27;]</span></span><br><span class="line">li1[<span class="number">1</span>]=(<span class="number">1</span>)    <span class="comment">#[&#x27;杰伦&#x27;, 1, &#x27;阿飞&#x27;, &#x27;jk&#x27;]</span></span><br><span class="line">li1[<span class="number">1</span>]=[<span class="number">1</span>]    <span class="comment">#[&#x27;杰伦&#x27;, [1], &#x27;阿飞&#x27;, &#x27;jk&#x27;]   </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片修改</span></span><br><span class="line"><span class="comment"># 列表[起始:结束] = 数据，数据，数据</span></span><br><span class="line">li1[<span class="number">1</span>:-<span class="number">1</span>]=<span class="string">&quot;A&quot;</span>,<span class="number">1314</span>,<span class="number">520</span></span><br><span class="line"><span class="comment"># [&#x27;杰伦&#x27;, &#x27;A&#x27;, 1314, 520, &#x27;jk&#x27;]</span></span><br><span class="line"></span><br><span class="line">li1[<span class="number">1</span>:<span class="number">3</span>]=<span class="string">&quot;A,B,C&quot;</span>      <span class="comment"># [&#x27;杰伦&#x27;, &#x27;A&#x27;, &#x27;,&#x27;, &#x27;B&#x27;, &#x27;,&#x27;, &#x27;C&#x27;, &#x27;jk&#x27;]</span></span><br><span class="line">li1[<span class="number">1</span>:<span class="number">3</span>]=<span class="string">&quot;ABC&quot;</span>        <span class="comment"># [&#x27;杰伦&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;jk&#x27;]     打散了</span></span><br><span class="line">li1[<span class="number">1</span>:<span class="number">3</span>]=<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>  <span class="comment"># [&#x27;杰伦&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;jk&#x27;]</span></span><br><span class="line">li1[<span class="number">1</span>:<span class="number">3</span>]=(<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>)<span class="comment"># [&#x27;杰伦&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;jk&#x27;]</span></span><br><span class="line">li1[<span class="number">1</span>:<span class="number">3</span>]=(<span class="string">&quot;A,B,C&quot;</span>)    <span class="comment"># [&#x27;杰伦&#x27;, &#x27;A&#x27;, &#x27;,&#x27;, &#x27;B&#x27;, &#x27;,&#x27;, &#x27;C&#x27;, &#x27;jk&#x27;]</span></span><br><span class="line"></span><br><span class="line">li1[<span class="number">1</span>:<span class="number">3</span>]=[<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>]<span class="comment"># [&#x27;杰伦&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;jk&#x27;]</span></span><br><span class="line"></span><br><span class="line">li1[<span class="number">1</span>:<span class="number">3</span>]=[<span class="string">&quot;A,B,C&quot;</span>]    <span class="comment"># [&#x27;杰伦&#x27;, &#x27;A,B,C&#x27;, &#x27;jk&#x27;]   </span></span><br><span class="line">li1[<span class="number">1</span>:<span class="number">3</span>]=[<span class="string">&quot;ABC&quot;</span>]      <span class="comment"># [&#x27;杰伦&#x27;, &#x27;ABC&#x27;, &#x27;jk&#x27;]</span></span><br><span class="line">li1[<span class="number">1</span>:<span class="number">3</span>]=(A,B,C)      <span class="comment"># NameError: name &#x27;A&#x27; is not defined</span></span><br><span class="line">li1[<span class="number">1</span>:<span class="number">3</span>]=[A,B,C]      <span class="comment"># NameError: name &#x27;A&#x27; is not defined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li1[<span class="number">1</span>:<span class="number">3</span>]=[<span class="number">123</span>]<span class="comment">#[&#x27;杰伦&#x27;, 123, &#x27;jk&#x27;]</span></span><br><span class="line">li1[<span class="number">1</span>:<span class="number">3</span>]=<span class="number">123</span><span class="comment">#报错</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">修改时加不加[]输出一样，只要数据是序列，int类型li1[1:3]=123这样不行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.index  根据内容返回下标， 找到返回下标</span></span><br><span class="line"><span class="comment"># 列表.index(内容)</span></span><br><span class="line">li2 = [<span class="string">&quot;sdfs&quot;</span>,<span class="string">&quot;jk&quot;</span>, <span class="string">&quot;韦寻&quot;</span>]</span><br><span class="line">str1 = <span class="string">&quot;adsb&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1.index(<span class="string">&quot;ad&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(li2.index(<span class="string">&quot;阿飞&quot;</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">如果不存在的内容报错</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line"><span class="comment"># sort 排序， 默认从小到大， reverse=True 才是 从大到小</span></span><br><span class="line"><span class="comment"># 列表.sort()</span></span><br><span class="line"></span><br><span class="line">li3 = [<span class="number">123</span>,<span class="number">12312</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">312</span>,<span class="number">2</span>,<span class="number">312</span>,<span class="number">3</span>]</span><br><span class="line">li3.sort()  <span class="comment"># [2, 3, 3, 3, 12, 12, 123, 312, 312, 12312]</span></span><br><span class="line">li3.sort(reverse=<span class="literal">True</span>)  <span class="comment"># [12312, 312, 312, 123, 12, 12, 3, 3, 3, 2]</span></span><br><span class="line"><span class="built_in">print</span>(li3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="元组方法"><a href="#元组方法" class="headerlink" title="元组方法"></a>元组方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = (<span class="number">1</span>,<span class="number">212</span>,<span class="number">312</span>,<span class="number">1</span>,<span class="number">312</span>,<span class="number">31232112</span>,<span class="number">121</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># index 根据内容返回下标  否则不存在则程序报错</span></span><br><span class="line">变量.index()</span><br><span class="line"><span class="built_in">print</span>(num.index(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># count 统计数据出现的次数</span></span><br><span class="line">变量.count()</span><br><span class="line"><span class="built_in">print</span>(num.count(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># + 拼接字符串   -不允许</span></span><br><span class="line">str1 = <span class="string">&quot;hello&quot;</span> + <span class="string">&quot; world&quot;</span></span><br><span class="line">str1 += <span class="string">&quot;韦寻&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1) <span class="comment">#hello world韦寻</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># join 拼接字符串的 根据指定 字符连接</span></span><br><span class="line"><span class="comment"># seq 序列类型 元组 列表 字符串</span></span><br><span class="line"><span class="comment"># 变量名.join(seq)</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;-&quot;</span></span><br><span class="line">li = (<span class="string">&quot;1&quot;</span>,<span class="string">&quot;223&quot;</span>,<span class="string">&quot;12&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag.join(li))  <span class="comment">#1-223-12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(flag.join(li)))<span class="comment">#&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line"><span class="comment"># replace 替换</span></span><br><span class="line"><span class="comment"># 变量.replace(&quot;要替换的值&quot;, &quot;&quot;)  #什么都不写则替换为空</span></span><br><span class="line"><span class="comment"># 变量.replace(&quot;要替换的值&quot;, &quot;新的值&quot;)</span></span><br><span class="line"><span class="comment"># 变量.replace(&quot;要替换的值&quot;, &quot;新的值&quot;, 修改的次数)</span></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;何年今夕是何年&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1.replace(<span class="string">&quot;何年&quot;</span>,<span class="string">&quot;&quot;</span>)) <span class="comment">#空的字符串</span></span><br><span class="line"><span class="built_in">print</span>(str1.replace(<span class="string">&quot;何年&quot;</span>,<span class="string">&quot; &quot;</span>))<span class="comment">#空格字符串</span></span><br><span class="line"><span class="built_in">print</span>(str1.replace(<span class="string">&quot;何年&quot;</span>,<span class="string">&quot;2022年&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(str1.replace(<span class="string">&quot;何年&quot;</span>,<span class="string">&quot;2022年&quot;</span>,<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(str1.replace(<span class="string">&quot;何年&quot;</span>,<span class="string">&quot;2022年&quot;</span>,-<span class="number">1</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">今夕是</span></span><br><span class="line"><span class="string"> 今夕是 </span></span><br><span class="line"><span class="string">2022年今夕是2022年</span></span><br><span class="line"><span class="string">2022年今夕是何年</span></span><br><span class="line"><span class="string">2022年今夕是2022年</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">desc = <span class="string">&quot; jace is boy 帅哥 &quot;</span></span><br><span class="line"><span class="comment"># upper  字符串字母 变成 大写</span></span><br><span class="line"><span class="comment"># 变量.upper()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(desc.upper()) <span class="comment"># JACE IS BOY 帅哥</span></span><br><span class="line"><span class="built_in">print</span>(desc) <span class="comment">#  jace is boy 帅哥 </span></span><br><span class="line">desc=desc.upper()</span><br><span class="line"><span class="built_in">print</span>(desc) <span class="comment"># JACE IS BOY 帅哥</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lower  字符串字母 变成 小写</span></span><br><span class="line"><span class="comment"># 变量.lower()</span></span><br><span class="line">desc=<span class="string">&quot;JACE IS BOY 帅哥&quot;</span></span><br><span class="line"><span class="built_in">print</span>(desc.lower()) <span class="comment"># jace is boy 帅哥</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># titile 单词首字母大写,    可判断空格</span></span><br><span class="line"><span class="comment"># 变量.title()</span></span><br><span class="line">desc = <span class="string">&quot; jace is boy 帅哥 &quot;</span></span><br><span class="line"><span class="built_in">print</span>(desc.title()) <span class="comment"># Jace Is Boy 帅哥</span></span><br><span class="line">desc=<span class="string">&quot;JACE IS BOY 帅哥&quot;</span></span><br><span class="line"><span class="built_in">print</span>(desc.title()) <span class="comment"># Jace Is Boy 帅哥</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># strip 去除字符串左右两边的空格   换行符号\n 也ok</span></span><br><span class="line"><span class="comment"># 变量.strip()</span></span><br><span class="line">desc = <span class="string">&quot; jace is boy 帅哥\n&quot;</span></span><br><span class="line"><span class="built_in">print</span>(desc.strip())  <span class="comment">#jace is boy 帅哥</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># split 切分， 根据指定的内容 切分字符串</span></span><br><span class="line"><span class="comment"># 变量.spilt(&quot;分割对象&quot;)</span></span><br><span class="line">desc = <span class="string">&quot; jace is boy 帅哥&quot;</span></span><br><span class="line"><span class="built_in">print</span>(desc.split(<span class="string">&quot;is&quot;</span>)) <span class="comment"># [&#x27; jace &#x27;, &#x27; boy 帅哥 &#x27;]</span></span><br><span class="line"><span class="comment">#如果分割对象不存在  相当于list类型转化  但实际转化会被分散</span></span><br><span class="line">desc = <span class="string">&quot; jace is boy 帅哥&quot;</span></span><br><span class="line"><span class="built_in">print</span>(desc.split(<span class="string">&quot;isqq&quot;</span>))<span class="comment">#[&#x27; jace is boy 帅哥&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(desc)) </span><br><span class="line"><span class="comment">#[&#x27; &#x27;, &#x27;j&#x27;, &#x27;a&#x27;, &#x27;c&#x27;, &#x27;e&#x27;, &#x27; &#x27;, &#x27;i&#x27;, &#x27;s&#x27;, &#x27; &#x27;, &#x27;b&#x27;, &#x27;o&#x27;, &#x27;y&#x27;, &#x27; &#x27;, &#x27;帅&#x27;, &#x27;哥&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">kd = <span class="string">&quot;pdd,Jay,韦寻&quot;</span></span><br><span class="line"><span class="comment"># find 通过内容 找到 返回它的下标（一般返回第一个字母的下标后不在进行后面的查找）       找不到 返回-1</span></span><br><span class="line"><span class="comment"># 变量.find(&quot;内容&quot;)</span></span><br><span class="line"><span class="comment"># 变量.find(&quot;内容&quot;,起点)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(kd.find(<span class="string">&quot;成龙&quot;</span>)) <span class="comment"># -1</span></span><br><span class="line"><span class="built_in">print</span>(kd.find(<span class="string">&quot;pdd&quot;</span>))  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(kd.find(<span class="string">&quot;pdd&quot;</span>,<span class="number">3</span>)) <span class="comment"># -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># count 统计数据出现的次数</span></span><br><span class="line"><span class="comment"># 变量.count(&quot;数据&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(kd.count(<span class="string">&quot;p&quot;</span>)) <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isdigit 判断该字符串是否是纯数字  返回bool值 True False</span></span><br><span class="line"><span class="comment"># 变量.isdigit()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(kd.isdigit()) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># isalpha 判断该字符串是否是纯字母  返回bool值 True False</span></span><br><span class="line"><span class="comment"># 变量.isalpha()</span></span><br><span class="line"><span class="built_in">print</span>(kd.isalpha())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># endswith 判断字符串的尾巴后缀.是否于指定的数据相等   返回bool值 True False</span></span><br><span class="line"><span class="comment"># 变量.endswith()</span></span><br><span class="line"><span class="comment"># 用作判断文件类型，通过后缀  .jgp .png  .mp3 .mp4 .pdf</span></span><br><span class="line"><span class="built_in">print</span>(kd.endswith(<span class="string">&quot;.jpg&quot;</span>)) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># len函数   获取序列类型的长度，也可以知道 数据有几个</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">111</span>,<span class="number">4</span>]))  <span class="comment">#  5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(kd))              <span class="comment"># 10</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># https://www.runoob.com/python3/python3-string.html  想了解更多的内容，</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<blockquote>
<p>split （经常会用到, 并且返回的是列表）</p>
<p>replace （）</p>
<p>这里只是一部分方法，大家也可以课后看看其他的方法<a href="https://www.runoob.com/python3/python3-string.html">https://www.runoob.com/python3/python3-string.html</a></p>
<p>提前复习的网站<a href="http://c.biancheng.net/python/">http://c.biancheng.net/python/</a></p>
</blockquote>
<h2 id="可变类型与不可变类型"><a href="#可变类型与不可变类型" class="headerlink" title="可变类型与不可变类型"></a>可变类型与不可变类型</h2><ul>
<li>字符串，数字，元组都是不可变的，里面的数据是不能改变的，除非你重新赋值</li>
<li>字符串 》》》 样品， 产品图，概念图</li>
<li>经过 方法 》》 商品，成品</li>
</ul>
<h2 id="作业-2"><a href="#作业-2" class="headerlink" title="作业"></a>作业</h2><ul>
<li><p>&#96;&#96;&#96;python<br>1.用什么方法可以知道字符串的长度</p>
<ol start="2">
<li>将输入的字符串反转过来<br>示例 1:<br>输入: “hello”<br>输出: “olleh”</li>
</ol>
<p>3.将字符串 “abcd” 转成大写<br>4.计算字符串 “cd” 在 字符串 “abcd”中出现的位置<br>5.s1 &#x3D; “Python is good”, 请将字符串里的Python替换成 python,并输出替换后的结果<br>6.有一个字符串 s2 &#x3D;  “python修炼第一期.html”，请写程序从这个字符串里获得.html前面的部分，要用尽可能多的方式来做这个事情</p>
<ol start="7">
<li>“this is a book\n”， 字符串的末尾有一个回车符，请将其删除</li>
<li>“this is a book”,请将字符串里的book替换成apple</li>
<li>“this is a book”, 请用程序判断该字符串是否以this开头</li>
<li>“this is a book”, 请用程序判断该字符串是否以apple结尾</li>
<li>“This IS a book”， 请将字符串里的字符转成小写字符</li>
</ol>
<p>列表<br>  num_li &#x3D; [1,2,3,4,5]</p>
<p>  1.求列表的长度<br>  2.判断6 是否在列表中<br>  3.numli + [6, 7, 8] 的结果是什么？<br>  4.numli*2 的结果是什么<br>  5.列表里元素的最大值是多少<br>  6.列表里元素的最小值是多少<br>  7.列表里所有元素的和是多少<br>  8.在索引1的位置新增一个的元素10<br>  9.在列表的末尾新增一个元素20</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## 答案</span><br><span class="line"></span><br><span class="line">~~~py</span><br><span class="line"># 1.用什么方法可以知道字符串的长度</span><br><span class="line">stu =&quot;kkkiidnxjcgc&quot;</span><br><span class="line">print(len(stu))</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">2. 将输入的字符串反转过来</span><br><span class="line">示例 1:</span><br><span class="line">输入: &quot;hello&quot;</span><br><span class="line">输出: &quot;olleh&quot;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">#str1 = input(&quot;请输入hello&quot;)</span><br><span class="line">a = &quot;hello&quot;</span><br><span class="line">#print(str1[::-1])</span><br><span class="line">print(a[::-1])</span><br><span class="line"># 3.将字符串 &quot;abcd&quot; 转成大写</span><br><span class="line">b = &quot;abcd&quot;</span><br><span class="line">print(b.upper())</span><br><span class="line"></span><br><span class="line"># 4.计算字符串 &quot;cd&quot; 在 字符串 &quot;abcd&quot;中出现的位置</span><br><span class="line">print(b.find(&quot;cd&quot;))</span><br><span class="line">print(b.index(&quot;cd&quot;))</span><br><span class="line"></span><br><span class="line"># 5.s1 = &quot;Python is good&quot;, 请将字符串里的Python替换成 python,并输出替换后的结果</span><br><span class="line">s1 = &quot;Python is good&quot;</span><br><span class="line">print(s1.lower())</span><br><span class="line">print(s1.replace(&quot;Python&quot;,&quot;python&quot;))</span><br><span class="line"></span><br><span class="line"># 6.有一个字符串 s2 =  &quot;python修炼第一期.html&quot;，请写程序从这个字符串里获得.html前面的部分，要用尽可能多的方式来做这个事情</span><br><span class="line">s2 = &quot;python修炼第一期.html&quot;</span><br><span class="line">print(s2[:11])</span><br><span class="line">print(s2[:-5])</span><br><span class="line">print(s2.replace(&quot;.html&quot;,&quot;&quot;))</span><br><span class="line">print(s2.split(&quot;.&quot;)[0])</span><br><span class="line">print(s2.strip(&quot;.html&quot;))</span><br><span class="line"></span><br><span class="line"># 7. &quot;this is a book\n&quot;， 字符串的末尾有一个回车符，请将其删除</span><br><span class="line">s3 =&quot;this is a book\n&quot;</span><br><span class="line">print(s3.strip())</span><br><span class="line"># 8. &quot;this is a book&quot;,请将字符串里的book替换成apple</span><br><span class="line">s4 = &quot;this is a book&quot;</span><br><span class="line">print(s4.replace(&quot;book&quot;,&quot;apple&quot;))</span><br><span class="line"></span><br><span class="line"># 9. &quot;this is a book&quot;, 请用程序判断该字符串是否以this开头</span><br><span class="line"># print(s4.find(&quot;this&quot;))</span><br><span class="line">print(s4.startswith(&quot;this&quot;))</span><br><span class="line"></span><br><span class="line"># 10. &quot;this is a book&quot;, 请用程序判断该字符串是否以apple结尾</span><br><span class="line">print(s4.endswith(&quot;apple&quot;))</span><br><span class="line"># 11. &quot;This IS a book&quot;， 请将字符串里的字符转成小写字符</span><br><span class="line">s5 = &quot;This IS a book&quot;</span><br><span class="line">print(s5.lower())</span><br><span class="line"></span><br><span class="line">print(&quot;------------------------&quot;)</span><br><span class="line"></span><br><span class="line">num_li = [1,2,3,4,5]</span><br><span class="line"></span><br><span class="line">#  1.求列表的长度</span><br><span class="line">print(len(num_li))  #5</span><br><span class="line"></span><br><span class="line">#  2.判断6 是否在列表中</span><br><span class="line">#print(num_li.index(&quot;6&quot;))  # 没有会报错</span><br><span class="line">print(&quot;6&quot; in num_li)     # False</span><br><span class="line">print(num_li.count(&quot;6&quot;)) # 0</span><br><span class="line"></span><br><span class="line">#  3.num_li + [6, 7, 8] 的结果是什么？</span><br><span class="line">num_li = [1,2,3,4,5]</span><br><span class="line">#print(num_li + [6, 7, 8]) #[1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">print(&quot;---&quot;)</span><br><span class="line">#num_li.extend([6,7,8]) #[1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">#print(num_li)</span><br><span class="line">#num_li.append([6,7,8]) #[1, 2, 3, 4, 5, [6, 7, 8]]</span><br><span class="line">#print(num_li)</span><br><span class="line">#num_li.insert(11,[6,7,8]) #[1, 2, 3, 4, 5, [6, 7, 8]]</span><br><span class="line">#print(num_li)</span><br><span class="line">#  4.num_li*2 的结果是什么</span><br><span class="line">print(num_li*2)  #[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]</span><br><span class="line">#  5.列表里元素的最大值是多少</span><br><span class="line">print(num_li.sort(reverse=True))  #None  因为它是一个没有返回值的方法</span><br><span class="line">print(num_li[0])     #5</span><br><span class="line">print(max(num_li))   #5     # 内置函数  也就是Python自带的</span><br><span class="line">#  6.列表里元素的最小值是多少</span><br><span class="line">print(num_li.sort()) #None</span><br><span class="line">print(num_li[0])     #1</span><br><span class="line">print(min(num_li))   #1</span><br><span class="line">#  7.列表里所有元素的和是多少</span><br><span class="line">print(sum(num_li))  #15</span><br><span class="line">#  8.在索引1的位置新增一个的元素10</span><br><span class="line">print(&quot;=========&quot;)</span><br><span class="line">num_li.insert(1,10)    #[1, 10, 2, 3, 4, 5]</span><br><span class="line">print(num_li)</span><br><span class="line">#  9.在列表的末尾新增一个元素20</span><br><span class="line">print(num_li.append(&quot;20&quot;)) #None</span><br><span class="line">print(num_li)  # [1, 10, 2, 3, 4, 5, &#x27;20&#x27;]</span><br><span class="line">~~~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 使用typora 做笔记的语法</span><br><span class="line"></span><br><span class="line">markdown 语法</span><br><span class="line"></span><br><span class="line">[教程](https://www.jianshu.com/p/399e5a3c7cc5)</span><br><span class="line"></span><br><span class="line">## 爬虫小案例</span><br><span class="line"></span><br><span class="line">安装模块</span><br><span class="line"></span><br><span class="line">```python </span><br><span class="line">pip install html5lib -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install requests -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install lxml -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="九-格式化输出-amp-字符编码"><a href="#九-格式化输出-amp-字符编码" class="headerlink" title="九.格式化输出&amp;字符编码"></a>九.格式化输出&amp;字符编码</h1><h2 id="上节回顾-1"><a href="#上节回顾-1" class="headerlink" title="上节回顾"></a>上节回顾</h2><p>序列类型的方法</p>
<ul>
<li>列表</li>
<li>元组</li>
<li>字符串</li>
<li>作业讲解</li>
<li>max()   求最大值</li>
<li>min()   求最小值</li>
<li>sum()   求和</li>
</ul>
<h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><p>从字面意思看，就是按照一定的格式的输出</p>
<p>生活中的，信件的格式，作文的格式，短信的格式等等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">【某团】短信验证码：xxxx </span><br></pre></td></tr></table></figure>

<h3 id="操作符-（占位符）"><a href="#操作符-（占位符）" class="headerlink" title="%操作符  （占位符）"></a>%操作符  （占位符）</h3><p> 在程序中，看到了%这样的操作符，这就是Python中格式化输出。</p>
<p>注意：int类型可以作为str型，但str不能作为int型。</p>
<table>
<thead>
<tr>
<th>格式符号</th>
<th>转换</th>
</tr>
</thead>
<tbody><tr>
<td>%f</td>
<td>浮点数  小数</td>
</tr>
<tr>
<td>%s</td>
<td>字符串</td>
</tr>
<tr>
<td><strong>%d</strong></td>
<td><strong>有符号十进制整数</strong></td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;xxx%dxxx&quot;</span> % 数据)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;xxx%sxxxx%d&quot;</span> % (数据<span class="number">1</span>，数据<span class="number">2</span>))</span><br><span class="line">	</span><br><span class="line">    </span><br><span class="line">案例：</span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">name = <span class="string">&quot;xiaohua&quot;</span></span><br><span class="line">money = <span class="number">100.5687</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的姓名是&quot;</span>,name,<span class="string">&quot;年龄是&quot;</span>,age,<span class="string">&quot;存款是：&quot;</span>,money)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的姓名是%s, 年龄是%d 存款：%f&quot;</span> % (name, age, money))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的姓名是%s, 年龄是%d 存款：%f&quot;</span> % (age, age, money))</span><br><span class="line"><span class="comment">#print(&quot;我的姓名是%s, 年龄是%d 存款：%f&quot; % (name, name, money))  </span></span><br><span class="line"><span class="comment">#TypeError: %d format: a number is required, not str</span></span><br><span class="line"><span class="comment">## 保留两位小数 %.2f</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我的姓名是%s, 年龄是%d 存款：%0.2f&quot;</span> % (name, age, money))  <span class="comment">#%0.xf或者%.xf就是保存几位，四舍五入  如果是1或者2或者其他整数都一个结果，有没有无所谓</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;今天天气%s, 气温：%d度&quot;</span> %(<span class="string">&quot;热&quot;</span>, <span class="number">28</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我的姓名是 xiaohua 年龄是 18 存款是： 100.5687</span></span><br><span class="line"><span class="string">我的姓名是xiaohua, 年龄是18 存款：100.568700</span></span><br><span class="line"><span class="string">我的姓名是18, 年龄是18 存款：100.568700</span></span><br><span class="line"><span class="string">我的姓名是xiaohua, 年龄是18 存款：100.57</span></span><br><span class="line"><span class="string">今天天气热, 气温：28度</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">总结:</span><br><span class="line">    前面有几个，后面就要有几个 并且要匹配（一一对应）</span><br><span class="line">    保留x位小数 就写%.xf</span><br></pre></td></tr></table></figure>

<h3 id="format用法"><a href="#format用法" class="headerlink" title="format用法"></a>format用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">语法:</span><br><span class="line">    <span class="string">&#x27;XX&#123;&#125;XX&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(数据<span class="number">1</span>,数据<span class="number">2</span>) 			<span class="comment"># 传入的数据类型是不限的,</span></span><br><span class="line">    <span class="string">&#x27;XX&#123;下标&#125;XX&#123;下标&#125;&#x27;</span>.<span class="built_in">format</span>(数据<span class="number">1</span>,数据<span class="number">2</span>) </span><br><span class="line">案例:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;大家好,我叫&#123;&#125;,我今年&#123;&#125;岁了.&#x27;</span>.<span class="built_in">format</span>(name,age))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;大家好,我叫&#123;1&#125;,我今年&#123;0&#125;岁了.&#x27;</span>.<span class="built_in">format</span>(age,name))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你好,我是&#123;&#125;,今天是&#123;&#125;号，身高&#123;&#125;米&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="number">14</span>,<span class="number">1.78</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你好,我是&#123;2&#125;,今天是&#123;0&#125;号，身高&#123;&#125;米&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="number">14</span>,<span class="number">2.20</span>))</span><br></pre></td></tr></table></figure>

<p>小结：</p>
<blockquote>
<p>format 的占位问题  可以通过下标进行占位  并且数量可以不一致， 也就是不用一一对应</p>
<p>但写下标就得全写,不可以有的写有的没写</p>
</blockquote>
<h3 id="f-str-用法"><a href="#f-str-用法" class="headerlink" title="f-str 用法"></a>f-str 用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">最简单粗暴的格式化输出方式</span><br><span class="line">语法: 在字符串前面加f/F,把要输出的变量用&#123;&#125;包裹起来</span><br><span class="line"></span><br><span class="line">	<span class="string">f&#x27;XXX<span class="subst">&#123;变量&#125;</span>XXX<span class="subst">&#123;&#125;</span>&#x27;</span></span><br><span class="line">    <span class="string">F&#x27;XXX<span class="subst">&#123;变量&#125;</span>XXX<span class="subst">&#123;&#125;</span>&#x27;</span></span><br><span class="line">案例：</span><br><span class="line"></span><br><span class="line">	name = <span class="string">&quot;阿飞&quot;</span></span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line">    height = <span class="number">1.78</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;大家好,我叫<span class="subst">&#123;name&#125;</span>,今天<span class="subst">&#123;num&#125;</span>号&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;大家好,我叫<span class="subst">&#123;name&#125;</span>,今天<span class="subst">&#123;num + <span class="number">1</span>&#125;</span>号&#x27;</span>)  <span class="comment">#python创始人 gui叔</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;大家好,我叫<span class="subst">&#123;name&#125;</span>,今天<span class="subst">&#123;<span class="built_in">float</span>(num)&#125;</span>号&#x27;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&#x27;大家好,我叫<span class="subst">&#123;name&#125;</span>,今天<span class="subst">&#123;name.count(<span class="string">&quot;12&quot;</span>)&#125;</span>号&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;大家好,我叫<span class="subst">&#123;name&#125;</span>,今天<span class="subst">&#123;num +<span class="number">1</span>&#125;</span>号 身高<span class="subst">&#123;height:<span class="number">.4</span>f&#125;</span>&#x27;</span>)</span><br><span class="line">	</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">	大家好,我叫阿飞,今天10号</span></span><br><span class="line"><span class="string">	大家好,我叫阿飞,今天11号</span></span><br><span class="line"><span class="string">	大家好,我叫阿飞,今天10.0号</span></span><br><span class="line"><span class="string">	大家好,我叫阿飞,今天0号</span></span><br><span class="line"><span class="string">	大家好,我叫阿飞,今天11号 身高1.7800</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">小结：</span><br><span class="line">    大括号里面的变量,是可以进行操作的 包括数值运算, 方法等</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>计算机在处理字符的时候，他需要用一本字典<strong>进行翻译也就是字符集、字符编码</strong>,<strong>字典中的字符没有你要显示的字，那输出的就是乱码</strong></p>
<p>那第一套编码<strong>Ascll</strong>，美国弄出来的，里面没有汉字，那我们想输出的汉字，怎么办， </p>
<p>把汉字编进去，我们自己的编码<strong>gb2312</strong>  台湾繁体字 <strong>big5</strong></p>
<p>目前<strong>最流行的字符编码  utf-8</strong>  对很多国家的语言文字，收集在一起，所以对其他语言文字，支持比较好，这就是大家都爱用的原因</p>
<p><a href="http://c.biancheng.net/c/ascii/">ascll对照表 </a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ascll对照表 http://c.biancheng.net/c/ascii/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编码问题</span></span><br><span class="line">a = <span class="string">&#x27;朋友们，晚上好&#x27;</span></span><br><span class="line">b = a.encode() <span class="comment"># 编码 把a的数据转为一个处理后的二进制字符串</span></span><br><span class="line"><span class="comment">#print(b)#bin二进制</span></span><br><span class="line"><span class="comment">#b&#x27;\xe6\x9c\x8b\xe5\x8f\x8b\xe4\xbb\xac\xef\xbc\x8c\xe6\x99\x9a\xe4\xb8\x8a\xe5\xa5\xbd&#x27;</span></span><br><span class="line"></span><br><span class="line">c = a.encode(encoding = <span class="string">&#x27;GBK&#x27;</span>) <span class="comment"># 把a以gbk的方式来转码  电脑默认是gbk方式解码</span></span><br><span class="line"><span class="comment">#print(c)</span></span><br><span class="line"><span class="comment">#b&#x27;\xc5\xf3\xd3\xd1\xc3\xc7\xa3\xac\xcd\xed\xc9\xcf\xba\xc3&#x27;</span></span><br><span class="line"></span><br><span class="line">d = b.decode()  <span class="comment"># 解码</span></span><br><span class="line"><span class="built_in">print</span>(d)  <span class="comment">#朋友们，晚上好</span></span><br><span class="line">f = c.decode(encoding = <span class="string">&#x27;GBK&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f)   <span class="comment">#朋友们，晚上好</span></span><br><span class="line"><span class="comment">#ord(字符) --&gt; 通过字符,找到序号ascll</span></span><br><span class="line"><span class="comment">#chr(序号) --&gt; 通过序号,找到字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>))  <span class="comment">#97</span></span><br><span class="line">pr</span><br></pre></td></tr></table></figure>

<h2 id="编程语言之进阶"><a href="#编程语言之进阶" class="headerlink" title="编程语言之进阶"></a>编程语言之进阶</h2><p>编程语言我们可以从不同维度进行分类，高低的维度，翻译的维度</p>
<p><strong>高低的维度：</strong></p>
<p>高级语言：站在人的角度，用人类的字符去编写程序，人类可以理解，而计算机需要通过翻译才能理解</p>
<blockquote>
<p>高级：高层，开发者不需要考虑硬件的细节，开发效率可以大大提高，所以说编程语言是高级语言</p>
</blockquote>
<p>低级语言：从计算机角度，说计算机能理解的语言</p>
<blockquote>
<p>低级：比较贴近底层，硬件，内存等这些东西，需要了解计算的硬件细节，直接控制硬件</p>
</blockquote>
<p>按照<strong>翻译方式</strong>的不同，来区分的，编译型，解释型</p>
<p>解释型：</p>
<blockquote>
<p>在程序运行之前，通过<strong>解释器</strong>对程序进行翻译然后再执行</p>
<p>Python   javascript</p>
</blockquote>
<p>编译型</p>
<blockquote>
<p>在程序运行之前，通过<strong>编译器</strong>将源码变成计算机能够理解的语言</p>
<p>C语言</p>
</blockquote>
<p>demo：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">有一本英文名著 ，我们现在要来读它</span><br><span class="line">	<span class="number">1.</span> 方法<span class="number">1.</span> 整本书翻译 也就是 读一本中文版名著</span><br><span class="line">    <span class="number">2.</span> 方法<span class="number">2</span>  老师，想挑战一下自己，还是读英文名著，但是老师现在手里有一本英语词典，读一句，我们翻译一句，</span><br><span class="line">    这样我们也能读懂</span><br><span class="line">    </span><br><span class="line">方式<span class="number">1</span> 对应的编译型语言  </span><br><span class="line">方式<span class="number">2</span> 对应的解释型语言</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">编译型和解释型的优缺点</span><br><span class="line">编译型</span><br><span class="line">	优点：运行速度快，代码效率高，编译后的程序不能够修改，保密性比较好</span><br><span class="line">    缺点：可移植性差，只能在兼容的系统上运行</span><br><span class="line"></span><br><span class="line">人话：整本翻译的书，读起来肯定快，又快又好，但是只能给中国人读，日本人想读只能重新翻译一本</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">解释型：</span><br><span class="line">	优点：可移植性好，只要有解释器环境就可以运行程序</span><br><span class="line">    缺点：保密性差，效率低，运行的时候需要解释器环境，占用大量的资源</span><br><span class="line">    </span><br><span class="line">人话：拿着字典一句一句的翻译，虽然读起来慢，但是只要有对应的语言字典，哪个国家的人都可以读</span><br><span class="line">	</span><br></pre></td></tr></table></figure>



<p><img src="D:/05%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E4%B8%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.assets/1654780889919.png" alt="1654780889919"></p>
<h2 id="作业-3"><a href="#作业-3" class="headerlink" title="作业"></a>作业</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 代码如下, 那么大家发现 重复输出了 “今天xx号”, 怎么简化程序</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天11号&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天12号&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天13号&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 用格式化输出自我介绍(用哪种方法都可以)效果如下：</span><br><span class="line">	----------自我介绍----------</span><br><span class="line">    &gt;&gt;&gt;&gt;&gt;姓名：阿飞&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">    &gt;&gt;&gt;&gt;&gt;年龄：<span class="number">18</span>&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">    &gt;&gt;&gt;&gt;&gt;性别：男&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">    &gt;&gt;&gt;&gt;&gt;住址：广州&gt;&gt;&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 字符编码目前流行的是——————。（填空题）</span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span> 用utf-<span class="number">8</span>编写的py程序，用gbk编码打开可以吗  （判断题）</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> </span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1.</span></span><br><span class="line"><span class="string">代码如下, 那么大家发现</span></span><br><span class="line"><span class="string">重复输出了 “今天xx号”, 怎么简化程序</span></span><br><span class="line"><span class="string">print(&quot;今天11号&quot;)</span></span><br><span class="line"><span class="string">print(&quot;今天12号&quot;)</span></span><br><span class="line"><span class="string">print(&quot;今天13号&quot;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a=<span class="number">11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;今天<span class="subst">&#123;a&#125;</span>号,今天<span class="subst">&#123;a+<span class="number">1</span>&#125;</span>号,今天<span class="subst">&#123;a+<span class="number">2</span>&#125;</span>号&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2.</span></span><br><span class="line"><span class="string">用格式化输出自我介绍(用哪种方法都可以)</span></span><br><span class="line"><span class="string">效果如下：</span></span><br><span class="line"><span class="string">----------自我介绍 - ---------</span></span><br><span class="line"><span class="string">&gt;&gt; &gt;&gt; &gt; 姓名：阿飞 &gt;&gt; &gt;&gt; &gt;</span></span><br><span class="line"><span class="string">&gt;&gt; &gt;&gt; &gt; 年龄：18 &gt;&gt; &gt;&gt; &gt;</span></span><br><span class="line"><span class="string">&gt;&gt; &gt;&gt; &gt; 性别：男 &gt;&gt; &gt;&gt; &gt;</span></span><br><span class="line"><span class="string">&gt;&gt; &gt;&gt; &gt; 住址：广州 &gt;&gt; &gt;&gt; &gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">name = <span class="string">&quot;阿飞&quot;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">sex = <span class="string">&quot;男&quot;</span></span><br><span class="line">addr = <span class="string">&quot;广州&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;---------自我介绍--------\n&gt;&gt; &gt;&gt; &gt; 姓名：<span class="subst">&#123;name&#125;</span> &gt;&gt; &gt;&gt; &gt;\n&gt;&gt; &gt;&gt; &gt; 年龄：<span class="subst">&#123;age&#125;</span> &gt;&gt; &gt;&gt; &gt;\n&gt;&gt; &gt;&gt; &gt; 性别：<span class="subst">&#123;sex&#125;</span> &gt;&gt; &gt;&gt; &gt;\n&gt;&gt; &gt;&gt; &gt; 住址：<span class="subst">&#123;addr&#125;</span> &gt;&gt; &gt;&gt; &gt; &quot;</span>)</span><br><span class="line"></span><br><span class="line">str1=<span class="string">&quot;-&quot;</span></span><br><span class="line">str2=<span class="string">&quot;&gt;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;str1*<span class="number">10</span>&#125;</span>自我介绍<span class="subst">&#123;str1*<span class="number">10</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;str2*<span class="number">8</span>&#125;</span> 姓名：<span class="subst">&#123;name&#125;</span><span class="subst">&#123;str2*<span class="number">8</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;str2*<span class="number">8</span>&#125;</span> 年龄：<span class="subst">&#123;age&#125;</span><span class="subst">&#123;str2*<span class="number">8</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;str2*<span class="number">8</span>&#125;</span> 性别：<span class="subst">&#123;sex&#125;</span><span class="subst">&#123;str2*<span class="number">8</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;str2*<span class="number">8</span>&#125;</span> 住址：<span class="subst">&#123;addr&#125;</span><span class="subst">&#123;str2*<span class="number">8</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 3.字符编码目前流行的是——————。（填空题）</span></span><br><span class="line"><span class="comment"># utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.用utf - 8编写的py程序，用gbk编码打开可以吗  （判断题）</span></span><br><span class="line"><span class="comment">#NO</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">今天11号,今天12号,今天13号</span></span><br><span class="line"><span class="string">---------自我介绍--------</span></span><br><span class="line"><span class="string">&gt;&gt; &gt;&gt; &gt; 姓名：阿飞 &gt;&gt; &gt;&gt; &gt;</span></span><br><span class="line"><span class="string">&gt;&gt; &gt;&gt; &gt; 年龄：18 &gt;&gt; &gt;&gt; &gt;</span></span><br><span class="line"><span class="string">&gt;&gt; &gt;&gt; &gt; 性别：男 &gt;&gt; &gt;&gt; &gt;</span></span><br><span class="line"><span class="string">&gt;&gt; &gt;&gt; &gt; 住址：广州 &gt;&gt; &gt;&gt; &gt; </span></span><br><span class="line"><span class="string">----------自我介绍----------</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 姓名：阿飞&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 年龄：18&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 性别：男&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 住址：广州&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="计算机的组成"><a href="#计算机的组成" class="headerlink" title="计算机的组成"></a>计算机的组成</h3><ol>
<li><p><strong>什么是计算机</strong><br>计算机俗称”电脑“，我们人类想要它像大脑一样工作，这是我们的最终目标（人工智能）    感兴趣   去看 模仿游戏  黑客帝国</p>
</li>
<li><p><strong>为什么要有电脑</strong><br>就是为了解放人类，让它替我们干活，</p>
<p>​</p>
</li>
<li><p><strong>计算机的组成</strong><br><strong>控制器 运算器 存储器 输入 输出</strong> </p>
<p>计算机的组成可以想象为我们人体的一部分，某一功能或者器官</p>
</li>
</ol>
<ul>
<li><ul>
<li><p>控制器<br>作用：是计算机的指挥系统，负责控制计算机所有其他组件如何工作的#(下命令)<br>类比：控制器 &#x3D;&#x3D;》大脑</p>
</li>
<li><p>运算器<br>作用：数学运算(加减乘除)与逻辑运算(判断)#(思考)<br>类比：控制器&#x3D;&#x3D;》大脑</p>
</li>
<li><p>控制器+运算器&#x3D;&#x3D;》CPU &#x3D;&#x3D;》人类的大脑<br>#串联：点外卖：记忆 走路：大脑控制手脚 手脚动起来：控制器  老板说够了吗？找多少钱？数学计算：运算器</p>
</li>
<li><p>存储器&#x2F;IO设备<br>作用：是计算机的记忆功能，负责数据的存取<br>分类：<br>#存取的例子：例如叫别人带东西，别人记住即为存，然后别人告诉商家的东西名即为取。<br>内存(基于电工作):存取数据都快，断电数据丢失，只能临时存取数据#（临时记忆）<br>外存(硬盘，基于磁工作):存取速度都慢，断电数据也不丢，可以永久保存数据#（跟用笔记和字条记起来一样的永久保存的记忆）<br>类比：<br>内存&#x3D;&#x3D;&#x3D;》人类的大脑的记忆功能<br>外存&#x3D;&#x3D;&#x3D;》人的笔记本<br>数据真的要用，一定是先从硬盘放到内存中来，内存交给CPU#老板发布任务 任务的内容就是数据比如，叫你扫地啊，端茶啊，这是不是数据，如果老板发的任务很多，我们会先记起来（字条，永久存储数据，例如外存，内存：记忆功能，记住发布的任务，要做什么什么，自己一个人念念念，念得过程肯定是先到大脑，然后让大脑念出来）</p>
</li>
<li><p>输入input设备：<br>如键盘，鼠标</p>
</li>
<li><p>输出output设备<br>显示器  打印机</p>
</li>
<li><p>&#96;&#96;&#96;python<br>例子：<br>cpu是人的大脑，负责控制全身和运算<br>内存是人的记忆，负责临时存储<br>硬盘是人的笔记本，负责永久存储<br>输入设备是耳朵或眼睛或嘴巴，负责接收外部的信息存入内存<br>输出设备是你的脸部(表情)或者屁股，负责经过处理后输出的结果<br>以上所有的设备都通过总线连接，总线相当于人的神经（电线&#x3D;人的神经）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 与运行程序相关的三大核心硬件#（与所有核心运算都挂上关系） 我们编写的程序一定是要运行于计算机硬件之上，而站在硬件的角度，与运行程序有关的三大核心硬件为 CPU、内存、硬盘 程序最先是存放于硬盘中的，程序的运行是先从硬盘把代码加载到内存中，然后cpu从内存中读取指令运行</span><br><span class="line"></span><br><span class="line">  - 程序比喻为   行为让小狗去捡球 捡球就是一件事情，捡球是发生在小狗身上的，</span><br><span class="line"></span><br><span class="line">### cpu 知识</span><br><span class="line"></span><br><span class="line">- pc 主流 CPU这里我们分为 英特尔 和 amd</span><br><span class="line"></span><br><span class="line">- 英特尔</span><br><span class="line"></span><br><span class="line">- &gt; 人人皆知，一直在挤牙膏，提升的不是很多，导致买新的CPU，还是去年的CPU，差距不是很大</span><br><span class="line">  &gt;</span><br><span class="line">  &gt;  i9 --&gt; i7 --&gt; i5 --&gt;i3 --&gt; 奔腾 --&gt; 赛扬 AMD(锐龙)</span><br><span class="line"></span><br><span class="line">- AMD</span><br><span class="line"></span><br><span class="line">- &gt; 这几年经过苏妈( 苏姿丰 )的领导，对性能的释放以及版本性能提升都比 起Intel亮眼很多.所以有个梗 AMD YES!(表示对AMD产品的认可) </span><br><span class="line"></span><br><span class="line">- ![1666360980852](D:/05格式化输出/%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E4%B8%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.assets/1666360980852.png)</span><br><span class="line"></span><br><span class="line"> 购买参考指标:</span><br><span class="line">    ``主频,缓存,多级缓存,核数,线程数</span><br><span class="line">  ``常见故障:</span><br><span class="line">    ``CPU温度过高导致死机,重启.(天气,散热老化,长时间运行,超频) --&gt; 清灰或换散热器</span><br><span class="line">  ``型号解析:</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">``i7-12875H --&gt; i7表示的是架构版本</span><br><span class="line">                 ``12表示的是第十二代</span><br><span class="line">                 ``875表示性能指数</span><br><span class="line">                 ``H表示标压处理器(性能较强,续航较弱)</span><br><span class="line">  ``R5-6600U --&gt; R5表示的是架构版本 </span><br><span class="line">             ``6代表第六世代</span><br><span class="line">             ``600表示性能指数</span><br><span class="line">             ``U代表低压处理器(性能较弱,续航较强)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CPU会分为 好几个架构:</span><br><span class="line">    ``i3/r3 --&gt; 入门机型用的cpu.性能偏弱</span><br><span class="line">    ``i5/r5 --&gt; 标准,性能OK</span><br><span class="line">    ``i7/r7 --&gt; 高性能</span><br><span class="line">    ``i9/r9 --&gt; 极致性能</span><br></pre></td></tr></table></figure>

<p><a href="https://www.mydrivers.com/zhuanti/tianti/cpu/index.html">CPU天梯图</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">``tips:</span><br><span class="line">   ``1.一般情况下数字越大越牛(看整体数字,不是单纯看架构版本.新版本i5/标压的i5性能可能会比上版本/低压i7强).</span><br><span class="line">   ``2.低压处理器(性能弱,续航强)标压处理器(性能强,续航弱) </span><br><span class="line">   ``3.游戏需求+大型软件需求(标压) 日常办公使用(低压)</span><br><span class="line">   ``4.如果实在不了解信息,可搜索最新版本的&quot;CPU天梯图&quot;里面有性能排行</span><br></pre></td></tr></table></figure>

<h3 id="硬盘知识"><a href="#硬盘知识" class="headerlink" title="硬盘知识"></a>硬盘知识</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">``硬盘主要用作于存储数据.,负责永久性数据存储,速度相较于CPU慢</span><br><span class="line"> ``因存储方式不同区分为 </span><br><span class="line">     ``机械硬盘(HDD):</span><br><span class="line">       ``速度慢,容量大,较便宜</span><br><span class="line">     ``固态硬盘(SSD):</span><br><span class="line">       ``速度快,容量小,较贵些,适合读多写少</span><br><span class="line">     ``购买参考指标:</span><br><span class="line">       ``容量,缓存,转速,读写速度,尺寸(笔记本和台式机用的硬盘尺寸是不同的,购买时需要注意),固态接口类型(M.2接口,SATA接口)</span><br><span class="line"> ``推荐就是固态+机械 --&gt; 固态作为系统盘,机械做些存储盘</span><br><span class="line"> ``计算机里面一些程序的运行速度跟加载速度有关.所以可以把一些常用的软件,游戏放到固态硬盘中</span><br></pre></td></tr></table></figure>

<h3 id="内存条"><a href="#内存条" class="headerlink" title="内存条"></a>内存条</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">``这里的内存指的是&quot;运行内存&quot;,也是用于存储数据,主要存储临时数据,关机后清空,相较硬盘,存储速度更快.</span><br><span class="line">``内存的好坏也是直接影响了电脑的使用效率,速度.</span><br><span class="line">``电脑在开机后,会把常用数据从硬盘先读入内存,方便后续CPU使用,提高执行效率.</span><br><span class="line">``数据读写顺序:</span><br><span class="line">  ``CPU --&gt; 内存 --&gt; 硬盘</span><br><span class="line">``在开发工作时,内存使用率达到80%就需要加内存了.学编程,8G内存打底,</span><br><span class="line">最好是16G</span><br><span class="line"> </span><br><span class="line">  ``1.购买时要注意是否和主板相匹配</span><br><span class="line">  ``2.加装时,最好购同品牌,同频率产品.避免兼容问题</span><br><span class="line">  ``3.购买笔记本时,注意是否支持加装内存条</span><br></pre></td></tr></table></figure>





<h1 id="十-复习拓展"><a href="#十-复习拓展" class="headerlink" title="十.复习拓展"></a>十.复习拓展</h1><h2 id="pycharm安装"><a href="#pycharm安装" class="headerlink" title="pycharm安装"></a>pycharm安装</h2><p><img src="D:/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95%E8%AF%BE.assets/1657627505735.png" alt="1657627505735"></p>
<p><img src="D:/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95%E8%AF%BE.assets/1657627539686.png" alt="1657627539686"></p>
<p><img src="D:/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95%E8%AF%BE.assets/1657627671338.png" alt="1657627671338"></p>
<p><img src="D:/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95%E8%AF%BE.assets/1657627724879.png" alt="1657627724879"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ide: 集成开发环境 --&gt; 有很多家伙的作案工具</span><br><span class="line">        编辑器: 给你写代码,修改代码的地方</span><br><span class="line">        编译器: 帮你运行代码的工具</span><br><span class="line">        调试器: 帮助你检查bug,了解程序运行流程的工具</span><br><span class="line">        其他工具: 杂七杂八.git上传,窗口句柄工具,远程连接工具等等.</span><br><span class="line">idle --&gt; idle其实就是在ide的基础上加了个l   learing --&gt; 集成开发学习环境</span><br><span class="line">     </span><br><span class="line">    idle主要是给学习使用的,作为学习工具完全OK,作为开发工具.没那么完善</span><br><span class="line">    pycharm --&gt; 目前最主流最好用的python开发工具</span><br><span class="line">    pycharm --&gt;  下载渠道</span><br><span class="line">        <span class="number">1.</span>官网下载 (https://www.jetbrains.com/pycharm/) 国外 </span><br><span class="line">        <span class="number">2.</span>网上搜索</span><br><span class="line">        <span class="number">3.</span>课件网盘</span><br><span class="line">    pycharm版本说明:</span><br><span class="line">        <span class="number">1.</span>专业版 --&gt; 有更多的功能.但是需要付费/激活账号</span><br><span class="line">        <span class="number">2.</span>社区版 --&gt; 免费,功能也够用了</span><br><span class="line">    教学使用的为pycharm2021社区版</span><br><span class="line"></span><br><span class="line">    pycharm是不能运行python代码的. 我们在pycharm中要运行py程序时,pycharm就会找到python环境,紧急请求支援<span class="number">6</span></span><br><span class="line"></span><br><span class="line">    快速注释的快捷键 --&gt; 选择代码 ctrl + /</span><br><span class="line">    快速复制上一行代码 --&gt; ctrl + d</span><br></pre></td></tr></table></figure>

<p><img src="D:/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95%E8%AF%BE.assets/1657628134154.png" alt="1657628134154"></p>
<p><img src="D:/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95%E8%AF%BE.assets/1657628180908.png" alt="1657628180908"></p>
<p><img src="D:/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95%E8%AF%BE.assets/1657628251924.png" alt="1657628251924"></p>
<p><img src="D:/06复习拓展/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95%E8%AF%BE.assets/1661948497159.png" alt="1661948497159"></p>
<p><img src="D:/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95/06%E5%A4%8D%E4%B9%A0%E6%8B%93%E5%B1%95%E8%AF%BE.assets/1657628314193.png" alt="1657628314193"></p>
<h2 id="复习-amp-如何做笔记"><a href="#复习-amp-如何做笔记" class="headerlink" title="复习 &amp; 如何做笔记"></a>复习 &amp; 如何做笔记</h2><h3 id="print-x2F-input-输出-x2F-输入"><a href="#print-x2F-input-输出-x2F-输入" class="headerlink" title="print &#x2F; input  输出 &#x2F; 输入"></a>print &#x2F; input  输出 &#x2F; 输入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;小星星&quot;</span>)  <span class="comment"># 人想说话  print </span></span><br><span class="line"><span class="built_in">print</span>(说出的内容)</span><br><span class="line">na = <span class="built_in">input</span>(<span class="string">&quot;请输入账号，&quot;</span>)  <span class="comment"># 返回的就是str 类型</span></span><br><span class="line"><span class="built_in">input</span>()  <span class="comment"># 获取我们键盘的数据 </span></span><br><span class="line"><span class="built_in">print</span>(na)</span><br></pre></td></tr></table></figure>

<h3 id="数据类型与变量"><a href="#数据类型与变量" class="headerlink" title="数据类型与变量"></a>数据类型与变量</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="number">123</span>  <span class="number">21312123</span> <span class="number">99999</span></span><br><span class="line"><span class="built_in">float</span> <span class="number">3.14</span>  <span class="number">1.5</span>  <span class="number">3.6</span></span><br><span class="line"><span class="built_in">bool</span>  <span class="literal">True</span>(真) \ <span class="literal">False</span>(假)</span><br><span class="line"></span><br><span class="line">变量 = 值  </span><br><span class="line"><span class="comment"># 变量其实就是菜篮子，存储多个数据，或者一个数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量名的规则，数字+字母+下划线 且数字不能开头，</span></span><br><span class="line"><span class="comment"># 不能与关键字重名</span></span><br><span class="line"><span class="comment"># 驼峰命名法</span></span><br><span class="line"><span class="comment"># 见面知意</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="序列-amp-序列类型的方法"><a href="#序列-amp-序列类型的方法" class="headerlink" title="序列&amp;序列类型的方法"></a>序列&amp;序列类型的方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 序列类型</span></span><br><span class="line"><span class="comment">## 序列类型的特点是 有序的数据类型，可以通过下标找到它</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## str 字符串  不可变类型</span></span><br><span class="line"><span class="comment">## 用单引号或者双引号包裹的数据</span></span><br><span class="line">str1 = <span class="string">&quot;众人寻我千百度，那人却在灯火阑珊处&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## list</span></span><br><span class="line"><span class="comment">## 用[]包住的数据，就是列表  可变类型</span></span><br><span class="line">li1 = [<span class="number">123</span>,<span class="string">&quot;ssdfds&quot;</span>]</span><br><span class="line">li2 = []</span><br><span class="line"></span><br><span class="line"><span class="comment">## tuple 元组 # 不可变 ， 存放不想修改的数据</span></span><br><span class="line"><span class="comment">## 用()包裹的数据， # 只有一个数据，也要加上逗号</span></span><br><span class="line">tu1 = (<span class="number">80</span>,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 下标&amp; 切片</span></span><br><span class="line"><span class="comment">### 下标 是  生活类似门牌号的东西，</span></span><br><span class="line">下标 默认是从<span class="number">0</span>开始</span><br><span class="line"></span><br><span class="line"><span class="comment">### 切片 </span></span><br><span class="line">[起始:结束:步长]</span><br><span class="line">取头不取尾  [<span class="number">0</span>:<span class="number">5</span>] <span class="number">0</span>到<span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># list  列表 方法</span></span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">append   <span class="comment"># 把数据 列表的最后面</span></span><br><span class="line">insert   <span class="comment"># 参数1 下标  参数2 数据</span></span><br><span class="line">extend   <span class="comment"># 打散数据  只能添加序列类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">pop  	<span class="comment"># pop 默认 删最后一位    写上下标 就根据下标</span></span><br><span class="line">remove  <span class="comment"># 根据数据删除</span></span><br><span class="line"><span class="keyword">del</span>     <span class="comment"># del 什么都可以删  删变量名  删list[1] </span></span><br><span class="line">clear 	<span class="comment"># 清空列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">list1[下标] = 数据<span class="number">1</span>，</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">index()  <span class="comment"># 找不到就会返回报错  找到就会下标 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">sort()    	<span class="comment"># 从小到大</span></span><br><span class="line">sort(reverse=<span class="literal">True</span>)  <span class="comment"># 从大到小</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># str 方法</span></span><br><span class="line"><span class="comment">#增</span></span><br><span class="line">+ 拼接</span><br><span class="line">join 拼接 根据指定 字符连接</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">replace  替换 	<span class="comment"># 参数1替换数据   参数2 新数据  	参数3 替换次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line"><span class="comment"># upper  字符串字母 变成 大写</span></span><br><span class="line">lower 字符串字母 变成 小写</span><br><span class="line">title  单词首字母大写, 判断空格</span><br><span class="line">strip 去除字符串左右两边的空格 换行\n</span><br><span class="line">split 切分， 根据指定的内容 切分字符串  <span class="comment"># 返回 list 列表</span></span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">find 通过内容 找到 返回它的下标 找不到 返回-<span class="number">1</span></span><br><span class="line">count 统计数据出现的次数</span><br><span class="line">isdigit 判断该字符串是否是纯数字  返回<span class="built_in">bool</span>值 <span class="literal">True</span> <span class="literal">False</span></span><br><span class="line">isalpha 字符串是否是纯字母  返回<span class="built_in">bool</span>值 <span class="literal">True</span> <span class="literal">False</span></span><br><span class="line">endswith 判断字符串的尾巴后缀.是否于指定的数据相等   返回<span class="built_in">bool</span>值 <span class="literal">True</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>函数 》》 获取序列类型的长度，也可以知道 数据有几个</span><br><span class="line"></span><br><span class="line"><span class="comment">## 元组方法</span></span><br><span class="line"></span><br><span class="line">index 找不到就会返回报错</span><br><span class="line">count 统计数据的次数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化输入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># %操作符</span></span><br><span class="line"><span class="comment"># str   %s </span></span><br><span class="line"><span class="comment"># float  %f		2位小数	%.2f  3位小数 %.3f</span></span><br><span class="line"><span class="comment"># int    %d</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># format </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我叫&#123;&#125;，年龄&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;jk&quot;</span>,<span class="number">23</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我叫&#123;1&#125;，年龄&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;jk&quot;</span>,<span class="number">23</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># f-str</span></span><br><span class="line">name = <span class="string">&quot;韦小宝&quot;</span></span><br><span class="line">age = <span class="number">99999</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我叫<span class="subst">&#123;name&#125;</span>，年龄<span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;我叫<span class="subst">&#123;name.strip()&#125;</span>，年龄<span class="subst">&#123;age + <span class="number">1</span>&#125;</span>&quot;</span>) </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="爬虫案例（爬取音乐）"><a href="#爬虫案例（爬取音乐）" class="headerlink" title="爬虫案例（爬取音乐）"></a>爬虫案例（爬取音乐）</h3><p>核心是搞清楚如何爬取，三个字  》》》 找规律</p>
<blockquote>
<p>代码其实不难，难在于你如何理解，这里听懂的同学 扣 1  </p>
<p>理解老师是如何发现这个《规律》以及通过哪些方式 ，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 观察url     https://music.163.com/   https://www.baidu.com/</span><br><span class="line">- 观察返回的什么</span><br><span class="line">- 看看页面里面有没有</span><br></pre></td></tr></table></figure>

<p>那么今晚就说明你听懂了   </p>
</blockquote>
<p>讲解 pip 到底是什么</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip 是我们Python管理包的工具  &gt;&gt;    手机的手机商店</span><br><span class="line">install 安装的意思		    &gt;&gt;   手机商店的下载</span><br><span class="line">uninstall  卸载的意思， 不想要这个包了，就用它      &gt;&gt;  卸载</span><br><span class="line">-i 加速源   因为包也是网上下载，下载下来的，那就会有网速快慢的问题， </span><br><span class="line">    这里有人 给我们 安排几个 网站，也是可以下载 的</span><br><span class="line">    比如 清华源  清华自己的网站</span><br><span class="line">        清华：https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">        阿里云：http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">        中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">        华中理工大学：http://pypi.hustunique.com/</span><br><span class="line">        山东理工大学：http://pypi.sdutlinux.org/ </span><br><span class="line">        豆瓣：http://pypi.douban.com/simple/</span><br><span class="line">            </span><br><span class="line"> pip uninstall requests</span><br></pre></td></tr></table></figure>

<ul>
<li>模块安装</li>
</ul>
<blockquote>
<p>pip install  模块名 -i 加速源<br>pip install html5lib -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>pip install requests -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>pip install lxml -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
</blockquote>
<p>代码文件  jianyiNetMusic.py</p>
<p><a href="http://cxy521.com/python.html">http://cxy521.com/python.html</a>   程序员万能库</p>
<h1 id="十一-散列类型-字典-amp-集合"><a href="#十一-散列类型-字典-amp-集合" class="headerlink" title="十一.散列类型 字典&amp;集合"></a>十一.散列类型 字典&amp;集合</h1><p>之前学过的数据类型有</p>
<ul>
<li>数值类型： int &#x2F; flloat &#x2F; bool     存储一个数值数据</li>
<li>序列类型：str&#x2F; list &#x2F; tuple          存储多个数据， 有序，下标，切片</li>
</ul>
<p>散列类型：</p>
<ul>
<li>存储多个数据，<em>无序，数据不重复</em></li>
</ul>
<h2 id="初识集合-set"><a href="#初识集合-set" class="headerlink" title="初识集合(set)"></a>初识集合(set)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">集合(<span class="built_in">set</span>) --&gt; 是一个可以存(不重复)且&#123;无序存储&#125;的容器.主要用来进行去重和逻辑判断</span><br><span class="line"> </span><br><span class="line">    用大括号&#123;&#125;包裹起来的数据(元组，数字，字符串),里面的数据用逗号隔开</span><br><span class="line">    语法:</span><br><span class="line">        集合名 = &#123;数据<span class="number">1</span>,数据<span class="number">2</span>&#125;</span><br><span class="line">        s1 = &#123;<span class="string">&quot;3&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="number">123</span>&#125;</span><br><span class="line"> </span><br><span class="line">    如果检测到有重复数据,那么集合就不会把重复的数据放入到自己的存储空间即自动去重</span><br><span class="line">     </span><br><span class="line">    set1 = &#123;<span class="number">12312</span>,<span class="number">12312</span>,<span class="number">123</span>,<span class="number">111</span>&#125;</span><br><span class="line">    <span class="built_in">print</span>(set1) <span class="comment"># 正常输出一个集合,里面的重复元素都被去除掉,自动去重</span></span><br><span class="line">    <span class="comment"># 12312,123,111</span></span><br><span class="line">    <span class="comment">#print(set1[2]) # 报错,因为散列类型没有下标的概念</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(set1)) <span class="comment"># 查看数据的类型</span></span><br><span class="line"> </span><br><span class="line">    进行逻辑运算,集合的运算:</span><br><span class="line">        集合<span class="number">1</span> &amp; 集合<span class="number">2</span> --&gt; 获取交集</span><br><span class="line">        集合<span class="number">1</span> | 集合<span class="number">2</span> --&gt; 获取并集</span><br><span class="line">        集合<span class="number">1</span> - 集合<span class="number">2</span> --&gt; 获取差集</span><br><span class="line"> 	    集合<span class="number">1</span> ^ 集合<span class="number">2</span> --&gt; 获取对称差集</span><br><span class="line">    &amp; --&gt; shift + <span class="number">7</span></span><br><span class="line">    | --&gt; shift + \</span><br><span class="line">    - --&gt; 减号</span><br><span class="line">    ^ --&gt; shift + <span class="number">6</span></span><br><span class="line"> </span><br><span class="line">    交集 --&gt; 一个数据,两个集合里都有</span><br><span class="line">    并集 --&gt; 两个集合里的所有数据(不算重复的)</span><br><span class="line">    差集 --&gt; 一个集合-另一个集合.剩下的就是它独有的</span><br><span class="line">    对称差集 --&gt;  返回各自独有的</span><br><span class="line">    </span><br><span class="line">   	生活例子：小明，小华 去商店买东西</span><br><span class="line">    xi_ming = &#123;<span class="string">&quot;可乐&quot;</span>,<span class="string">&quot;辣条&quot;</span>,<span class="string">&quot;鸡爪&quot;</span>&#125;</span><br><span class="line">    xi_hua = &#123;<span class="string">&quot;可乐&quot;</span>, <span class="string">&quot;面包&quot;</span>, <span class="string">&quot;qq糖&quot;</span>&#125;</span><br><span class="line">   </span><br><span class="line"> 	<span class="comment"># 交集：</span></span><br><span class="line">    <span class="built_in">print</span>(xi_ming &amp; xi_hua) <span class="comment"># 可乐</span></span><br><span class="line">    <span class="comment"># 并集：</span></span><br><span class="line">    <span class="built_in">print</span>(xi_ming | xi_hua) <span class="comment"># &#123;&#x27;可乐&#x27;, &#x27;qq糖&#x27;, &#x27;辣条&#x27;, &#x27;面包&#x27;, &#x27;鸡爪&#x27;&#125;</span></span><br><span class="line">    <span class="comment"># 差集:</span></span><br><span class="line">    <span class="built_in">print</span>(xi_ming - xi_hua) <span class="comment"># &#123;&#x27;辣条&#x27;, &#x27;鸡爪&#x27;&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 对称差集</span></span><br><span class="line">    <span class="built_in">print</span>(xi_hua ^ xi_ming) <span class="comment"># &#123;&#x27;qq糖&#x27;, &#x27;面包&#x27;, &#x27;鸡爪&#x27;, &#x27;辣条&#x27;&#125;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#利用集合去重特性 实现-----&gt;列表快速去重  案例</span></span><br><span class="line">    li = [<span class="number">123</span>,<span class="number">123</span>,<span class="number">123</span>,<span class="string">&quot;jk&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(li)))   <span class="comment">#[123, &#x27;jk&#x27;]</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>小结：</p>
<blockquote>
<p>集合可以用于去重，</p>
<p>进行 逻辑判断，集合运算，交并差以及对称差集</p>
</blockquote>
<h2 id="set的方法"><a href="#set的方法" class="headerlink" title="set的方法"></a>set的方法</h2><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p>集合是用大括号{}包裹起来的数据(元组，数字，字符串)  注意：没有列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add 增加一个数据  添加的数据不能是列表</span><br><span class="line">	集合名.add(数据<span class="number">1</span>)</span><br><span class="line">	set1.add(<span class="number">1314</span>)</span><br><span class="line">a = &#123;<span class="number">12</span>,<span class="number">11</span>,<span class="number">3</span>&#125;</span><br><span class="line">a.add(<span class="number">123</span>)      <span class="comment"># &#123;3, 123, 11, 12&#125;</span></span><br><span class="line">a.add([<span class="number">11</span>,<span class="number">3</span>])   <span class="comment"># TypeError: unhashable type: &#x27;list&#x27;</span></span><br><span class="line">a.add(<span class="string">&quot;11,3&quot;</span>)   <span class="comment"># &#123;3, 11, 12, &#x27;11,3&#x27;&#125;</span></span><br><span class="line">a.add((<span class="number">11</span>,<span class="number">3</span>))   <span class="comment"># &#123;3, 11, 12, (11, 3)&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pop  删除一个数据   随机删除</span><br><span class="line">    集合名.pop()</span><br><span class="line">    set1.pop()</span><br><span class="line"></span><br><span class="line">remove: 删除指定的数据  如果删除一个不存在的数据就会报错</span><br><span class="line">    集合名.remove(数据)</span><br><span class="line">    set1.remove(<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">discard: 删除指定的数据 升级版remove ：删除一个没有的数据 会显示<span class="literal">None</span></span><br><span class="line">    集合名.remove(数据)</span><br><span class="line">    set1.remove(<span class="number">8</span>)</span><br><span class="line">a = &#123;<span class="number">12</span>,<span class="number">11</span>,<span class="number">3</span>&#125;</span><br><span class="line">a.pop()</span><br><span class="line">a.remove()</span><br><span class="line">a.discard(<span class="number">123</span>)</span><br><span class="line">a.discard(<span class="number">12</span>)  </span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>

<h3 id="更新元素"><a href="#更新元素" class="headerlink" title="更新元素"></a>更新元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">update: 把一个序列类型数据,打散添加到集合里  如果不想打散 可以再加个元组（）注：元组内一个元素时加逗号，</span><br><span class="line">       update的是一个<span class="built_in">str</span>型，则打散去重</span><br><span class="line">       update的是一个元组tupe型，则把tupe的括号内的分别加入</span><br><span class="line">       updata的是一个列表<span class="built_in">list</span>型，则把<span class="built_in">list</span>的[]内的分别加入</span><br><span class="line">集合名.update(序列类型)</span><br><span class="line">set1 = &#123;<span class="number">12312</span>,<span class="number">12312</span>,<span class="number">123</span>,<span class="number">111</span>&#125;</span><br><span class="line"><span class="comment"># set1.update(&#x27;拼多多&#x27;)  # &#123;&#x27;多&#x27;, 111, 12312, 123, &#x27;拼&#x27;&#125;    </span></span><br><span class="line"><span class="comment"># set1.update((&#x27;拼多多&#x27;)) # &#123;111, &#x27;拼&#x27;, &#x27;多&#x27;, 12312, 123&#125;</span></span><br><span class="line"><span class="comment"># set1.update((&#x27;拼多多&#x27;,))# &#123;12312, 123, &#x27;拼多多&#x27;, 111&#125;</span></span><br><span class="line">set1.update((<span class="string">&#x27;拼多多&#x27;</span>,<span class="number">1314</span>,<span class="string">&quot;qqqqqqqq&quot;</span>)) <span class="comment"># &#123;1314, &#x27;qqqqqqqq&#x27;, 111, &#x27;拼多多&#x27;, 12312, 123&#125;</span></span><br><span class="line"><span class="comment"># set1.update([&#x27;拼多多&#x27;]) #&#123;12312, &#x27;拼多多&#x27;, 123, 111&#125;</span></span><br><span class="line">set1.update([<span class="string">&#x27;拼多多&#x27;</span>,<span class="number">1314</span>]) <span class="comment">#&#123;1314, &#x27;拼多多&#x27;, 111, 12312, 123&#125;</span></span><br><span class="line"><span class="built_in">print</span>(set1)</span><br></pre></td></tr></table></figure>

<h2 id="初识字典-dict"><a href="#初识字典-dict" class="headerlink" title="初识字典(dict)"></a>初识字典(dict)</h2><p>字典从字面理解，类似我们生活中的“新华字典”</p>
<p>根据一个字，找到它的理解</p>
<p>帅：形容一个人好看，靓仔</p>
<p>美：形容一个人漂亮，靓女</p>
<p>属性名：描述</p>
<p>键名：值    </p>
<p>字典是 <strong>无序</strong>、<strong>键不重复</strong>且元素只能是<strong>键值对</strong>的<strong>可变的</strong>容器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用大括号&#x27;&#123;&#125;&#x27;包裹起来的数据,数据的存储方式为键值对,数据之间用逗号隔开.主要用来存储一些带有&#x27;说明&#x27;性质的数据.</span><br><span class="line">    字典里的值.啥数据都能放.比如数值类型可以,列表,元组也可以.甚至可以字典里面再放一个字典作为值.</span><br><span class="line">    </span><br><span class="line">    但是，键的类型为不可变类型，所以只能是元组 字符串 数字    不能是可变的  列表 </span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">    字典名 = &#123;键<span class="number">1</span>:值<span class="number">1</span>,键<span class="number">2</span>:值<span class="number">2</span>&#125;</span><br><span class="line">    dict1 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;韦寻&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">19</span>,<span class="string">&quot;addr&quot;</span>:<span class="string">&quot;广州&quot;</span> &#125; </span><br><span class="line"></span><br><span class="line">输出方式：</span><br><span class="line">	<span class="built_in">print</span>(dict1)  <span class="comment">#&#123;&#x27;name&#x27;: &#x27;韦寻&#x27;, &#x27;age&#x27;: 19, &#x27;addr&#x27;: &#x27;广州&#x27;&#125;</span></span><br><span class="line">获取name键的值</span><br><span class="line">   	<span class="built_in">print</span>(dict1[<span class="string">&quot;name&quot;</span>])  <span class="comment">#韦寻</span></span><br><span class="line">修改方式：</span><br><span class="line">	<span class="built_in">dict</span>[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;韦小宝&quot;</span>    <span class="comment"># # &#123;&#x27;name&#x27;: &#x27;韦小宝&#x27;, &#x27;age&#x27;: 19, &#x27;addr&#x27;: &#x27;广州&#x27;&#125;</span></span><br><span class="line">    </span><br><span class="line"> 例子：</span><br><span class="line">dict1 = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;韦寻&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">19</span>,<span class="string">&quot;addr&quot;</span>:<span class="string">&quot;广州&quot;</span> &#125;</span><br><span class="line"><span class="built_in">print</span>(dict1) <span class="comment">#&#123;&#x27;name&#x27;: &#x27;韦寻&#x27;, &#x27;age&#x27;: 19, &#x27;addr&#x27;: &#x27;广州&#x27;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(dict1[<span class="string">&quot;name&quot;</span>])  <span class="comment"># 韦寻    打印值</span></span><br><span class="line">dict1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;韦小宝&quot;</span>    <span class="comment"># 修改键值</span></span><br><span class="line"><span class="built_in">print</span>(dict1)   <span class="comment"># &#123;&#x27;name&#x27;: &#x27;韦小宝&#x27;, &#x27;age&#x27;: 19, &#x27;addr&#x27;: &#x27;广州&#x27;&#125;</span></span><br><span class="line">    </span><br><span class="line">键名：键名可以是数字，元组，字符串    但是列表 集合不可以   因为列表 集合是可变的，只能对不可变类型进行Hash。（value中可以放任何类型的）</span><br><span class="line">       如果根据键名获取value时，输入的键名不存在，则会报错</span><br><span class="line">字典的特性：</span><br><span class="line">	<span class="number">1.</span> 以键值对的方式存储数据，（不能只有其一）不是下标索引</span><br><span class="line">    <span class="number">2.</span> 键名是唯一的  （如果重复 会以最后一个为准）</span><br><span class="line">    <span class="number">3.</span> 不可以通过值去修改键</span><br><span class="line">    </span><br><span class="line">比其他类型的结构清晰，可以存对应关系，可读性比较好</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="声明空变量"><a href="#声明空变量" class="headerlink" title="声明空变量"></a>声明空变量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">``li1 = [] # 声明一个空列表</span><br><span class="line">``tu1 = () # 声明一个空元组</span><br><span class="line">``tu1 = (，) #报错 无效的数据</span><br><span class="line">``str1 = &#x27;&#x27; # 声明一个空的字符串   不能加空格</span><br><span class="line">``dict1 = &#123;&#125; # 声明一个空的字典 因为字典用的比集合多,所以默认是字典</span><br><span class="line">``set1 = set() # 声明一个空集合</span><br></pre></td></tr></table></figure>

<h2 id="字典的方法"><a href="#字典的方法" class="headerlink" title="字典的方法"></a>字典的方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wukong = &#123;</span><br><span class="line">    <span class="string">&quot;姓名&quot;</span>:<span class="string">&quot;悟空&quot;</span>,</span><br><span class="line">    <span class="string">&quot;年龄&quot;</span>:<span class="number">10000</span>,</span><br><span class="line">    <span class="string">&quot;身高&quot;</span>:<span class="number">223</span>,</span><br><span class="line">    <span class="string">&quot;赛亚人&quot;</span>: <span class="number">9</span>，</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="增："><a href="#增：" class="headerlink" title="增："></a>增：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">setdefault:给字典添加一个数据，如果这个数据已存在，就输出它的值。如果不存在  就新增一个键值对</span><br><span class="line">    setdefault(键名,值)</span><br><span class="line">    字典名.setdefault(<span class="string">&quot;儿子&quot;</span>,<span class="string">&quot;孙悟饭&quot;</span>)     新增一个键</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(wukong.setdefault(<span class="string">&quot;儿子&quot;</span>,<span class="string">&quot;孙悟饭&quot;</span>))  <span class="comment"># 孙悟饭  返回的value值</span></span><br><span class="line"><span class="built_in">print</span>(wukong) <span class="comment">#&#123;&#x27;姓名&#x27;: &#x27;悟空&#x27;, &#x27;年龄&#x27;: 10000, &#x27;身高&#x27;: 223, &#x27;赛亚人&#x27;: 9, &#x27;儿子&#x27;: &#x27;孙悟饭 </span></span><br><span class="line"><span class="built_in">print</span>(wukong.setdefault(<span class="string">&quot;儿子&quot;</span>,<span class="string">&quot;孙悟天&quot;</span>))  <span class="comment">#孙悟饭</span></span><br><span class="line"><span class="built_in">print</span>(wukong)  <span class="comment">#&#123;&#x27;姓名&#x27;: &#x27;悟空&#x27;, &#x27;年龄&#x27;: 10000, &#x27;身高&#x27;: 223, &#x27;赛亚人&#x27;: 9, &#x27;儿子&#x27;: &#x27;孙悟饭&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(wukong.setdefault(<span class="string">&quot;爸爸&quot;</span>,<span class="string">&quot;孙悟饭&quot;</span>))  <span class="comment">#孙悟饭</span></span><br><span class="line"><span class="built_in">print</span>(wukong)  <span class="comment">#&#123;&#x27;姓名&#x27;: &#x27;悟空&#x27;, &#x27;年龄&#x27;: 10000, &#x27;身高&#x27;: 223, &#x27;赛亚人&#x27;: 9, &#x27;儿子&#x27;: &#x27;孙悟饭&#x27;, &#x27;爸爸&#x27;: &#x27;孙悟饭&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(wukong.setdefault(<span class="string">&quot;精斗云&quot;</span>))  <span class="comment"># 没有写上 value值 ，默认为None</span></span><br><span class="line"><span class="built_in">print</span>(wukong) <span class="comment">#&#123;&#x27;姓名&#x27;: &#x27;悟空&#x27;, &#x27;年龄&#x27;: 10000, &#x27;身高&#x27;: 223, &#x27;赛亚人&#x27;: 9, &#x27;精斗云&#x27;: None&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(wukong.setdefault(<span class="string">&quot;姓名&quot;</span>))  <span class="comment"># 悟空</span></span><br></pre></td></tr></table></figure>

<h3 id="删："><a href="#删：" class="headerlink" title="删："></a>删：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pop 通过键名删除指定的数据  返回 删除的值  如果删除的键名不存在会报错</span><br><span class="line">	字典名.pop(键名)</span><br><span class="line">	<span class="built_in">print</span>(wukong.pop(<span class="string">&quot;qqqq&quot;</span>))  <span class="comment">#KeyError: &#x27;qqqq&#x27;</span></span><br><span class="line">	<span class="built_in">print</span>(wukong.pop(<span class="string">&quot;姓名&quot;</span>))  <span class="comment"># 悟空</span></span><br><span class="line">	<span class="built_in">print</span>(wukong)   <span class="comment">#&#123;&#x27;年龄&#x27;: 10000, &#x27;身高&#x27;: 223, &#x27;赛亚人&#x27;: 9&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">popitem: 随机删除键值对  因为字典是无序的 （如果数据字典数字比较少时 一般删除最后一位）</span><br><span class="line">    字典名.popitem()</span><br><span class="line">    wukong.popitem()</span><br><span class="line">    </span><br><span class="line">	<span class="built_in">print</span>(wukong.popitem())  <span class="comment"># (&#x27;赛亚人&#x27;, 9)   并且以元组形式返回</span></span><br><span class="line">	<span class="built_in">print</span>(wukong)   <span class="comment">#&#123;&#x27;姓名&#x27;: &#x27;悟空&#x27;, &#x27;年龄&#x27;: 10000, &#x27;身高&#x27;: 223&#125;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">clear 清空字典</span><br><span class="line">	字典名.clear()</span><br><span class="line">    wukong.clear()</span><br><span class="line">    </span><br><span class="line">	<span class="built_in">print</span>(wukong.clear())  <span class="comment">#None</span></span><br><span class="line">	<span class="built_in">print</span>(wukong)    <span class="comment">#&#123;&#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">del</span> 根据键名来删除  （和列表类似，列表<span class="keyword">del</span>时通过下标删除）</span><br><span class="line"></span><br><span class="line">	<span class="keyword">del</span> wukong[<span class="string">&quot;赛亚人&quot;</span>]</span><br><span class="line">	<span class="built_in">print</span>(wukong)   <span class="comment">#&#123;&#x27;姓名&#x27;: &#x27;悟空&#x27;, &#x27;年龄&#x27;: 10000, &#x27;身高&#x27;: 223&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="改-重点"><a href="#改-重点" class="headerlink" title="改: 重点"></a>改: 重点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wukong = &#123;</span><br><span class="line">    <span class="string">&quot;姓名&quot;</span>:<span class="string">&quot;悟空&quot;</span>,</span><br><span class="line">    <span class="string">&quot;年龄&quot;</span>:<span class="number">10000</span>,</span><br><span class="line">    <span class="string">&quot;身高&quot;</span>:<span class="number">223</span>,</span><br><span class="line">    <span class="string">&quot;赛亚人&quot;</span>: <span class="number">9</span>，</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">update: 有则，修改键的值, 没有，就新增一个 （setdefault:有则输出它的值。没有就新增一个键值对</span><br><span class="line">    </span><br><span class="line">    字典名.update(&#123;键:值&#125;)</span><br><span class="line">    wukong.update(&#123;<span class="string">&quot;姓名&quot;</span>:<span class="string">&quot;韦小宝&quot;</span>&#125;)</span><br><span class="line">    增加多个</span><br><span class="line">    字典名.update(&#123;键:值, 键<span class="number">2</span>:值<span class="number">2</span>&#125;)</span><br><span class="line">    wukong.update(&#123;<span class="string">&quot;地址&quot;</span>:<span class="string">&quot;赛亚星&quot;</span>,<span class="string">&quot;攻击力&quot;</span>:<span class="number">999999</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(wukong.update(&#123;<span class="string">&quot;姓名&quot;</span>:<span class="string">&quot;韦小宝&quot;</span>&#125;))   <span class="comment">#None</span></span><br><span class="line">	<span class="built_in">print</span>(wukong) <span class="comment"># &#123;&#x27;姓名&#x27;: &#x27;韦小宝&#x27;, &#x27;年龄&#x27;: 10000, &#x27;身高&#x27;: 223, &#x27;赛亚人&#x27;: 9&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(wukong.update(&#123;<span class="string">&quot;地址&quot;</span>:<span class="string">&quot;赛亚星&quot;</span>,<span class="string">&quot;攻击力&quot;</span>:<span class="number">999999</span>&#125;))   <span class="comment">#None</span></span><br><span class="line">	<span class="built_in">print</span>(wukong) <span class="comment"># &#123;&#x27;姓名&#x27;: &#x27;悟空&#x27;, &#x27;年龄&#x27;: 10000, &#x27;身高&#x27;: 223, &#x27;赛亚人&#x27;: 9, &#x27;地址&#x27;: &#x27;赛亚星&#x27;, &#x27;攻击力&#x27;: 999999&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查：重点"><a href="#查：重点" class="headerlink" title="查：重点"></a>查：重点</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">通过键值对的方式查:(不存在的键会报错)</span><br><span class="line">    name=wukong[<span class="string">&quot;姓名&quot;</span>]</span><br><span class="line">	<span class="built_in">print</span>(name)  <span class="comment">#悟空</span></span><br><span class="line">get：通过键名.获取键的值，不存在这个键，返回<span class="literal">None</span>，不会报错</span><br><span class="line">	字典名.get(键名)</span><br><span class="line">    wukong.get(<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">    name = wukong.get(<span class="string">&quot;姓名1&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(name)  <span class="comment"># None</span></span><br><span class="line">    name = wukong.get(<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(name)  <span class="comment"># 悟空</span></span><br><span class="line">keys: 获取所有的键</span><br><span class="line">    字典名.keys()</span><br><span class="line">    wukong.keys()</span><br><span class="line">    </span><br><span class="line">    rest = wukong.keys()</span><br><span class="line">	<span class="built_in">print</span>(rest)  <span class="comment"># dict_keys([&#x27;姓名&#x27;, &#x27;年龄&#x27;, &#x27;身高&#x27;, &#x27;赛亚人&#x27;])</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">list</span>(rest))  <span class="comment">#[&#x27;姓名&#x27;, &#x27;年龄&#x27;, &#x27;身高&#x27;, &#x27;赛亚人&#x27;]</span></span><br><span class="line">    </span><br><span class="line">items: 获取所有的键值对</span><br><span class="line">    字典名.tiems()</span><br><span class="line">    wukong.items()</span><br><span class="line">    </span><br><span class="line">    rset = wukong.items() <span class="comment"># dict_items([(&#x27;姓名&#x27;, &#x27;悟空&#x27;), (&#x27;年龄&#x27;, 10000), (&#x27;身高&#x27;, 223), (&#x27;赛亚人&#x27;, 9)])  </span></span><br><span class="line">                          <span class="comment"># &lt;class &#x27;dict_items&#x27;&gt;</span></span><br><span class="line">	rest = wukong.keys() <span class="comment"># dict_keys([&#x27;姓名&#x27;, &#x27;年龄&#x27;, &#x27;身高&#x27;, &#x27;赛亚人&#x27;])   </span></span><br><span class="line">    				    <span class="comment"># &lt;class &#x27;dict_keys&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(rset))  <span class="comment">#[(&#x27;姓名&#x27;, &#x27;悟空&#x27;), (&#x27;年龄&#x27;, 10000), (&#x27;身高&#x27;, 223), (&#x27;赛亚人&#x27;, 9)]</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">type</span>(rset))  <span class="comment">#&lt;class &#x27;dict_items&#x27;&gt;</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">list</span>(rset)[<span class="number">0</span>][<span class="number">0</span>])  <span class="comment">#姓名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">list</span>(rset))   <span class="comment"># [(&#x27;姓名&#x27;, &#x27;悟空&#x27;), (&#x27;年龄&#x27;, 10000), (&#x27;身高&#x27;, 223), (&#x27;赛亚人&#x27;, 9)]</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">list</span>(rset)[<span class="number">2</span>][<span class="number">0</span>])  <span class="comment">#身高</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="作业-4"><a href="#作业-4" class="headerlink" title="作业"></a>作业</h2><ul>
<li><ol>
<li>对li 去重  li &#x3D; [123,123,12,23,121,56,1,2,3]</li>
</ol>
</li>
<li><ol>
<li>用字典存储自己的自我介绍 姓名，年龄，身高，优点 等等，并进行增删改查操作</li>
</ol>
</li>
<li><ol>
<li><p>对以下两个集合进行 交集，并集，差集，处理</p>
<p>animal1 &#x3D; {“小猫”,”小狗”,”小鸟”}</p>
<p>animal2 &#x3D; {“小猪”,”小狗”,”小鸟”}</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 对li 去重  li = [123,123,12,23,121,56,1,2,3]</span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">123</span>,<span class="number">123</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">121</span>,<span class="number">56</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(li)))    <span class="comment">#[1, 2, 3, 12, 23, 56, 121, 123]</span></span><br></pre></td></tr></table></figure>


<h1 id="1-用字典存储自己的自我介绍-姓名，年龄，身高，优点-等等，并进行增删改查操作"><a href="#1-用字典存储自己的自我介绍-姓名，年龄，身高，优点-等等，并进行增删改查操作" class="headerlink" title="1. 用字典存储自己的自我介绍 姓名，年龄，身高，优点 等等，并进行增删改查操作"></a>1. 用字典存储自己的自我介绍 姓名，年龄，身高，优点 等等，并进行增删改查操作</h1><p>con &#x3D; {“姓名”:”言沫沫”,”年龄”:”10000”,”身高”:280,”优点”:”好学创新”}<br>print(con)<br>#增<br>print(con.setdefault(“座右铭”,”自己选择的路跪着也要走完！”))   #自己选择的路跪着也要走完！<br>print(con)  # {‘姓名’: ‘言沫沫’, ‘年龄’: ‘10000’, ‘身高’: 280, ‘优点’: ‘好学创新’, ‘座右铭’: ‘自己选择的路跪着也要走完！’}<br>#删</p>
<h1 id="print-con-pop-“身高”-280"><a href="#print-con-pop-“身高”-280" class="headerlink" title="print(con.pop(“身高”))  # 280"></a>print(con.pop(“身高”))  # 280</h1><h1 id="print-con-popitem-随机删"><a href="#print-con-popitem-随机删" class="headerlink" title="print(con.popitem())   # 随机删"></a>print(con.popitem())   # 随机删</h1><h1 id="print-con-clear-None"><a href="#print-con-clear-None" class="headerlink" title="print(con.clear())     # None"></a>print(con.clear())     # None</h1><h1 id="print-con"><a href="#print-con" class="headerlink" title="print(con)             # {}"></a>print(con)             # {}</h1><h1 id="del-con-“身高”"><a href="#del-con-“身高”" class="headerlink" title="del con[“身高”]"></a>del con[“身高”]</h1><h1 id="print-con-‘姓名’-‘言沫沫’-‘年龄’-‘10000’-‘优点’-‘好学创新’-‘座右铭’-‘自己选择的路跪着也要走完！’"><a href="#print-con-‘姓名’-‘言沫沫’-‘年龄’-‘10000’-‘优点’-‘好学创新’-‘座右铭’-‘自己选择的路跪着也要走完！’" class="headerlink" title="print(con)  # {‘姓名’: ‘言沫沫’, ‘年龄’: ‘10000’, ‘优点’: ‘好学创新’, ‘座右铭’: ‘自己选择的路跪着也要走完！’}"></a>print(con)  # {‘姓名’: ‘言沫沫’, ‘年龄’: ‘10000’, ‘优点’: ‘好学创新’, ‘座右铭’: ‘自己选择的路跪着也要走完！’}</h1><p>#改<br>print(con.update({“身高”:”800”}))   # None<br>print(con)  # {‘姓名’: ‘言沫沫’, ‘年龄’: ‘10000’, ‘身高’: ‘800’, ‘优点’: ‘好学创新’, ‘座右铭’: ‘自己选择的路跪着也要走完！’}</p>
<p>#查<br>print(con[“座右铭”])  # 自己选择的路跪着也要走完！<br>print(con.get(“name”)) # None<br>print(con.get(“姓名”)) # 言沫沫<br>print(con.keys()) # dict_keys([‘姓名’, ‘年龄’, ‘身高’, ‘优点’, ‘座右铭’])<br>print(con.values())# dict_values([‘言沫沫’, ‘10000’, ‘800’, ‘好学创新’, ‘自己选择的路跪着也要走完！’])<br>print(con.items())  # dict_items([(‘姓名’, ‘言沫沫’), (‘年龄’, ‘10000’), (‘身高’, ‘800’), (‘优点’, ‘好学创新’), (‘座右铭’, ‘自己选择的路跪着也要走完！’)])</p>
<h1 id="1-对以下两个集合进行-交集，并集，差集，处理"><a href="#1-对以下两个集合进行-交集，并集，差集，处理" class="headerlink" title="1. 对以下两个集合进行 交集，并集，差集，处理"></a>1. 对以下两个集合进行 交集，并集，差集，处理</h1><p>animal1 &#x3D; {“小猫”,”小狗”,”小鸟”}</p>
<p>animal2 &#x3D; {“小猪”,”小狗”,”小鸟”}</p>
<p>print(“交集”,animal1 &amp; animal2)  # {‘小狗’, ‘小鸟’}<br>print(“并集”,animal1 | animal2)  # {‘小狗’, ‘小鸟’, ‘小猪’, ‘小猫’}<br>print(“差集”,animal1 - animal2)  # {‘小猫’}<br>print(“对称差集”,animal1 ^ animal2)  # {‘小猫’, ‘小猪’}<br>~~~</p>
<p>​</p>
</li>
</ol>
</li>
</ul>
<p>360 使用了查毒，就把它退了，长期占用</p>
<p>注册表  电脑管家， 360 处理垃圾，把他退掉</p>
<p>课后巩固</p>
<ul>
<li><a href="http://c.biancheng.net/view/4372.html">http://c.biancheng.net/view/4372.html</a>   字典</li>
<li><a href="http://c.biancheng.net/view/4395.html">http://c.biancheng.net/view/4395.html</a>    集合</li>
</ul>
<p>课前预习</p>
<p><a href="http://c.biancheng.net/python/flow_control/">http://c.biancheng.net/python/flow_control/</a>    流程控制语句  有一点逻辑性的东西</p>
<p>分水岭</p>
<p><a href="http://www.bandisoft.com/">压缩软件</a></p>
<p>n</p>
<p>​		</p>
<p>  ​</p>
<p>  ​</p>
<p>  ​</p>
]]></content>
  </entry>
  <entry>
    <title>Hello，臭狗熊blog！</title>
    <url>/2022/10/17/hello-myblog/</url>
    <content><![CDATA[<h3 id="If-it-doesn’t-challenge-you-it-won’t-change-you"><a href="#If-it-doesn’t-challenge-you-it-won’t-change-you" class="headerlink" title="If it doesn’t challenge you,it won’t change you!"></a><em>If it doesn’t challenge you,it won’t change you!</em></h3><span id="more"></span>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1430566047&auto=1&height=66"></iframe>

<h3 id="一-来源于那次的心血来潮"><a href="#一-来源于那次的心血来潮" class="headerlink" title="一.来源于那次的心血来潮"></a>一.来源于那次的心血来潮</h3><p>此时距离搭建博客不到三天时间，某午后心血来潮的想拥有一个自己的小破站，不仅仅是为了记录些什么，更想去试试，锻炼自己，并一直坚持下去。除此之外，此时已经被封宿舍许久，表示自己快要发霉了。当然，也有部分原因就是大三焦虑症，作为一名普通本科学习的信管班学生，家里也没什么矿，更是前途堪忧啊！</p>
<h3 id="二-自我认知"><a href="#二-自我认知" class="headerlink" title="二.自我认知"></a>二.自我认知</h3><p>首先谈谈自己的专业，信息管理与信息系统，这个专业学的广而不精。偏技术，又偏管理，但是呢，学技术的话学校不太重视这个专业，你比不过计算机班，网络安全，信息安全。学管理呢，开的课设也不是特别多。所以呢，当面临着毕业的时候就很头疼。</p>
<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Frcbqb.ccmeng.com%3A66%2Ftp%2Farticle%2F228%2F2_frd1k__.jpg&refer=http%3A%2F%2Frcbqb.ccmeng.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1668781829&t=f5c7b0be9ac371a8c0bbcc6490f740c9" alt="心情复杂"></p>
<h3 id="三-考研-or-工作"><a href="#三-考研-or-工作" class="headerlink" title="三.考研 or 工作"></a>三.考研 or 工作</h3><p>目前形式就是遍地本科生，考研压力大，就业压力也大，考公压力更大。那到底是考研还是就业呢，我个人觉得应该充分考虑自己情形而定，别人的建议那只是建议，决定权还是在你收录。最最忌讳的就是随波逐流，别人干什么你就干甚，很羡慕那些有方向的同志。</p>
<p>如果你家庭情况比较不错，并且学习能力强，基础不错，不管是普通本科，还是985  211我建议还是去考研。考研的好处不言而喻，以后发展空间大，现在很多大厂都是研究生门槛。</p>
<p>如果你家庭情况不太好，又理论基础不是很好，建议还是就业，就业的好处呢就是可以提前面临社会毒打，，哈哈哈，有工作经验了，技术提高了，那以后进更好的大厂，更好的环境还是极有可能的，并且在三四十岁，经济压力小。</p>
<p>纵然选择很难，但是这是每个即将毕业的同志必须面临的，如果你觉得考研，就一定要提前去准备，毕竟现在考研也是很困难的，很卷的。。。最迟大三就要去准备。。。</p>
<p>对于全日制研究生和非全日制研究生，我的建议就是能全日制就不要非全日制。</p>
<h3 id="四-终身学习"><a href="#四-终身学习" class="headerlink" title="四.终身学习"></a>四.终身学习</h3><p>学习本身并不难，最难的是坚持。对于程序员来说，学习能力和兴趣很大程度上决定个人能力，公司不会因为你什么都不会，而简历上一句我特能吃苦耐劳去给你offer。</p>
<h3 id="五-未来"><a href="#五-未来" class="headerlink" title="五.未来"></a>五.未来</h3><p>目前的自己很菜，但是我会一直坚持下去，一点点的去啃，一点点的去进步，一点点的去积累。过去，车马很慢，一生很难走出去。如今，车水马龙，却总是迷失在灯红酒绿中。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Python函数进阶</title>
    <url>/2022/11/02/Python%E6%88%90%E9%95%BF%E8%AE%B03/</url>
    <content><![CDATA[<h3 id="python基础3"><a href="#python基础3" class="headerlink" title="python基础3"></a><em>python基础3</em></h3><span id="more"></span>

<h1 id="一-函数进阶-闭包-amp-装饰器"><a href="#一-函数进阶-闭包-amp-装饰器" class="headerlink" title="一.函数进阶 闭包&amp;装饰器"></a>一.函数进阶 闭包&amp;装饰器</h1><p>今晚记住两个关键词  《直接》 和《间接》</p>
<p>demo：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我的电脑硬盘内存不足了， 现在有什么解决办法？</span><br><span class="line"> </span><br><span class="line"> <span class="number">1.</span>加装一块硬盘      直接升级  </span><br><span class="line"> <span class="number">2.</span>插u盘            间接升级</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="comment"># 外部函数</span></span><br><span class="line">    a = <span class="number">10</span> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test1</span>():  <span class="comment"># 闭----&gt;嵌套函数</span></span><br><span class="line">        <span class="comment"># 内部函数</span></span><br><span class="line">        <span class="built_in">print</span>(a)  <span class="comment"># 包 ---&gt;用到了外部函数中的变量</span></span><br><span class="line">    <span class="keyword">return</span> test1 <span class="comment"># 最后得把这个内部函数return 出去</span></span><br><span class="line">    <span class="comment"># return test1() # 把这个内部函数-----调用后的结果 return 出去     # 10</span></span><br></pre></td></tr></table></figure>

<h2 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h2><ol>
<li><p>到底是个什么<br> 是个  函数<br> 闭：  封闭    &gt;&gt;  嵌套  该函数是个内部函数  在外部的函数体里面定义的函数<br>   包：  内部函数包含外部函数作用域中的 变量的使用  (不是指全局作用域)</p>
<p>总结：<br>  1. 它必须是个函数<br>       2. 并且它必须是嵌套函数<br>       3. 内部函数必须使用了外部函数的作用域中的变量<br>       4. 还得把内部函数 return 出去</p>
</li>
</ol>
<p>包： 空间  &gt;&gt; 局部名称空间 &gt;&gt; 局部作用域</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fun1</span>():   <span class="comment"># 闭：嵌套</span></span><br><span class="line">    	<span class="built_in">print</span>(a)  <span class="comment"># 包：使用 外部作用域中的a</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fun1   <span class="comment"># 函数对象</span></span><br><span class="line"></span><br><span class="line">rest = fun()   <span class="comment"># rest就是fun1     &lt;function fun.&lt;locals&gt;.fun1 at 0x000001F6D22AEA60&gt;</span></span><br><span class="line"><span class="built_in">print</span>(rest)    <span class="comment">#  把内部函数return出去</span></span><br><span class="line"><span class="built_in">print</span>(rest())  <span class="comment"># 1   None(内部函数的返回值)</span></span><br><span class="line"><span class="comment"># rest()相当于外层函数返回fun1()  即：把这个内部函数----调用后的结果 return 出去</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 函数的嵌套 	         --------&gt;    闭 </span><br><span class="line"><span class="number">2.</span> 作用域                 --------&gt;   包</span><br><span class="line"><span class="number">3.</span> 用不了这个函数（必须返回才能使用）------&gt;   函数对象</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    <span class="comment"># 局部作用域</span></span><br><span class="line">    a = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iner</span>():</span><br><span class="line">        <span class="built_in">print</span>(a)  <span class="comment"># 12</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> iner  <span class="comment"># iner ----&gt; 返回函数对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rest = outer()   <span class="comment"># &lt;function outer.&lt;locals&gt;.iner at 0x000002CB5E27EA60&gt;</span></span><br><span class="line"><span class="built_in">print</span>(rest)   </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(rest))   <span class="comment"># &lt;class &#x27;function&#x27;&gt;</span></span><br><span class="line">rest()  <span class="comment"># iner()   12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级 2.0 版本</span></span><br><span class="line"><span class="comment"># 实现变化传参</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="comment">#  局部作用域</span></span><br><span class="line">    <span class="comment"># 外部作用域</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iner</span>(<span class="params">num</span>):  <span class="comment"># 直接传参</span></span><br><span class="line">        <span class="comment"># 内部作用域</span></span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(num)  <span class="comment"># 12</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> iner   <span class="comment"># iner  ---&gt; 返回函数对象</span></span><br><span class="line"></span><br><span class="line">rest = outer(<span class="number">11</span>)  <span class="comment"># # outer函数调用后  把返回值(指向iner) 赋值给rest变量</span></span><br><span class="line">rest(<span class="number">11</span>) <span class="comment"># iner  相当于传值了两遍   如果任意一个不传会报错----&gt; iner() missing 1 required positional argument: &#x27;num&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    <span class="comment">#  局部作用域</span></span><br><span class="line">    <span class="comment"># 外部作用域</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iner</span>(<span class="params">num</span>):</span><br><span class="line">        <span class="comment"># 内部作用域</span></span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(num)  <span class="comment"># 12</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> iner   <span class="comment"># iner  ---&gt; 返回函数对象</span></span><br><span class="line"></span><br><span class="line">rest = outer()  <span class="comment"># # outer函数调用后  把返回值(指向iner) 赋值给rest变量</span></span><br><span class="line">rest(<span class="number">11</span>) <span class="comment"># iner  相当于传值了两遍   如果任意一个不传会报错----&gt; iner() missing 1 required positional argument: &#x27;num&#x27;</span></span><br><span class="line"><span class="comment">#这就是间接传参 ---&gt; 也就是使用闭包把inner隐藏起来  直接调用外部函数  并进行传参</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简便的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iner</span>():   <span class="comment"># 变化1</span></span><br><span class="line">        <span class="keyword">nonlocal</span> num  <span class="comment"># 把一个变量从全局转化为私有的，就可以修改了</span></span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(num)  <span class="comment"># 12</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> iner  <span class="comment"># iner ---&gt; 返回函数对象</span></span><br><span class="line"></span><br><span class="line">rest = outer(<span class="number">11</span>) <span class="comment"># outer函数调用后  把返回值(指向iner) 赋值给rest变量</span></span><br><span class="line">rest()   <span class="comment"># 12  # 变化2  或者直接返回iner(num)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只要在函数外 属于 全局</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 反之 只要在函数内 属于局部</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<blockquote>
<p>闭包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 首先得是个嵌套函数</span><br><span class="line">2. 内部函数用了外部函数的变量</span><br><span class="line">3. return了 内部函数</span><br></pre></td></tr></table></figure>

<p>闭包   掌握了一个技能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给函数传参</span><br><span class="line">1. 直接传参</span><br><span class="line">2. 利用闭包传参 间接传参</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>主要涉及的就是<br>    1.闭包<br>        2. 函数对象  把 函数作为参数来传递<br>    用处  ——–&gt; 在<em><strong>不修改我们的源码和调用方式</strong></em>的情况下，<em>给函数添加功能</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">   	 <span class="built_in">print</span>(<span class="string">&quot;test 函数&quot;</span>)</span><br><span class="line">   	 <span class="built_in">print</span>(<span class="string">&quot;Python函数进阶&quot;</span>)  <span class="comment"># 添加函数功能</span></span><br><span class="line">   test()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">test 函数</span></span><br><span class="line"><span class="string">Python函数进阶</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用装饰器的方法  func1 就是装饰器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">f</span>):  <span class="comment">#f 相当于test</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">        f()  <span class="comment"># 相当于test()传到了这里  也就是调用了test</span></span><br><span class="line">        <span class="comment"># 添加新功能</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Python函数进阶&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> func2()</span><br><span class="line"></span><br><span class="line"><span class="meta">@func1   </span><span class="comment"># 使用装饰器的第二种方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test 函数&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  使用装饰器的第一种方法    即 以下两行相当于@func1 </span></span><br><span class="line"><span class="comment"># rest = func1(test)</span></span><br><span class="line"><span class="comment"># rest()</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">test 函数</span></span><br><span class="line"><span class="string">Python函数进阶</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">     </span><br></pre></td></tr></table></figure>

<p>直接  &gt;&gt;  追女孩<br>间接  &gt;&gt;  你能做我的女朋友</p>
<p>直接修改    ——&gt;   整容<br>间接修改    ——&gt;  化妆</p>
<p>开发潜规则：<br>    代码扩展   –&gt;&gt; 开放    —&gt;可 添加功能<br>        源码修改   –&gt;&gt;  封闭   —&gt;  <strong>不能够修改源码</strong></p>
<p>为什么不能够修改源码 ？？？<br>    如果修改了之后，改出了一堆bug很麻烦<br>        要拓展功能，但是要通过别的函数来实现 “ 间接修改”</p>
<p>函数的使用分为两个阶段：<br>    1.定义(装饰器)函数<br>        2.调用(装饰器)函数</p>
<p><strong>装饰器</strong>： 在’<strong>不修改函数源码’</strong> ,和 <strong>‘函数调用方式的情况</strong>‘ 给函数添加功能</p>
<p><strong>普通</strong>：写好了一个装饰器，要给函数添加功能</p>
<p>​	函数 &#x3D; 装饰器(函数)   #    rest &#x3D; func1(test) 给函数增加新功能，并且重新赋值   </p>
<p>​	函数()			#    rest() 现在再调用函数就是已经增加了新功能</p>
<p><strong>简便语法</strong>：直接给<em><strong>函数添加新功能</strong></em>，这样调用时，就是默认把装饰器上的功能加上<br>    语法糖<br>    @装饰器名 ——&gt; @func1<br>    def 函数名()——&gt;def test()</p>
<p>demo：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">laoganm</span>():  <span class="comment"># 老干妈炒饭</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是老干妈炒饭&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dalumian</span>(<span class="params">*args,**kwargs</span>):  <span class="comment"># 打卤面        有参数需求</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是打卤面&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 装饰器 必须是闭包</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jia_liao</span>(<span class="params">f</span>):           <span class="comment"># 加料  f相当于我们要加的食材</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jia_zhuti</span>(<span class="params">*args, **kwargs</span>):     <span class="comment"># 当定义的函数有参数需求时 需要添加到内部函数  并且把拿到的参数返回出去</span></span><br><span class="line">        rest = f(*args, **kwargs)               <span class="comment"># 先把食材拿过来</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(args,<span class="string">&quot;------args&quot;</span>)            <span class="comment"># 功能1</span></span><br><span class="line">        <span class="built_in">print</span>(kwargs,<span class="string">&quot;=====kwargs&quot;</span>)		    <span class="comment"># 功能2</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;添加猪蹄 &quot;</span>)  <span class="comment"># 加个 猪蹄		 # 功能3</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> rest       <span class="comment"># 返回参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jia_zhuti       <span class="comment"># 原来的食材 + 猪蹄</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># dalumian = jia_liao(dalumian)  # 打卤面 去给老板 加料</span></span><br><span class="line"><span class="comment"># dalumian(12,name=&quot;yanmomo&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我是打卤面</span></span><br><span class="line"><span class="string">(12,) ------args</span></span><br><span class="line"><span class="string">&#123;&#x27;name&#x27;: &#x27;yanmomo&#x27;&#125; =====kwargs</span></span><br><span class="line"><span class="string">添加猪蹄 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># laoganm = jia_liao(laoganm)  # 老干妈炒饭 去给老板 加料</span></span><br><span class="line"><span class="comment"># laoganm()</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我是老干妈炒饭</span></span><br><span class="line"><span class="string">() ------args</span></span><br><span class="line"><span class="string">&#123;&#125; =====kwargs</span></span><br><span class="line"><span class="string">添加猪蹄 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 语法糖</span></span><br><span class="line"><span class="meta">@jia_liao  </span><span class="comment">#相当于 rest = jia_liao(chaomiao)   rest()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chaomian</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是啥&quot;</span>,name)</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">rest = chaomian(<span class="string">&quot;ke&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(rest)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我是啥 ke</span></span><br><span class="line"><span class="string">(&#x27;ke&#x27;,) ------args</span></span><br><span class="line"><span class="string">&#123;&#125; =====kwargs</span></span><br><span class="line"><span class="string">添加猪蹄 </span></span><br><span class="line"><span class="string">ke</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 完整版装饰器</span></span><br><span class="line"><span class="comment"># 具体情况 具体分析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">warpper</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inter</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        <span class="comment"># 逻辑判断  比如 账号是否登录</span></span><br><span class="line">        <span class="comment"># 新功能</span></span><br><span class="line">        <span class="keyword">return</span> f(*args,**kwargs)</span><br><span class="line">    <span class="comment">#    rest= return f(*args,**kwargs)</span></span><br><span class="line">      <span class="comment"># 这两种情况都可以返回 返回值 </span></span><br><span class="line">   <span class="comment"># return test	</span></span><br><span class="line">    <span class="keyword">return</span> inter</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><ul>
<li>什么情况下会用到装饰器: 一个功能很多时候都会使用,就可以把这个功能写成装饰器,给需要的函数添加 </li>
<li>比如: 认证登录,输入验证码 相当于生活中的化妆 –&gt; 在不改变你脸的情况下让你更好看 在不修改源代码的情况下,给函数添加功能</li>
</ul>
<h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请实现一个装饰器，把函数的返回值+<span class="number">100</span>然后返回</span><br><span class="line"></span><br><span class="line">请实现一个装饰器，通过一次调用使函数重复执行<span class="number">5</span>次</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请实现一个装饰器，把函数的返回值+100然后返回</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        rest = f(*args,**kwargs)</span><br><span class="line">        rest = rest+<span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(rest,<span class="string">&quot;这里是实现的功能&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> rest <span class="comment">#120</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">num</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(num)</span><br><span class="line">m=test(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(args[<span class="number">0</span>]) == <span class="built_in">int</span> <span class="keyword">and</span> <span class="built_in">type</span>(args[<span class="number">1</span>]) == <span class="built_in">int</span>:</span><br><span class="line">            <span class="built_in">print</span>(args,kwargs)</span><br><span class="line">            num = f(*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> num+<span class="number">100</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;传入数据错误！&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> fun1</span><br><span class="line"></span><br><span class="line"><span class="meta">@fun</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是add函数&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line">num = add(<span class="number">1200</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请实现一个装饰器，通过一次调用使函数重复执行5次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wapper</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">innner</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> count&lt;<span class="number">5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;f的函数名&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;f的函数的文档字符串&quot;</span>,)</span><br><span class="line">            f(*args,**kwargs)</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(count,<span class="string">&quot;\n&quot;</span>*<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;f的函数名&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;f的函数的文档字符串&quot;</span>, )</span><br><span class="line">            f(*args, **kwargs)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(count, <span class="string">&quot;\n&quot;</span> * <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> innner</span><br><span class="line"></span><br><span class="line"><span class="meta">@wapper</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    add是计算两个变量的和</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="巩固拓展博客"><a href="#巩固拓展博客" class="headerlink" title="巩固拓展博客:"></a>巩固拓展博客:</h2><p> <a href="https://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html">装饰器拓展</a> <a href="https://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html">https://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html</a></p>
<p>[装饰器拓展2](<a href="https://www.cnblogs.com/Jerry-Chou/archive/2012/05/23/python-decorator-explain.html">https://www.cnblogs.com/Jerry-Chou/archive/2012/05/23/python-decorator-explain.html</a> <a href="https://www.cnblogs.com/cotyb/p/5243252.html">https://www.cnblogs.com/cotyb/p/5243252.html</a>) <a href="https://www.cnblogs.com/Jerry-Chou/archive/2012/05/23/python-decorator-explain.html">https://www.cnblogs.com/Jerry-Chou/archive/2012/05/23/python-decorator-explain.html</a> <a href="https://www.cnblogs.com/cotyb/p/5243252.html">https://www.cnblogs.com/cotyb/p/5243252.html</a> </p>
<p><a href="https://www.cnblogs.com/rhcad/archive/2011/12/21/2295507.html">装饰器拓展3</a> <a href="https://www.cnblogs.com/rhcad/archive/2011/12/21/2295507.html">https://www.cnblogs.com/rhcad/archive/2011/12/21/2295507.html</a> </p>
<p>记得预习生成器 &amp;迭代器</p>
<p>c语言中文网</p>
<p>菜鸟教程</p>
<h1 id="二-递归-amp-生成器-amp-迭代器"><a href="#二-递归-amp-生成器-amp-迭代器" class="headerlink" title="二.递归&amp;生成器&amp;迭代器"></a>二.递归&amp;生成器&amp;迭代器</h1><h2 id="上节回顾"><a href="#上节回顾" class="headerlink" title="上节回顾"></a>上节回顾</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">闭包:</span><br><span class="line">    <span class="number">1.</span> 在一个嵌套函数中,</span><br><span class="line">    <span class="number">2.</span> 内层函数用到了外层函数的数据!!!</span><br><span class="line">    <span class="number">3.</span> 返回的是内层函数对象  </span><br><span class="line">        --&gt; 间接修改数据</span><br><span class="line"> 	</span><br><span class="line">    装饰器: 在不改变源代码和调用方式的前提下给函数添加功能</span><br><span class="line"> </span><br><span class="line">    装饰器的语法糖 --&gt;在要添加功能的函数上面写上</span><br><span class="line"><span class="meta">    @装饰器名  --&gt; 就可以实现添加功能</span></span><br><span class="line">    装饰器 --&gt; wrapper</span><br><span class="line">  </span><br><span class="line"><span class="meta">    @wrapper</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_decorator</span>(<span class="params">func</span>):          <span class="comment">#  add</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>): <span class="comment">#  接收传递给 add 的实参</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        decorator</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)  <span class="comment"># add(*args, **kwargs)</span></span><br><span class="line">    <span class="keyword">return</span> wrapper    <span class="comment"># 返回函数对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@my_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    add 是个计算两个变量的和</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add.__name__, add.__doc__)</span><br></pre></td></tr></table></figure>

<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归也是一种函数，在这个函数中不断的重复调用自己完成一些操作，但是这个调用它可以结束，</p>
<p>也就是，在一个函数中，自己调用了自己那就是递归</p>
<p>递归写起来方便，但是性能不是很好，对资源消耗很大，在正式开发，算法比赛不推荐的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:  <span class="comment"># 作为结束 条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> num * test(num -<span class="number">1</span>)  <span class="comment"># 5 * 4 * 3 * 2 * 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test(<span class="number">5</span>))   <span class="comment"># 120</span></span><br></pre></td></tr></table></figure>





<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代，更新换代？ </p>
<p>这是指对数据的一些操作，更新，输出，升级</p>
<p>比如软件的  版本1，版本2，版本3 </p>
<p>华为手机 p30 p40 p50 等等</p>
<p><strong>迭代器</strong></p>
<p>iter     —–&gt;  可迭代对象   能够<strong>被循环的对象就是可迭代对象</strong>（面试题）</p>
<p>但是可迭代对象并不一定是被循环的对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">iter</span>     -----&gt;  可迭代对象   能够被循环的对象就是可迭代对象（面试题）</span><br><span class="line">iterator &gt;&gt;  迭代器   </span><br><span class="line"></span><br><span class="line">迭代：操作一堆数据，数据之间都是有关联的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可迭代对象：</span><br><span class="line">	内置了__iter__方法的数据，都属于可迭代对象</span><br><span class="line">    	a = <span class="string">&quot;123&quot;</span></span><br><span class="line">        b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">        c = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">        d = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">        e = <span class="number">123</span>    <span class="comment"># int没有可迭代对象</span></span><br><span class="line">        a.__iter__()</span><br><span class="line">        b.__iter__()</span><br><span class="line">        c.__iter__()</span><br><span class="line">        d.__iter__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 迭代器对象:</span><br><span class="line">        可迭代对象在调用了__iter__方法之后，就返回一个迭代器对象</span><br><span class="line">        但凡内置有__iter__方法,__next__的都称之为迭代器对象</span><br><span class="line">        换言之，可迭代对象就是可以转换成迭代器的对象</span><br><span class="line">        <span class="comment"># 格式</span></span><br><span class="line">        变量名 = 可迭代对象.__iter__()</span><br><span class="line">        变量名 = <span class="built_in">iter</span>(可迭代对象)</span><br><span class="line">        来得到可迭代对象</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">   	    <span class="comment"># next(迭代器)   返回迭代器对象的下一个的结果   </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for  循环的实现原理</span></span><br><span class="line"><span class="comment"># 1.  自动调用 iter() 转变成迭代器对象</span></span><br><span class="line"><span class="comment"># 2.  再调用迭代器下面的next()  取到下一个  赋值  给变量x</span></span><br><span class="line"><span class="comment"># 3.  循环</span></span><br><span class="line"><span class="comment"># 4.  没有值了  StopIteration 异常  自动停了</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;123&quot;</span></span><br><span class="line">rest = a.__iter__()  <span class="comment"># 迭代器对象 rest</span></span><br><span class="line">rest1 = <span class="built_in">iter</span>(a)      <span class="comment"># 迭代器对象 rest</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(rest))  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(rest))  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(rest))  <span class="comment"># 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(rest))  <span class="comment"># 报错 StopIteration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> rest1:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;  <span class="comment"># 可迭代的对象</span></span><br><span class="line">d_iter = <span class="built_in">iter</span>(d)      <span class="comment"># 迭代器对象</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="built_in">len</span>(d):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(d_iter))</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">iter</span>(d):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    </span><br><span class="line">结果都是：    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">总结：</span><br><span class="line">	优点：</span><br><span class="line">    	为序列和非序列类型提供了一种统一的迭代取值方式</span><br><span class="line">    缺点：</span><br><span class="line">    	它只能一直往后取，不能回头，取完就over了</span><br><span class="line">         不能确认长度,在输出完之前,程序是不知道这个迭代器里面有几个数据</span><br><span class="line">    一句话总结:</span><br><span class="line">        把一堆的数据,进行有规律的输出/使用</span><br></pre></td></tr></table></figure>

<h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">本质: 自定义的迭代器(迭代器的变体)</span><br><span class="line"> </span><br><span class="line">    生成器的作用:</span><br><span class="line">        制定一个规则,基于规则,生成一些数据</span><br><span class="line"> </span><br><span class="line">    有个变量,里面有<span class="number">1314</span>个值,你手动声明就很麻烦</span><br><span class="line">    如果变量里的数据都是有规律,那就可以写一个生成器,制定规则,来生成变量 --&gt; 省事</span><br><span class="line"> </span><br><span class="line">    正常定义一个可迭代对象数据:</span><br><span class="line">        a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    <span class="comment"># 1.一般得先把数据存储进去才能使用</span></span><br><span class="line">    <span class="comment"># 2.生成器可以边生成边迭代使用</span></span><br><span class="line"> </span><br><span class="line">    生成器的表现形式:</span><br><span class="line">        一个函数中,有<span class="keyword">yield</span>关键字,就属于生成器</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">1314</span></span><br><span class="line"> </span><br><span class="line">    如果函数内,包含了<span class="keyword">yield</span>,在调用时,是不会运行里面的代码.并且这个函数的返回值,就是生成器对象</span><br><span class="line"> </span><br><span class="line">    函数中代码遇到<span class="keyword">yield</span>后,并不是结束,而是进入<span class="string">&#x27;暂停状态&#x27;</span> --&gt; 如果以后遇到<span class="keyword">yield</span>的时候,来开启.</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> 是结束</span><br><span class="line">	<span class="keyword">yield</span>  是暂停</span><br><span class="line">    两者都是返回数据 </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 生成器 也是迭代器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;》》》》》1234&quot;</span>)</span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line">    num1 = <span class="keyword">yield</span> <span class="number">1314</span>  <span class="comment"># 函数遇到 yield 就暂停了</span></span><br><span class="line">   <span class="comment"># input(&quot;等待&quot;)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">11111</span>)</span><br><span class="line">        <span class="built_in">print</span>(num) <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">rest33 = fun()</span><br><span class="line"><span class="comment"># print(rest33)  # &lt;generator object fun at 0x000002C49BF6E5C8&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器 是 迭代器的变异体</span></span><br><span class="line"></span><br><span class="line">rest333 = <span class="built_in">next</span>(rest33)</span><br><span class="line"><span class="built_in">print</span>(rest333, <span class="string">&quot;yield 返回的值&quot;</span>)</span><br><span class="line">rest2 = <span class="built_in">next</span>(rest33)</span><br><span class="line"><span class="built_in">print</span>(rest2, <span class="string">&quot;yield 返回值  rest2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rest <span class="keyword">in</span> rest33:</span><br><span class="line">    <span class="built_in">print</span>(rest, <span class="string">&quot;yield 返回的值&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> n</span><br><span class="line">    n +=<span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> n</span><br><span class="line">    n +=<span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> n</span><br><span class="line">    n +=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> test1():</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">&quot;等待&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#   三元表达式是python为我们提供的一种简化代码的解决方案</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_max</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line">res = my_max(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">res = x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y <span class="comment"># 三元表达式</span></span><br><span class="line">如果<span class="keyword">if</span>后面的条件成立  则 返回前面的  否则 返回后面的</span><br></pre></td></tr></table></figure>

<h2 id="列表表达式"><a href="#列表表达式" class="headerlink" title="列表表达式"></a>列表表达式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表生成式</span><br><span class="line">    列表生成式是python为我们提供的一种简化代码的解决方案，用来快速生成列表</span><br><span class="line">egg_list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        egg_list.append(<span class="string">&#x27;鸡蛋%s&#x27;</span> %i)</span><br><span class="line"><span class="built_in">print</span>(egg_list)   <span class="comment"># [&#x27;鸡蛋0&#x27;, &#x27;鸡蛋2&#x27;, &#x27;鸡蛋4&#x27;, &#x27;鸡蛋6&#x27;, &#x27;鸡蛋8&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表生成式  节省内存 ，提高 代码效率</span></span><br><span class="line">egg_list = [<span class="string">&#x27;鸡蛋%s&#x27;</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(egg_list)  <span class="comment"># [&#x27;鸡蛋0&#x27;, &#x27;鸡蛋2&#x27;, &#x27;鸡蛋4&#x27;, &#x27;鸡蛋6&#x27;, &#x27;鸡蛋8&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">生成器表达式</span><br><span class="line">    创建一个生成器对象有两种方式，一种是调用带<span class="keyword">yield</span>关键字的函数，</span><br><span class="line">    另一种就是生成器表达式，与列表生成式的语法格式相同，只需要将[]换成()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器表达式</span></span><br><span class="line">egg_list = (<span class="string">&#x27;鸡蛋%s&#x27;</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(egg_list)         <span class="comment"># 得到生成器对象  &lt;generator object &lt;genexpr&gt; at 0x0000015AC2A52CC8&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(egg_list))  <span class="comment">#  [&#x27;鸡蛋0&#x27;, &#x27;鸡蛋2&#x27;, &#x27;鸡蛋4&#x27;, &#x27;鸡蛋6&#x27;, &#x27;鸡蛋8&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="作业-1"><a href="#作业-1" class="headerlink" title="作业"></a>作业</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编写一个生成器，将一个二维的列表elist 转化为一维的列表。</span></span><br><span class="line"><span class="comment"># elist = [[1,2,3], [4,5,6],[7,8,9]]  # 二维列表  二维矩阵</span></span><br><span class="line"><span class="comment"># [123,1,2,3,4,5,] # 一维 列表</span></span><br><span class="line"></span><br><span class="line">new_list = []</span><br><span class="line">elist = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> elist:</span><br><span class="line">        <span class="built_in">print</span>(i,<span class="string">&quot;第一层循环&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> i:</span><br><span class="line">            <span class="built_in">print</span>(x,<span class="string">&quot;第二层循环&quot;</span>)</span><br><span class="line">            <span class="keyword">yield</span> x   <span class="comment"># 暂停  且返回数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通方法</span></span><br><span class="line"><span class="comment"># for x in fun1():  # 调用fun1  得到生成器</span></span><br><span class="line"><span class="comment">#     new_list .append(x)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(&quot;新的列表&quot;, new_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种  列表表达式</span></span><br><span class="line"><span class="built_in">print</span>([item <span class="keyword">for</span> item <span class="keyword">in</span> fun1()])  <span class="comment"># 列表表达式</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1, 2, 3] 第一层循环</span></span><br><span class="line"><span class="string">1 第二层循环</span></span><br><span class="line"><span class="string">2 第二层循环</span></span><br><span class="line"><span class="string">3 第二层循环</span></span><br><span class="line"><span class="string">[4, 5, 6] 第一层循环</span></span><br><span class="line"><span class="string">4 第二层循环</span></span><br><span class="line"><span class="string">5 第二层循环</span></span><br><span class="line"><span class="string">6 第二层循环</span></span><br><span class="line"><span class="string">[7, 8, 9] 第一层循环</span></span><br><span class="line"><span class="string">7 第二层循环</span></span><br><span class="line"><span class="string">8 第二层循环</span></span><br><span class="line"><span class="string">9 第二层循环</span></span><br><span class="line"><span class="string">新的列表 [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">elist = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(x <span class="keyword">for</span> i <span class="keyword">in</span> elist <span class="keyword">for</span> x <span class="keyword">in</span> i))  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="复习博客"><a href="#复习博客" class="headerlink" title="复习博客"></a>复习博客</h2><p><a href="http://c.biancheng.net/view/5419.html">http://c.biancheng.net/view/5419.html</a> –&gt; 迭代器<br><a href="http://c.biancheng.net/view/2393.html">http://c.biancheng.net/view/2393.html</a> –&gt; 生成器<br><a href="http://c.biancheng.net/view/2270.html">http://c.biancheng.net/view/2270.html</a> –&gt; 装饰器<br><a href="https://blog.csdn.net/zhengyajun_email/article/details/86715467">https://blog.csdn.net/zhengyajun_email/article/details/86715467</a> –&gt; 装饰器嵌套</p>
<p>提前预习 文件操作</p>
<h1 id="三-文件处理与内存管理"><a href="#三-文件处理与内存管理" class="headerlink" title="三.文件处理与内存管理"></a>三.文件处理与内存管理</h1><h2 id="上节回顾-1"><a href="#上节回顾-1" class="headerlink" title="上节回顾"></a>上节回顾</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">递归</span><br><span class="line">	在一个函数里调用了自己，但是 有截止点 </span><br><span class="line"></span><br><span class="line">迭代器</span><br><span class="line">	可迭代对象  可以被循环就是可迭代对象， （字符串，列表，元组 ）</span><br><span class="line">    		  内置了__iter__()</span><br><span class="line">    内置了__iter__(), __next__() 那就是迭代器</span><br><span class="line">    <span class="comment"># 获取迭代器</span></span><br><span class="line">    变量 = <span class="built_in">iter</span>(可迭代对象)</span><br><span class="line">    变量 = 变量.__iter__()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 我们通过什么获取到迭代器数据？</span></span><br><span class="line">    <span class="keyword">for</span> 循环</span><br><span class="line">    <span class="built_in">next</span>()    <span class="comment"># next 多次调用 程序 出现 报错 StopIteration 异常  自动停了</span></span><br><span class="line">    </span><br><span class="line">生成器</span><br><span class="line">	本质是一个自定义的迭代器</span><br><span class="line">    按照我们的规则自动在边使用，边生成数据</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 好处</span></span><br><span class="line">    Python的内存 占用不会那么大  也就是节省资源</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">        <span class="keyword">yield</span> 数据</span><br><span class="line">    	</span><br><span class="line">    <span class="keyword">yield</span>   暂停   （这种函数还活着，）</span><br><span class="line">    <span class="keyword">return</span>  结束   （这种函数已经 死亡）</span><br><span class="line">    <span class="keyword">yield</span> 和 <span class="keyword">return</span> 共同点 返回数据</span><br><span class="line">    </span><br><span class="line">列表表达式</span><br><span class="line">rest1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)]</span><br><span class="line"></span><br><span class="line">三元表达式</span><br><span class="line">a,b =<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">c = a <span class="keyword">if</span> a &lt; b <span class="keyword">else</span> b</span><br><span class="line"></span><br><span class="line">生成器表达式</span><br><span class="line">rest3 = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="高阶函数-map-reduce-filter"><a href="#高阶函数-map-reduce-filter" class="headerlink" title="高阶函数 map reduce filter"></a>高阶函数 map reduce filter</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 情景一  对列表中的数据进行平方处理</span></span><br><span class="line"></span><br><span class="line">li1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_op</span>(<span class="params">arr</span>):</span><br><span class="line">    new_li = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">        new_li.append(i ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> new_li</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_op(li1))  <span class="comment"># [1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二map</span></span><br><span class="line">li2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">ew = <span class="built_in">map</span>(my_square,li2)</span><br><span class="line"><span class="built_in">print</span>(ew)  <span class="comment"># &lt;map object at 0x000001D36241D188&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(ew))  <span class="comment"># [1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三  升级   匿名函数 lambda</span></span><br><span class="line">li3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">ew = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, li3)</span><br><span class="line"> <span class="comment">#map函数把li3这个参数放入到x中进行操作</span></span><br><span class="line"><span class="built_in">print</span>(ew)  <span class="comment"># &lt;map object at 0x00000230EDC9F2E0&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(ew)) <span class="comment"># [1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reduce 函数  有两个参数  参数<span class="number">1</span>是函数，参数<span class="number">2</span> 是 序列  参数<span class="number">3</span> 是 默认值</span><br><span class="line"><span class="comment"># 作用：将序列中每一个数据 放入函数中进行 操作  但是结果是累积计算的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce  <span class="comment"># reduce需要导包</span></span><br><span class="line"><span class="comment">#一</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_square</span>(<span class="params">x, y</span>):  <span class="comment"># 这儿只能两个参数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;x=<span class="subst">&#123;x&#125;</span>,  y=<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">ew = reduce(my_square,li)      <span class="comment"># 1 有函数， 有序列 ，</span></span><br><span class="line"><span class="built_in">print</span>(ew)  <span class="comment"># 没有默认值时默认把列表中第一个值给x,</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">x=1,  y=2</span></span><br><span class="line"><span class="string">x=3,  y=3</span></span><br><span class="line"><span class="string">x=6,  y=4</span></span><br><span class="line"><span class="string">x=10,  y=5</span></span><br><span class="line"><span class="string">15</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#二</span></span><br><span class="line">ew1 = reduce(<span class="keyword">lambda</span> x,y: x+y ,li, <span class="number">100</span>) <span class="comment"># 1 有函数， 有序列 ，有默认值</span></span><br><span class="line"><span class="built_in">print</span>(ew1)  <span class="comment"># 有默认值时默认值返回给了x</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">x=1,  y=2</span></span><br><span class="line"><span class="string">x=3,  y=3</span></span><br><span class="line"><span class="string">x=6,  y=4</span></span><br><span class="line"><span class="string">x=10,  y=5</span></span><br><span class="line"><span class="string">15</span></span><br><span class="line"><span class="string">115</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># filter 函数  有两个参数  参数1是函数，参数2 是序列  </span></span><br><span class="line"><span class="comment"># 作用：将序列中每一个数据 放入函数中进行 过滤 判断 根据表达式 返回的bool值 </span></span><br><span class="line"></span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">rest = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x&gt;<span class="number">3</span>, li)  <span class="comment"># x&gt;3的返回  x&lt;3的不要了</span></span><br><span class="line"><span class="built_in">print</span>(rest)  <span class="comment"># &lt;filter object at 0x00000227EE3CD048&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(rest))  <span class="comment"># [4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> &gt; <span class="number">3</span>) <span class="comment"># False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="与运行程序相关的三大核心硬件"><a href="#与运行程序相关的三大核心硬件" class="headerlink" title="与运行程序相关的三大核心硬件"></a>与运行程序相关的三大核心硬件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我们编写的程序 一定要运行在计算机硬件之上，而站在硬件的角度，与运行程序有关的三大核心</span><br><span class="line"></span><br><span class="line">cpu，内存，硬盘（硬盘就是c，d，f，g，）</span><br><span class="line"></span><br><span class="line">程序最先是存放于硬盘，把代码加载到内存中，然后cpu从内存中读取指令运行</span><br><span class="line">硬盘  &gt;&gt; 内存 &gt;&gt; cpu</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">用Python来操作文件（doc, bat, exe, py, mp3, jpg, html）</span><br><span class="line"></span><br><span class="line">一般都是操作文本 居多</span><br><span class="line">txt，word，Excel，csv，json</span><br><span class="line"></span><br><span class="line">龙族.txt</span><br><span class="line"></span><br><span class="line">文件操作的三点</span><br><span class="line">- 打开文件</span><br><span class="line">- 操作数据</span><br><span class="line">- 关闭文件</span><br><span class="line"></span><br><span class="line">操作模式:</span><br><span class="line">w: write</span><br><span class="line">写入数据, 如果文件里面有数据, 会被覆盖   如果文件不存在，它会自动创建</span><br><span class="line">a: append</span><br><span class="line">追加数据, 如果文件里有数据, 会追加在后面  如果文件不存在，它会自动创建</span><br><span class="line">r: read</span><br><span class="line">读取数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数据类型:</span><br><span class="line"></span><br><span class="line">b: byte</span><br><span class="line">以字节码的方式来操作数据 --&gt; 目前还用不上, 以后讲爬虫, 网络编程的时候再细讲</span><br><span class="line">t: text</span><br><span class="line">文档, 文件操作默认就是文档模式</span><br><span class="line"></span><br><span class="line">wb: 以字节码的方式写入数据</span><br><span class="line">rb: 以字节码的方式读取数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">基本语法:</span><br><span class="line">打开文件:(r取消转义字符)</span><br><span class="line"><span class="built_in">open</span>(文件路径\文件名, 操作模式, 字符编码)  <span class="comment"># 如果没写文件路径,默认在当前文件夹</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;demo/xiaobao.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">写入文件:</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;demo/xiaobao.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 打开文件</span></span><br><span class="line">f.write(<span class="string">&#x27;人生苦短，我用Python&#x27;</span>)  <span class="comment"># 操作文件</span></span><br><span class="line">f.close()  <span class="comment"># 关闭文件,如果不关闭会造成内存泄露.</span></span><br><span class="line"></span><br><span class="line">查看文件:</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;longZu.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment">#</span></span><br><span class="line"><span class="built_in">print</span>(f.read())</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;lala.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment">#</span></span><br><span class="line"><span class="comment"># print(f.read())</span></span><br><span class="line"><span class="comment"># print(f.readlines()) # 以列表形式读取所有行</span></span><br><span class="line"><span class="comment"># [&#x27;Python 我爱你222222222222 \n&#x27;, &#x27;Python 我爱你222222222222 \n&#x27;, &#x27;Python 我爱你222222222222 \n&#x27;, &#x27;Python 我爱你222222222222 \n&#x27;, &#x27;Python 我爱你222222222222 \n&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(f.readline(<span class="number">4</span>)) <span class="comment"># Pyth 写数字为x,则读取x个字符 如果输入的数字超过文本字符，则只输出一行</span></span><br><span class="line"><span class="built_in">print</span>(f.readline(<span class="number">1000000</span>)) <span class="comment"># Python 我爱你222222222222</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">追加文件:</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;longZu.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment">#</span></span><br><span class="line">f.write(<span class="string">&#x27;小怪兽 》》》》》&#x27;</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">为了避免忘记加close导致的翻车, 有个更推荐的写法.上下文管理器</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(文件路径\文件名, 操作模式, 字符编码) <span class="keyword">as</span> 别名:</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo/xiaobao.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;但愿人长久千里共婵娟&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>会自动帮我们关闭文件操作</span><br><span class="line">    <span class="keyword">as</span> --&gt; 取个别名, 小名</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f.writable())  <span class="comment"># 判断该文件是否可写</span></span><br><span class="line"><span class="built_in">print</span>(f.readable())  <span class="comment"># 判断该文件是否可读</span></span><br><span class="line"><span class="built_in">print</span>(f.closed)  <span class="comment"># 判断该文件是否已经关闭</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># with open  上下文管理器</span></span><br><span class="line"><span class="comment">#           路径 + 文件名        a 追加   encoding=&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;lala.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># a+  可以进行追加和其他的操作 并且把指针放到了最后面</span></span><br><span class="line">    <span class="comment"># r+  可以进行读和其他的操作   并且把指针放到了最前面  但是写完之后指针又回到了最后面</span></span><br><span class="line">    <span class="comment"># f.seek(0)  # 操作文件指针 可以将指针移动到指定的的位置</span></span><br><span class="line">    rest = f.read()</span><br><span class="line">    <span class="built_in">print</span>(rest)</span><br><span class="line">    <span class="comment"># f.append(123123123213123123123122312321312)</span></span><br><span class="line">    f.write(<span class="string">&#x27;\n但愿人长久千里共婵娟&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;====&quot;</span>)</span><br><span class="line">    <span class="comment"># rest = f.readlines()</span></span><br><span class="line">    <span class="comment"># print(rest)  # []</span></span><br><span class="line"></span><br><span class="line">    f.seek(<span class="number">0</span>)</span><br><span class="line">    rest = f.readlines()</span><br><span class="line">    <span class="built_in">print</span>(rest)  <span class="comment"># 非空</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">``文件路径 = 文件存储的位置</span><br><span class="line">``绝对路径 = 完整的路径,可以从头开始找到文件 -- 从电脑的盘符开发</span><br><span class="line">``相对路径 = 相对简短的路径,默认从当前文件夹出发,可以方便使用</span><br><span class="line">1.当前文件夹 2.内1层文件夹 3.外1层文件夹  的数据</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">``绝对路径: 广东广州市天河区车陂大岗路2号联合社区西区1C栋2楼全层</span><br><span class="line">``相对路径: 我家楼下</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">``计算机中的路径: </span><br><span class="line">``绝对路径: D:\software\BaiduNetdisk\api-ms-win-core-datetime-l1-1-0.dll</span><br><span class="line">``相对路径: 1.jpg</span><br></pre></td></tr></table></figure>

<h2 id="拓展博客"><a href="#拓展博客" class="headerlink" title="拓展博客"></a>拓展博客</h2><p><a href="http://c.biancheng.net/python/file">拓展博客</a></p>
<h1 id="四-模块与包"><a href="#四-模块与包" class="headerlink" title="四.模块与包"></a>四.模块与包</h1><h2 id="上节回顾-2"><a href="#上节回顾-2" class="headerlink" title="上节回顾"></a>上节回顾</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">li = [<span class="number">123</span>,<span class="number">343</span>,<span class="number">52</span>]</span><br><span class="line"><span class="built_in">map</span>  </span><br><span class="line"><span class="comment"># 把序列中的每一个数据放到函数中进行 操作 并且返回</span></span><br><span class="line"><span class="comment"># 返回的map对象</span></span><br><span class="line">new_li = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x+<span class="number">2</span>, li)  <span class="comment"># 参数1 函数 参数2 序列</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(new_li))</span><br><span class="line"></span><br><span class="line">reduce </span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="comment"># 把序列里的数据 放到函数 进行计算 ，但是结果是累积</span></span><br><span class="line"><span class="comment"># 返回的是  一个累积的结果  # 参数1 函数 参数2 序列 参数3 默认值</span></span><br><span class="line">new_li = reduce(<span class="keyword">lambda</span> y,x: x+y, li)</span><br><span class="line"><span class="built_in">print</span>(new_li)</span><br><span class="line"></span><br><span class="line"><span class="built_in">filter</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 把序列里的数据 放到函数 进行 判断 满足 条件 返回，不满足 则不返回</span></span><br><span class="line"><span class="comment"># 返回的是  filter 对象</span></span><br><span class="line">new_li = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x&gt;<span class="number">100</span>, li)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(new_li))</span><br><span class="line"></span><br><span class="line">文件操作</span><br><span class="line">步骤：</span><br><span class="line">	<span class="number">1.</span>打开文件</span><br><span class="line">    <span class="number">2.</span>操作数据</span><br><span class="line">    <span class="number">3.</span>关闭文件</span><br><span class="line"></span><br><span class="line">    文件模式</span><br><span class="line">    	r：read  读数据</span><br><span class="line">        w：write 写数据</span><br><span class="line">        a: append 追加  </span><br><span class="line">        r+   可读可写</span><br><span class="line">        w+   可读可写</span><br><span class="line">        a+   可读可写</span><br><span class="line">        wb   二进制方式写入数据</span><br><span class="line">        rb   二进制方式读取数据</span><br><span class="line">       </span><br><span class="line">   <span class="comment"># 推荐使用 上下文管理器 来操作文件</span></span><br><span class="line">   <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;文件名字&quot;</span>, <span class="string">&quot;操作模式&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    	f.read()</span><br><span class="line">        f.write()</span><br><span class="line">        </span><br><span class="line">		</span><br></pre></td></tr></table></figure>

<h2 id="初识模块"><a href="#初识模块" class="headerlink" title="初识模块"></a>初识模块</h2><p><a href="https://pypi.org/">官方模块官网</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">什么是模块???</span><br><span class="line">    一个python文件,就是一个模块</span><br><span class="line">    模块名就是文件名. 不带.py后缀</span><br><span class="line">        test.py --&gt; 模块名是test</span><br><span class="line"> </span><br><span class="line">    作用是什么???</span><br><span class="line">        调用其他python文件里的代码,功能.可以更灵活的实现,使用,添加各种效果</span><br><span class="line"> </span><br><span class="line">    变量 = 存储一个/多个数据</span><br><span class="line">    函数 = 存储一句/多句代码</span><br><span class="line">    模块 = 我全都要,我就是一个python文件</span><br><span class="line"> </span><br><span class="line">    当我们导入了一个模块后,就可以使用这个模块里的所有代码: 里面的变量,里面的函数</span><br><span class="line"> </span><br><span class="line">    模块分为三种:</span><br><span class="line">        <span class="number">1.</span>内置模块 --&gt; python自带的,在使用之前需要进行导入工具/类似于人类随身携带的工具</span><br><span class="line">            --&gt; time random math</span><br><span class="line"> </span><br><span class="line">        <span class="number">2.</span>第三方模块 --&gt; 不是python自带的,是别人写好的东西,自己下载来使用/类似于超市的商品,需要先购买再使用</span><br><span class="line">            pywin32  --&gt; windows开发</span><br><span class="line">            requests --&gt; 爬虫模块,发送请求命令</span><br><span class="line">            pygame   --&gt; 做游戏</span><br><span class="line">            TensorFlow --&gt; 人工智能</span><br><span class="line"> 		   opencv    --&gt;  视觉处理库</span><br><span class="line">            yolo5      --&gt;  视觉训练库</span><br><span class="line">            qt         --&gt;  图形库</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        <span class="number">3.</span>自定义模块:</span><br><span class="line">            自己写的py文件.就属于自定义模块</span><br><span class="line">     </span><br><span class="line">		官方模块官网 https://pypi.org/</span><br><span class="line"> </span><br><span class="line">    查看导入模块的代码--&gt; 选中模块 --&gt; ctrl + b</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="pip-Python包管理工具"><a href="#pip-Python包管理工具" class="headerlink" title="pip Python包管理工具"></a>pip Python包管理工具</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  pip --&gt; python自带的下载工具</span><br><span class="line">  python默认下载库就是通过pip.如果py环境没装好,pip可能就使用不了 --&gt; 修复/重装</span><br><span class="line"> </span><br><span class="line">  如何下载第三方模块:</span><br><span class="line">      在cmd中输入以下代码</span><br><span class="line">  pip install 库名</span><br><span class="line">  pip install pygame -i 加速源</span><br><span class="line"> </span><br><span class="line">  升级pip下载器(有时pip版本太低,下不了最新的库)</span><br><span class="line">  python -m pip install --upgrade pip -i https://pypi.doubanio.com/simple</span><br><span class="line"><span class="comment"># 如果下载模块没有问题， 就不需要更新</span></span><br><span class="line">  通过代理加速,下载第三方库</span><br><span class="line">  pip install 库名 --default-timeout=<span class="number">100</span> -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">  pip install pywin32 --default-timeout=<span class="number">100</span> -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"> </span><br><span class="line">  卸载模块</span><br><span class="line">  在cmd中输入</span><br><span class="line">  pip uninstall 模块名</span><br><span class="line">  pip uninstall pywin32</span><br></pre></td></tr></table></figure>

<h2 id="模块的使用"><a href="#模块的使用" class="headerlink" title="模块的使用"></a>模块的使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##模块的使用</span></span><br><span class="line">    模块的使用流程:</span><br><span class="line">        <span class="number">1.</span>导入模块</span><br><span class="line">        <span class="number">2.</span>使用模块</span><br><span class="line"> </span><br><span class="line">    导入模块</span><br><span class="line">        <span class="keyword">import</span> 模块名</span><br><span class="line">        <span class="keyword">import</span> requests</span><br><span class="line">        <span class="keyword">import</span> test</span><br><span class="line">    <span class="keyword">import</span> 导入的意思,准备作案工具.</span><br><span class="line"> </span><br><span class="line">    使用模块</span><br><span class="line">    <span class="keyword">import</span> 模块名</span><br><span class="line">    <span class="built_in">print</span>(模块名.变量名) <span class="comment"># 输出模块里的变量</span></span><br><span class="line">    模块名.函数名()      <span class="comment"># 调用模块里的函数</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">import</span> test <span class="comment"># 导入模块test</span></span><br><span class="line">    <span class="built_in">print</span>(test.name) <span class="comment"># 输出test里面的变量name</span></span><br><span class="line">    test.fun() <span class="comment"># 调用test里面的函数fun</span></span><br><span class="line"> </span><br><span class="line">    当模块名过长不好记,可以通过<span class="keyword">as</span>,给它取个别名</span><br><span class="line">        <span class="keyword">as</span> : 取个别名</span><br><span class="line">    <span class="keyword">import</span> 模块名 <span class="keyword">as</span> 别名</span><br><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">    </span><br><span class="line"> <span class="comment"># demo</span></span><br><span class="line"><span class="keyword">import</span> datetime  <span class="comment"># 时间模块</span></span><br><span class="line"><span class="built_in">print</span>(datetime.datetime.now())</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime </span><br><span class="line"><span class="built_in">print</span>(datetime.now())</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"><span class="built_in">print</span>(dt.datetime.now())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="模块进阶使用"><a href="#模块进阶使用" class="headerlink" title="模块进阶使用"></a>模块进阶使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##模块进阶使用</span></span><br><span class="line">    模块的潜规则:</span><br><span class="line">        <span class="number">1.</span>命名规范</span><br><span class="line">            <span class="number">1.</span>如果py文件是作为启动程序,那么命名比较宽松 </span><br><span class="line">            <span class="number">2.</span>如果py文件是作为模块来使用,最好采取全小写+下划线</span><br><span class="line">                user_login    <span class="comment"># 用户登录模块</span></span><br><span class="line">                user_register <span class="comment"># 用户注册模块</span></span><br><span class="line">                user_upload   <span class="comment"># 用户上传模块</span></span><br><span class="line">               </span><br><span class="line"> </span><br><span class="line">        <span class="number">2.</span>导入规范</span><br><span class="line">            不推荐一行导入多个模块</span><br><span class="line">        例:<span class="keyword">import</span> time,random,win32api <span class="comment"># 不推荐</span></span><br><span class="line">         </span><br><span class="line">        荐:</span><br><span class="line">            <span class="keyword">import</span> time</span><br><span class="line">            <span class="keyword">import</span> random</span><br><span class="line">            <span class="keyword">import</span> win32api</span><br><span class="line"> </span><br><span class="line">        <span class="number">3.</span>导入的顺序规范,中间空行</span><br><span class="line">            <span class="number">1.</span>首先导入内置模块</span><br><span class="line">            <span class="number">2.</span>然后导入第三方模块</span><br><span class="line">            <span class="number">3.</span>最后导入自定义模块</span><br><span class="line"> </span><br><span class="line">        例:</span><br><span class="line">            <span class="keyword">import</span> time</span><br><span class="line">            <span class="keyword">import</span> random</span><br><span class="line">            <span class="keyword">import</span> pygame</span><br><span class="line">            <span class="keyword">import</span> test</span><br><span class="line"> </span><br><span class="line">    python导入模块后发生的事情:</span><br><span class="line">        <span class="number">1.</span>运行这个模块里的所有代码,确保没有报错</span><br><span class="line">        <span class="number">2.</span>生成一个名称空间,这个名称空间和模块名同名.把模块里的变量名,函数名都存进去</span><br><span class="line">        <span class="number">3.</span>让当前的运行程序连接上名称空间.然后就可以通过  模块名.   的方式来使用模块里的数据</span><br><span class="line"> </span><br><span class="line">    如何导入模块的单独功能:</span><br><span class="line">        一个模块有<span class="number">100</span>个功能.我只想调用里面的功能.这个时候就可以把模块里的函数/变量.单独取出来,节省资源</span><br><span class="line">    <span class="keyword">from</span> 模块名 <span class="keyword">import</span> 函数名</span><br><span class="line">    <span class="keyword">from</span> 模块名 <span class="keyword">import</span> 变量名</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">from</span> test <span class="keyword">import</span> fun <span class="comment"># 导入来自test模块里的函数fun.</span></span><br><span class="line"> </span><br><span class="line">    优点: 避免不必要的内存资源开销.  减少代码量</span><br><span class="line">    缺点: 可能会出现同名覆盖的情况</span><br><span class="line"> </span><br><span class="line">    有的女孩子,在家里面,一大桶水.随便抬???</span><br><span class="line">    出了门,在喜欢的人面前.一瓶水都拧不开???</span><br><span class="line"> </span><br><span class="line">    python中有个__name__方法.它能够获取.py文件的执行模块</span><br><span class="line">        如果是以程序身份执行,__name__的值为__main__</span><br><span class="line">        如果是以模块身份执行,__name__的值为模块名</span><br><span class="line"> </span><br><span class="line">    python中通过main来判断文件是属于程序还是模块.</span><br><span class="line">        <span class="number">1.</span>有别的语言基础的同学,不要把python的__main__和别的语言的main搞混.性质不一样</span><br><span class="line">        <span class="number">2.</span>一个python文件,它的__name__为__main__那它就是作为启动程序,否则它是一个模块</span><br><span class="line">        <span class="number">3.</span>可以把一些非必要代码,只作为程序运行时才会使用.放到main判断</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        代码块 <span class="comment"># 里面的内容只有文件是以启动程序运行时才会运行</span></span><br><span class="line">    在pycharm中,输入main按下tab/回车就会自动生成</span><br><span class="line"> </span><br><span class="line">    __file__ 获取文件所在的位置</span><br><span class="line">    <span class="built_in">print</span>(__main__)</span><br><span class="line">    <span class="built_in">print</span>(__file__)</span><br></pre></td></tr></table></figure>

<h2 id="模块与包"><a href="#模块与包" class="headerlink" title="模块与包"></a>模块与包</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">包是模块的一种变异体,本质上也是模块的一种</span><br><span class="line"></span><br><span class="line">模块 --&gt; 文件</span><br><span class="line">包 --&gt; 文件夹</span><br><span class="line"> </span><br><span class="line">    包的概念:</span><br><span class="line">        把一些功能相同的模块,放到同一个文件夹里面.进行统一的管理.文件夹里有个有个配置文件叫__init__.py</span><br><span class="line"> </span><br><span class="line">    包的表现形式:</span><br><span class="line">        一个文件夹里面,有个叫__init__.py的文件</span><br><span class="line"> </span><br><span class="line">    包的创建方式:</span><br><span class="line">        pycharm中 --&gt; 右键项目文件夹 --&gt; new --&gt; python package</span><br><span class="line"> </span><br><span class="line">    包的核心作用:</span><br><span class="line">        把一些功能相同/类似的模块放到同一个文件夹里进行统一管理,里面有个叫__init__.py的文件</span><br><span class="line">        在导入这个包里的模块时,__init__.py的代码会自动执行</span><br><span class="line">        可以利用这个机制.把__init__当成是一个配置文件/使用说明</span><br><span class="line">  </span><br><span class="line">    跨文件夹导入模块的操作:</span><br><span class="line">        <span class="keyword">from</span> 文件夹名 <span class="keyword">import</span> 模块名</span><br><span class="line">        <span class="keyword">from</span> login <span class="keyword">import</span> qq_login </span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 全局导入</span></span><br><span class="line">    <span class="keyword">from</span> login <span class="keyword">import</span> * </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># * 匹配所有  也就是导入所有的变量，函数名，</span></span><br><span class="line">    <span class="comment"># 除了 _xxx 保护变量  __xxx  私有变量   我们开发人员自己 定下的规矩   </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> login <span class="keyword">import</span> *  <span class="comment"># python开发人员全靠自觉</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 为了维护包的干净  防止全局导入 </span></span><br><span class="line">    __init__.py 写入 __all__ = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 写入允许全局导出的东西</span></span><br><span class="line">    __all__ = [<span class="string">&quot;user_login&quot;</span>, ]</span><br></pre></td></tr></table></figure>

<h2 id="拓展博客-1"><a href="#拓展博客-1" class="headerlink" title="拓展博客"></a>拓展博客</h2><p><a href="http://c.biancheng.net/python/module_package/">拓展博客</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 装饰器</span><br><span class="line"></span><br><span class="line">def warpper(f)  #  warpper外层函数   f 传进来的函数 </span><br><span class="line">	def iner(*args, **kwargs)  #  iner 内层函数   *args, **kwargs 是不是传递给 f 的参数</span><br><span class="line">		f(*args, **kwargs)    # 调用 传进来的f函数</span><br><span class="line">		</span><br><span class="line">	return iner  # 返回 内层函数 </span><br><span class="line">	</span><br></pre></td></tr></table></figure>



<h1 id="五-常用模块"><a href="#五-常用模块" class="headerlink" title="五.常用模块"></a>五.常用模块</h1><h2 id="上节回顾-3"><a href="#上节回顾-3" class="headerlink" title="上节回顾"></a>上节回顾</h2><p>周末   —》复习 —》  明天也是我们   复习课   </p>
<ol>
<li>过老师的课件，把知识点  梳理 </li>
<li>根据自己的不足 ，在进行 代码 实操，拿 作业看看 是否现在有根会更好的解决方式</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">模块的本质其实就是一个Python文件</span><br><span class="line">	hello.py   &gt;&gt;&gt; 模块名就是hello</span><br><span class="line">模块的作用就是可以帮住我们更灵活的调用一些已经写好的功能/ 变量 ，在做项目的时候可以把功能写成模块，导入即可使用</span><br><span class="line"></span><br><span class="line">使用一个模块需要先进入导入操作:</span><br><span class="line">        <span class="keyword">import</span> 模块名</span><br><span class="line">        <span class="keyword">import</span> win32con</span><br><span class="line"> </span><br><span class="line">    如果一个模块名很长或不好理解,可以通过<span class="keyword">as</span>关键字给它取个别名</span><br><span class="line">        <span class="keyword">import</span> 模块名 <span class="keyword">as</span> 别名</span><br><span class="line">        <span class="keyword">import</span> numpy <span class="keyword">as</span>  np</span><br><span class="line">    <span class="keyword">from</span> 模块 <span class="keyword">import</span> 具体xxx <span class="keyword">as</span> </span><br><span class="line">    <span class="keyword">from</span> 模块  <span class="keyword">import</span> *    <span class="comment"># 不建议 全局导入</span></span><br><span class="line">    	 局限性</span><br><span class="line">        	__all__ = [<span class="string">&quot;模块名&quot;</span>, <span class="string">&quot;变量名&quot;</span>] <span class="comment"># 允许全局导入</span></span><br><span class="line">            _下划线</span><br><span class="line">            _变量名  保护变量</span><br><span class="line">            __变量名  私有变量</span><br><span class="line">            很容易重名，冲突</span><br><span class="line"> 	</span><br><span class="line">    </span><br><span class="line">    模块分为三类:</span><br><span class="line">        <span class="number">1.</span>内置模块 --&gt; python自带的  </span><br><span class="line">        <span class="number">2.</span>第三方模块 --&gt; 不是py自带的,是别人写好的python模块,使用之前需要下载.</span><br><span class="line">        <span class="number">3.</span>自定义模块 --&gt; 自己写的python文件</span><br><span class="line"> </span><br><span class="line">    当<span class="keyword">import</span>导入一个模块后,发生:</span><br><span class="line">        <span class="number">1.</span>运行这个模块的所有代码,确保没有报错</span><br><span class="line">        <span class="number">2.</span>生成一个名称空间,该名称空间与模块名同名  </span><br><span class="line">        <span class="number">3.</span>在当前运行程序里,连接上名称空间.然后就可以使用模块里的数据</span><br><span class="line"> </span><br><span class="line">    __main__作用:确保代码是以程序身份来执行的</span><br><span class="line">    python内置了一个方法,叫__name__:</span><br><span class="line">        如果py文件是以程序身份来运行,__name__为__main__       </span><br><span class="line">        如果py文件是以模块身份来运行,__name__为模块名</span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        <span class="comment"># 测试的代码</span></span><br><span class="line">        </span><br><span class="line">    包 --&gt; 模块的一种变体,文件夹</span><br><span class="line">        包的表现形式为一个文件夹,里面还有一个名为__init__.py 的文件</span><br><span class="line">        特性: 当导入这个文件夹里的模块时,__init__会自动执行</span><br><span class="line">        所以可以基于这个特性,把__init__当成是一个说明文档或配置文件</span><br><span class="line">    把一些功能统一的模块放到一个文件夹里进行管理</span><br><span class="line"> </span><br><span class="line">    跨文件夹导模块的方式:</span><br><span class="line">        <span class="keyword">from</span> 文件夹名 <span class="keyword">import</span> 模块名</span><br><span class="line">        <span class="keyword">from</span> 文件夹名.文件夹名 <span class="keyword">import</span> 模块名</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">from</span> utils <span class="keyword">import</span> test</span><br></pre></td></tr></table></figure>

<h2 id="time-–-时间模块"><a href="#time-–-时间模块" class="headerlink" title="time – 时间模块"></a>time – 时间模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 时间模块的学习</span></span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.time.time() 获取时间戳， 1970.1.1 距离现在过去了多少秒</span></span><br><span class="line"><span class="comment"># print(time.time())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.time.sleep(s) 让程序休眠s秒</span></span><br><span class="line"><span class="comment"># time.sleep(2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def fun1():</span></span><br><span class="line"><span class="comment"># 	print(&quot;程序开始运行了 &quot;)</span></span><br><span class="line"><span class="comment"># 	# 这里埋了 bug , 用户充钱了 就把睡眠注释了</span></span><br><span class="line"><span class="comment"># 	# time.sleep(3)</span></span><br><span class="line"><span class="comment"># 	print(&#x27;牛逼的程序运行完了,但是有点慢.说不定你充点钱,可以变快哦&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     # 以后做项目的时候,经常会有要求做项目优化,提升运行速度,减少占用内存</span></span><br><span class="line"><span class="comment">#     # 有人写完程序,就写个sleep让程序延时执行.伪装成这个程序运行没问题但是慢</span></span><br><span class="line"><span class="comment">#     # 以此来谈条件,价钱. 或者老板让你优化,直接修改sleep就可以了</span></span><br><span class="line"><span class="comment"># fun1()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.格式化输出时间 time.strftime()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># from datetime import datetime</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(datetime.strptime(r&quot;2011-1-12&quot;, &quot;%Y-%m-%d&quot;))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(time.strftime(&#x27;%Y - %m - %d&#x27;)) # 获取年 月 日</span></span><br><span class="line"><span class="comment"># print(time.strftime(&#x27;%Y - %m - %d %X&#x27;)) #获取年月日 时分秒</span></span><br><span class="line"><span class="comment"># print(time.strftime(&#x27;%x  %X&#x27;))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 4.以结构化的方式获取当前时间,后续可以通过re正则表达式取出想要的数据</span></span><br><span class="line"><span class="comment"># print(time.localtime())</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="random-–-随机数模块"><a href="#random-–-随机数模块" class="headerlink" title="random – 随机数模块"></a>random – 随机数模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. random.random() 随机生成 0-1之间的随机数</span></span><br><span class="line"><span class="comment"># rest = random.random()</span></span><br><span class="line"><span class="comment"># print(rest)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2.random.randint(起点,终点) 根据指定的范围生成 随机整数</span></span><br><span class="line"><span class="comment"># rest1 = random.randint(1,10)</span></span><br><span class="line"><span class="comment"># print(rest1)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 3.random.uniform(起点,终点) 根据指定的范围生成 随机小数</span></span><br><span class="line"><span class="comment"># c = random.uniform(13,14)</span></span><br><span class="line"><span class="comment"># print(c)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># random.choice(列表/元组)  随机生成容器中的元素</span></span><br><span class="line"><span class="comment"># rest2 = random.choice([&quot;剪刀&quot;,&quot;石头&quot;,&quot;布&quot;])</span></span><br><span class="line"><span class="comment"># print(rest2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"> <span class="comment"># random.shuffle(列表)  打乱一个列表里的排序</span></span><br><span class="line"><span class="comment"># li = [&quot;同学们&quot;,&quot;大家好&quot;,1314,520,True]</span></span><br><span class="line"><span class="comment"># random.shuffle(li)</span></span><br><span class="line"><span class="comment"># print(li)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def vif_code(num):</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     随机生成验证码</span></span><br><span class="line"><span class="comment">#     :param num:</span></span><br><span class="line"><span class="comment">#     :return:</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     code = &#x27;&#x27;</span></span><br><span class="line"><span class="comment">#     for i in range(num):</span></span><br><span class="line"><span class="comment">#         code += chr(random.randint(97,122))  # 随机生成 a-z 的字符</span></span><br><span class="line"><span class="comment">#     return code</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(vif_code(4))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(chr(97))   #  &quot;a&quot;</span></span><br><span class="line"><span class="comment"># print(ord(&quot;a&quot;))  #  97</span></span><br></pre></td></tr></table></figure>



<h2 id="sys-–-系统模块"><a href="#sys-–-系统模块" class="headerlink" title="sys – 系统模块"></a>sys – 系统模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 系统模块   ---&gt; 目前只需要了解就好</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. sys.path 获取Python的环境变量： 你的项目文件夹位置 + Python环境位置</span></span><br><span class="line"><span class="comment"># print(sys.path)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. sys.argv 获取当前文件所在的位置</span></span><br><span class="line"><span class="comment"># print(sys.argv)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 3. sys.version  获取当前Python的版本信息</span></span><br><span class="line"><span class="comment"># print(sys.version)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 4. sys.platform 获取当前操作系统的架构</span></span><br><span class="line"><span class="comment"># print(sys.platform)</span></span><br></pre></td></tr></table></figure>



<h2 id="OS-–-操作系统模块"><a href="#OS-–-操作系统模块" class="headerlink" title="OS – 操作系统模块"></a>OS – 操作系统模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 操作系统模块 os</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.getcwd() 获取当前文件所在的文件夹位置</span></span><br><span class="line"><span class="comment"># print(os.getcwd())  E:\zhongZhiTong\zzt课件\16常用模块</span></span><br><span class="line"><span class="comment"># print(__file__)  # E:/zhongZhiTong/zzt课件/16常用模块/os_demo.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.mkdir(&#x27;文件夹名&#x27;) 新建文件夹,</span></span><br><span class="line"><span class="comment"># os.mkdir(&#x27;test12/test&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.rmdir(&#x27;文件夹名&#x27;) 删除文件夹,里面如果有文件,不能删除</span></span><br><span class="line"><span class="comment"># os.rmdir(&#x27;test12/test&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.rename(原名,新名) 重命名</span></span><br><span class="line"><span class="comment"># os.rename(&#x27;a.txt&#x27;,&#x27;longzu.txt&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.remove(&#x27;文件名&#x27;) 删除文件</span></span><br><span class="line"><span class="comment"># os.remove(&#x27;longzu.txt&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换程序的执行位置</span></span><br><span class="line"><span class="comment"># os.chdir(&#x27;a&#x27;)  # os.chdir(相对路径/绝对路径) 切换程序的执行位置</span></span><br><span class="line"><span class="comment"># os.mkdir(&#x27;test&#x27;)  # os.mkdir() 创建文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.listdir()  输出当前文件夹里的所有文件名</span></span><br><span class="line"><span class="comment"># print(os.listdir())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取上一级的目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(os.path.dirname(__file__))  # os.getcwd()</span></span><br><span class="line"><span class="comment"># print(os.path.dirname(os.path.dirname(__file__)))  # E:/zhongZhiTong/zzt课件</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># os.rmdir(&quot;a/test&quot;)</span></span><br><span class="line"><span class="comment"># os.rmdir(&quot;a&quot;)</span></span><br><span class="line"><span class="comment"># print(os.path.exists(&quot;a.txt&quot;)) #  存在返回True， 不存在返回False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.path.join() # 拼接路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rest = os.path.join(&quot;a&quot;, &quot;test&quot;, &quot;b&quot;)</span></span><br><span class="line"><span class="comment"># print(rest)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># if os.path.exists(rest):  # a\test\b</span></span><br><span class="line"><span class="comment">#     # 如果存在 进行操作</span></span><br><span class="line"><span class="comment">#     print(&quot;存在此路径了,不需要创建&quot;)</span></span><br><span class="line"><span class="comment"># else:</span></span><br><span class="line"><span class="comment">#     # os.mkdir()       # 这个方法 只能创建一层路径</span></span><br><span class="line"><span class="comment">#     os.makedirs(rest)  # 这个方法可以创建多层文件夹</span></span><br><span class="line"><span class="comment">#     print(f&quot;创建此路径&#123;rest&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># os.system(cmd指令) 运行cmd指令</span></span><br><span class="line"><span class="comment"># os.system(&#x27;shutdown -s -t 10086&#x27;)</span></span><br><span class="line"><span class="comment"># os.system(&#x27;shutdown -a&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(3):</span></span><br><span class="line"><span class="comment">#     os.system(&#x27;start cmd&#x27;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="json-–-序列化模块"><a href="#json-–-序列化模块" class="headerlink" title="json – 序列化模块"></a>json – 序列化模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">json模块</span></span><br><span class="line"><span class="string">json是一种文件的存储格式,主要作用就是用来存数据</span></span><br><span class="line"><span class="string">它的优点是可以被大部分编程语言识别,操作. 并保留原来的类型</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">json的优点 --&gt; 跨语言/跨平台 --&gt; 和多个编程语言,操作系统都有较好的兼容性</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">序列化/反序列:</span></span><br><span class="line"><span class="string">    序列数据 --&gt; 机器码(计算机最底层的0和1) --&gt; 文件在传输/存储的时候是用的序列数据.</span></span><br><span class="line"><span class="string">    反序列数据 --&gt; 程序员写的代码 --&gt; 文件在编辑的时候,使用反序列数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样写会丢失原有的数据类型.最后都是str字符串</span></span><br><span class="line"><span class="comment"># a = [1,2,3]</span></span><br><span class="line"><span class="comment"># b = &#123;&#x27;姓名&#x27;:&#x27;韦小宝&#x27;,&#x27;爱好&#x27;:&#x27;游戏&#x27;&#125;</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># with open(&#x27;a.txt&#x27;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(str(a))</span></span><br><span class="line"><span class="comment">#     f.write(str(b))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 序列号数据,把数据变成机器码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with open(&quot;a.txt&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:</span></span><br><span class="line"><span class="comment">#     rest = f.read()</span></span><br><span class="line"><span class="comment">#     print(rest)</span></span><br><span class="line"><span class="comment">#     print(type(rest))</span></span><br><span class="line"></span><br><span class="line">names = &#123;<span class="string">&#x27;姓名&#x27;</span>: <span class="string">&#x27;韦小宝&#x27;</span>, <span class="string">&#x27;爱好&#x27;</span>: <span class="string">&#x27;游戏&#x27;</span>&#125;</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # json.dumps(数据) 把数据反序列化</span></span><br><span class="line"><span class="comment"># json_data = json.dumps(names)</span></span><br><span class="line"><span class="comment"># print(json_data)</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># # # 序列化,读取数据  json.loads(反序列化数据)</span></span><br><span class="line"><span class="comment"># data = json.loads(json_data)</span></span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"><span class="comment"># print(data.keys())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将反序列化数据写入文件</span></span><br><span class="line"><span class="comment"># with open(&#x27;a.json&#x27;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     json.dump(names,f) #写入数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># with open(&#x27;a.json&#x27;,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     # print(f)</span></span><br><span class="line"><span class="comment">#     stu_dict = json.load(f)</span></span><br><span class="line"><span class="comment">#     print(stu_dict.keys())</span></span><br><span class="line"><span class="comment">#     print(type(stu_dict))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># json的本质 --&gt; 在不丢失数据类型特性的情况下保存数据,以及操作使用数据</span></span><br><span class="line"><span class="comment"># 就不会让所有的数据都变成str</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="hashlib-–-哈希模块"><a href="#hashlib-–-哈希模块" class="headerlink" title="hashlib – 哈希模块"></a>hashlib – 哈希模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">哈希模块 hash</span></span><br><span class="line"><span class="string">哈希是一种规则,可以接受一个值,来生成一个哈希数据. 作用主要用来加密数据</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    就像是算命一样,你跟算命先生说一句话.他给说一堆</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    哈希的本质是算法,规则.用的比较多的也是体现在数据加密上</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    特点:</span></span><br><span class="line"><span class="string">        1.传入的内容是一样的,hash的值也是一样的</span></span><br><span class="line"><span class="string">           你去算命和别人去算命,说得好一样.得到的结果也一样</span></span><br><span class="line"><span class="string">        2.hash值正常来说,破解难度较大.</span></span><br><span class="line"><span class="string">          算命的过程比较玄学,很难理解</span></span><br><span class="line"><span class="string">        3.不管传的数据或文件有多少,多大.最后得到的哈希值长度都是32位</span></span><br><span class="line"><span class="string">          不管你和算命先生说什么,最后他只解答32个字</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    注册登录账号的原理流程:</span></span><br><span class="line"><span class="string">        注册: 1.输入密码 2.加盐+哈希加密 3.得到加密值 4.保存</span></span><br><span class="line"><span class="string">        登录: 1.输入密码 2.加盐+哈希加密 3.得到加密值 4.匹配</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    加油: 在要生成的哈希值的基础上.添加一串指令</span></span><br><span class="line"><span class="string">        原密码 --&gt; tstxtdwsd --&gt; + a123456</span></span><br><span class="line"><span class="string">        tstxtdwsda123456 --&gt; 拿他去加密   为什么要这么做??? 安全性</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    md5 = md5是目前一个比较主流的加密方式.用hash5来基于md5算法进行数据加密</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    很多所谓的wifi破解 暴力破解</span></span><br><span class="line"><span class="string">    在网上收集一个常见wifi密码合集. 用个模块,尝试链接wifi</span></span><br><span class="line"><span class="string">    把密码合集里的 ,密码一个个来试一个个来撞</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    hash代码不需要各位马上理解.知道有这个东西即可</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># import hashlib</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # # 通过md5加密生成一个哈希对象. a就是一个哈希的对象</span></span><br><span class="line"><span class="comment"># a = hashlib.md5(&#x27;大家很棒&#x27;.encode())</span></span><br><span class="line"><span class="comment"># print(a) # 输出a的内存地址</span></span><br><span class="line"><span class="comment"># print(type(a))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # # # 把哈希值赋值给b</span></span><br><span class="line"><span class="comment"># b = a.hexdigest() # 7a7c88b1c4731447959b8bdecf4ecdcb</span></span><br><span class="line"><span class="comment"># print(b)</span></span><br><span class="line"><span class="comment"># print(len(b))</span></span><br></pre></td></tr></table></figure>



<h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><p><a href="https://www.cnblogs.com/tina-python/p/5508402.html">资料</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 资料 https://www.cnblogs.com/tina-python/p/5508402.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># re模块  只针对 字符串</span></span><br><span class="line"><span class="comment"># rest = int(input(&quot;输入数字&quot;))  #  python</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># - compile：编译正则表达式</span></span><br><span class="line"><span class="comment"># - findall：查找所有满足条件的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(re.findall(r&#x27;\d+&#x27;,&#x27;one1two2three3four4&#x27;))</span></span><br><span class="line"><span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br><span class="line"><span class="comment"># print(r&quot;\n123&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kk = re.compile(r&#x27;\d+&#x27;)</span></span><br><span class="line"><span class="comment"># print(re.findall(kk,&quot;one123&quot;))</span></span><br><span class="line"><span class="comment"># # #[&#x27;123&#x27;]</span></span><br><span class="line"><span class="comment"># # print(re.findall(r&#x27;\d+&#x27;,&quot;one123&quot;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># - match，从起始位置开始匹配，匹配成功返回一个对象，未匹配成功返回None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># content = &#x27;Hello 123 4567 god is python&#x27;</span></span><br><span class="line"><span class="comment"># result = re.match(r&#x27;Hello\s\d\d\d\s\d&#123;4&#125;\s\w&#123;3&#125;.*python$&#x27;,content)</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># \s匹配任意的空白字符的，\d可以匹配任意的数字的</span></span><br><span class="line"><span class="comment"># 后面有4567，写4个\d太麻烦了，\d&#123;4&#125;</span></span><br><span class="line"><span class="comment"># \w匹配字母或者下划线</span></span><br><span class="line"><span class="comment"># 后面一长串字符不想写了。直接用.来全部代替,匹配任意字符</span></span><br><span class="line"><span class="comment"># * 匹配0个或多个表达式</span></span><br><span class="line"><span class="comment"># 也就是.*可以匹配任意的字符除了换行符</span></span><br><span class="line"><span class="comment"># 用python$制定正则表达式的结尾</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(result.group(0),&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;)</span></span><br><span class="line"><span class="comment"># print(len(content))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shift + 4</span></span><br><span class="line"><span class="comment"># - search，浏览整个字符串去匹配第一个，未匹配成功返回None</span></span><br><span class="line"><span class="comment"># content = &#x27;Hello 123 4567 god is python&#x27;</span></span><br><span class="line"><span class="comment"># result = re.search(r&#x27;\d&#123;4&#125;\s\w&#123;3&#125;.*python$&#x27;,content)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(result.group())</span></span><br><span class="line"><span class="comment"># print(len(content))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - sub：根据规则替换其他字符串</span></span><br><span class="line"><span class="comment"># import re</span></span><br><span class="line"><span class="comment"># text = &quot;Python is a good Python website&quot;</span></span><br><span class="line"><span class="comment"># print(re.sub(r&#x27;\s+&#x27;, &#x27;-&#x27;, text))  # \s 匹配 空格 换行符， 回车符</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># print(&quot;replace&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;)</span></span><br><span class="line"><span class="comment"># print(text.replace(&quot; &quot;,&quot;-&quot;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # - split：根据规则分割字符串</span></span><br><span class="line"><span class="comment"># text = &quot;Python is a good Python website&quot;</span></span><br><span class="line"><span class="comment"># print(re.split(r&#x27;a&#x27;, text))</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># print(&quot;字符串方法 split&quot;)</span></span><br><span class="line"><span class="comment"># print(text.split(&#x27;a&#x27;))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="pathlib模块"><a href="#pathlib模块" class="headerlink" title="pathlib模块"></a>pathlib模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path  <span class="comment"># Python3.7 之后推荐的，他比os模块更好</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 获取当前工作目录</span></span><br><span class="line"><span class="comment"># print(Path.cwd())</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 获取上一级目录  os.path.dirname()</span></span><br><span class="line"><span class="comment"># print(Path(r&quot;D:\17938\Documents\zzt课件\16常用模块\a.json&quot;).parent)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 如果你只想得到字符串表示，不想要 WindowsPath 对象，可以用 str() 转化：</span></span><br><span class="line"><span class="comment"># print(str(Path.cwd()))</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># # # 获取当前文件路径</span></span><br><span class="line"><span class="comment"># print(Path(__file__).resolve())  # 绝对路径</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># # # 获取绝对路径</span></span><br><span class="line"><span class="comment"># print(Path(&quot;a.txt&quot;).resolve())</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 获取文件属性比如文件大小，创建时间，修改时间等等。</span></span><br><span class="line"><span class="comment"># file = Path(&#x27;a.json&#x27;)</span></span><br><span class="line"><span class="comment"># print(file.stat())</span></span><br><span class="line"><span class="comment"># print(file.stat().st_size)</span></span><br><span class="line"><span class="comment"># print(file.stat().st_atime)</span></span><br><span class="line"><span class="comment"># print(file.stat().st_ctime)</span></span><br><span class="line"><span class="comment"># print(file.stat().st_mtime)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 是否为文件</span></span><br><span class="line"><span class="comment"># print(Path(&quot;a.json&quot;).is_file())  # True</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 是否为文件夹</span></span><br><span class="line"><span class="comment"># print(Path(&quot;demo.txt&quot;).is_dir())  # False</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># # # 判断是否存在</span></span><br><span class="line"><span class="comment"># print(Path(&quot;demo.txt&quot;).exists())</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># #</span></span><br><span class="line"><span class="comment"># # # 删除文件夹</span></span><br><span class="line"><span class="comment"># print(Path(r&quot;a\test&quot;).rmdir())  # None</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 删除文件 path.unlink, 危险操作。</span></span><br><span class="line"><span class="comment"># # Path(r&#x27;a.json&#x27;).unlink()</span></span><br><span class="line"><span class="comment"># print()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># p</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="拓展分享"><a href="#拓展分享" class="headerlink" title="拓展分享"></a>拓展分享</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MVC开发模式 --&gt; 开发时的一种设计理念</span><br><span class="line">		Model --&gt; 模块层 --&gt; 主要处理数据相关的东西(数据库,json)</span><br><span class="line">		View --&gt; 视图层 --&gt; 主要处理用户体验,给用户看的东西</span><br><span class="line">		Controller --&gt; 控制器层 --&gt; 主要处理后台功能.实现各种功能</span><br><span class="line">	以前开发一个项目的时候并没有具体的分工,导致有的时候就很乱,出现了bug各种甩锅.所以有前辈总结了MVC开发模式</span><br><span class="line">	就是在开发项目时分为M,V,C三层.每层都有自己的任务,互有联系,但互不干涉. 开发人员只需要专注好自己负责的部分就好</span><br><span class="line">	出现了问题,也更好找到问题所在.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Django web框架 的开发模式也是 MVT  也是借鉴了MVC设计的</span><br><span class="line">	model  &gt;&gt;&gt;&gt; 模型层  主要处理数据相关的东西 (数据库)</span><br><span class="line">	view   &gt;&gt;&gt;&gt; 视图层  主要处理后台功能，实现各种功能</span><br><span class="line">	template  &gt;&gt;&gt;&gt;&gt;  模板层   主要是处理用户体验，给用户看的东西</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">这次做项目的时候. 用的知识点都是以前学过的</span><br><span class="line">但是这次的开发标准正式</span><br><span class="line">	区分好几个文件夹.每个文件夹有不同的功能</span><br><span class="line">	文件夹里的文件名,变量名,函数名都会更加讲究规范</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">留一道题,你们留给我的 --&gt; 你们可以把学习过程中出现的一些问题,疑虑都留言发给我. 我看到会尽我所能的解答</span><br></pre></td></tr></table></figure>

<h1 id="六、复习拓展"><a href="#六、复习拓展" class="headerlink" title="六、复习拓展"></a>六、复习拓展</h1><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数对象 --&gt; 把函数当成一个普通的数据来使用</span><br><span class="line">		函数对象存放 --》  数据（变量） 代码（函数代码）</span><br><span class="line">        <span class="number">1.</span>用函数来赋值</span><br><span class="line">            <span class="number">1.</span>把函数本身赋值给一个变量.变量就相当于函数的分身</span><br><span class="line">                a = <span class="built_in">print</span> <span class="comment"># 把print函数的功能复制一份给了a. 以后a也可以用来输出</span></span><br><span class="line">            <span class="number">2.</span>把函数的返回值赋值给一个变量</span><br><span class="line">                a = <span class="built_in">print</span>() <span class="comment"># 让函数以运行下赋值, 运行函数,并把返回值赋给数据</span></span><br><span class="line">        <span class="number">2.</span>可以把函数放到数据容器来(列表,元组,集合,字典,函数)</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">                <span class="keyword">pass</span>  <span class="comment"># pass 占位的作用</span></span><br><span class="line">            li = [<span class="number">1</span>,<span class="number">2</span>,fun]</span><br><span class="line">            dict1 = &#123;<span class="number">1</span>:fun&#125;</span><br><span class="line">        <span class="number">3.</span>可以用函数作为返回值(闭包)</span><br><span class="line">        <span class="number">4.</span>可以用函数作为参数     <span class="number">3</span>+<span class="number">4</span> --&gt; 装饰器</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">                <span class="keyword">return</span> a+b	</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">num</span>):</span><br><span class="line">                <span class="built_in">print</span>(num)  <span class="comment"># 666+520 </span></span><br><span class="line">            fun(add(<span class="number">666</span>,<span class="number">520</span>))</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">    名称空间: 在python中一块专门用来存储名字的区域.默认情况下有三块名称空间</span><br><span class="line">        内建名称空间:   存储Python的内置函数,内置变量,它会随着python程序启动而生成</span><br><span class="line">        全局名称空间:   存储用户在外层定义的名字(变量名,函数名)它会随着python程序启动而生成</span><br><span class="line">        局部名称空间:   存储用户在函数内定义的名字(变量,形参,函数) 它会随着函数的调用而生成</span><br><span class="line">    作用域: 一个数据,能够被使用的范围:</span><br><span class="line">        全局 --&gt; 整个程序里都可以用</span><br><span class="line">        局部 --&gt; 程序里部分位置才能使用(函数内)</span><br><span class="line">        <span class="keyword">global</span> --&gt; 提权,把一个数据从局部变为全局</span><br><span class="line">        <span class="keyword">nonlocal</span> --&gt;  私有化,把一个数据降权</span><br><span class="line">    闭包: 在一个嵌套函数中,用内层函数操作外层函数得到的数据. 属于间接修改</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">外函数</span>(<span class="params">参数</span>):</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">内函数</span>():</span><br><span class="line">                操作</span><br><span class="line">            <span class="keyword">return</span> 内函数</span><br><span class="line">        单纯的闭包其实是没啥意义,闭包一般是为了实现装饰器来写的</span><br><span class="line">    装饰器: 在不修改源代码/调用方式的情况下,给一个函数添加功能.</span><br><span class="line">          实现原理就是通过闭包,把要添加功能的函数传递进来,在内层函数中调用,并在内层函数写上新增功能代码.最后把内层函数返回出去. --&gt; 得到了被添加功能的函数</span><br><span class="line">          写好的装饰器可以通过 @语法糖 放到要添加功能的函数名上.就可以实现功能追加</span><br><span class="line">    递归: 一个函数,通过自己调用自己的方式来解决一些问题</span><br><span class="line">        专业开发中用的相对较少,性能较弱 --&gt; 平时练习可以用</span><br><span class="line">    迭代器<span class="built_in">iter</span>:</span><br><span class="line">        对一堆数据进行更新迭代的操作:</span><br><span class="line">        说人话:把很多的数据,有序的取出来使用</span><br><span class="line">        <span class="keyword">for</span>循环原理: 把一个有很多数据的对象转换为迭代器,再把里面的数据一个个取出来使用</span><br><span class="line">    生成器<span class="keyword">yield</span>:</span><br><span class="line">        是一个自定义的迭代器,在函数里有个关键字<span class="keyword">yield</span></span><br><span class="line">        生成一个自定义的迭代器,自己指定规则.生成指定的数据.</span><br><span class="line">        生成器一般是直接用生成器表达式来创建</span><br><span class="line">  </span><br><span class="line">    文件操作: </span><br><span class="line">        用python来操作电脑文件</span><br><span class="line">        文件操作三要素:  打开文件 操作文件 关闭文件</span><br><span class="line">        为了避免忘记关闭文件,一般会用<span class="keyword">with</span>上下文管理器来写代码 <span class="keyword">with</span> <span class="built_in">open</span></span><br><span class="line">        操作模式 &amp;&amp; 文件属性</span><br><span class="line">        w: write 写入 <span class="comment"># 如果有数据就覆盖</span></span><br><span class="line">        a: append 追加 <span class="comment"># 如果有数据就追加</span></span><br><span class="line">        r: read 读取 <span class="comment"># 查看数据</span></span><br><span class="line">        b: byte <span class="comment"># 字节码</span></span><br><span class="line">        t: text <span class="comment"># 文本</span></span><br><span class="line">							</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;路径+文件名&#x27;</span>,<span class="string">&#x27;操作模式&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="string">&#x27;写入数据&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(f.read()) <span class="comment"># 读取数据</span></span><br><span class="line">    模块: 所谓的模块,指的其实就是一个python文件.</span><br><span class="line">        模块的好处就是避免重复造轮子 --&gt; 有的功能别人已经给你写好了,你就不用写了.拿来用就好</span><br><span class="line"></span><br><span class="line">        模块分为三种:</span><br><span class="line">            内置模块 --&gt; random,time,os,sys,json --&gt; python自带的模块</span><br><span class="line">            第三方模块 --&gt; pygame,requests,TensorFlow --&gt; 别人写好的模块,要先下载</span><br><span class="line">            自定义模块 --&gt; 用户自己写的模块</span><br><span class="line"></span><br><span class="line">        下载模块使用pip下载工具 --&gt; 在cmd中输入 pip install 库名</span><br><span class="line">                                             pip install pywin32</span><br><span class="line"></span><br><span class="line">    模块的基本使用:</span><br><span class="line">        <span class="number">1.</span>导入模块 -- <span class="keyword">import</span></span><br><span class="line">            <span class="keyword">import</span> 模块名</span><br><span class="line">            <span class="keyword">import</span> time</span><br><span class="line">            <span class="keyword">import</span> win32gui</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">import</span> 模块名 <span class="keyword">as</span> 别名 <span class="comment"># 当模块名过长时可以取个别名</span></span><br><span class="line">            <span class="keyword">import</span> win32process <span class="keyword">as</span> pro</span><br><span class="line"></span><br><span class="line">        <span class="number">2.</span>使用模块</span><br><span class="line">            模块名.变量名   <span class="comment"># 使用模块里的变量</span></span><br><span class="line">            模块名.函数名() <span class="comment"># 调用模块里的函数</span></span><br><span class="line"></span><br><span class="line">    当你导入模块后发生的事:</span><br><span class="line">        <span class="number">1.</span>先把模块文件运行一遍,确保没有异常</span><br><span class="line">        <span class="number">2.</span>生成一个名称空间,把模块里的名字存进去, 名称空间名就是模块名</span><br><span class="line">        <span class="number">3.</span>让当前运行程序连接名称空间.后续就可以通过 模块名.  的方式使用里面的数据</span><br><span class="line"></span><br><span class="line">    如何区分一个python文件是模块还是启动程序?   通过__name__</span><br><span class="line">        python有一个内置变量叫__name__  它只有两种结果</span><br><span class="line">            <span class="number">1.</span>该文件作为模块运行时,__name__的值 就是模块名</span><br><span class="line">            <span class="number">2.</span>该文件作为程序运行时,__name__的值 就是__main__</span><br><span class="line">        因此可以把一些测试代码放到main判断中,当文件是以程序身份执行时,才会运行</span><br><span class="line">            <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            强调: python的main和其他语言的main函数,主程序不是一个东西.不是作为程序的入口</span><br><span class="line"></span><br><span class="line">    包: 文件夹,把一些功能统一的模块放到一起,更好管理.里面会生成一个名为__init__.py的文件</span><br><span class="line">        当导入这个包里的模块时,init的代码也会执行.所以可以把一些配置信息/使用说明写到init里</span><br><span class="line">    <span class="keyword">from</span> 包名 <span class="keyword">import</span> * <span class="comment"># 全局导入</span></span><br><span class="line">    <span class="comment"># 在__init__.py 里面定义</span></span><br><span class="line">    __all__ = [<span class="string">&quot;模块名&quot;</span>]  <span class="comment">#  这里写上的东西</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="程序断点-debug"><a href="#程序断点-debug" class="headerlink" title="程序断点(debug)"></a>程序断点(debug)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##程序断点(debug)</span></span><br><span class="line">    https://www.cnblogs.com/dalaoban/p/<span class="number">11394583.</span>html</span><br><span class="line">    https://www.cnblogs.com/yoyo1216/p/<span class="number">15786974.</span>html</span><br><span class="line"></span><br><span class="line">    一般情况下我们的程序是直接运行完毕,得到结果.  我们看到的是结果.过程看不到的</span><br><span class="line">    断点就是可以设置一个起点,从起点开始.让程序 一步一步的执行.让我们可以看到里面的数据,运行实时的情况. 并进行对应的调试调整</span><br><span class="line"></span><br><span class="line">    用法就是在行号右边点下. 点出红点</span><br><span class="line">    右键,点击debug</span><br><span class="line">    快捷键F7 下一步</span><br></pre></td></tr></table></figure>

<h2 id="主流语言技术栈说明"><a href="#主流语言技术栈说明" class="headerlink" title="主流语言技术栈说明"></a>主流语言技术栈说明</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##主流语言技术栈说明 --&gt; 纯拓展.不需要死记硬背</span></span><br><span class="line">    java:   java很牛逼,但是很卷.学的人会的人太多了</span><br><span class="line">        <span class="number">1.</span>大数据 --&gt; spark/hadoop 就是用java来写的(java非常适合处理 大批量数据)</span><br><span class="line">        <span class="number">2.</span>web后台开发 --&gt; spring框架 spring全家桶 做一个网站的后台</span><br><span class="line">        <span class="number">3.</span>大型服务器部署 --&gt; springCloud 一般会结合分布式,云服务器来部署服务器,用java做后台服务器一般情况下性能更好</span><br><span class="line">        </span><br><span class="line">    C/C++: C/C++很牛逼,但是很难,能学明白,能教的人太少了</span><br><span class="line">        <span class="number">1.</span>硬件开发:芯片开发,单片机,嵌入式</span><br><span class="line">        <span class="number">2.</span>系统底层开发/windows编程: 很多的操作系统都是用C来写的</span><br><span class="line">        <span class="number">3.</span>服务器开发: 写unix/Linux服务器软件 --&gt; 处理后台数据</span><br><span class="line">        <span class="number">4.</span>逆向开发: 破解加密,网络安全渗透,外挂,反破解. 主要基于内存做操作</span><br><span class="line">        <span class="number">5.</span>游戏开发: (UE虚幻引擎 cocos) LOL 吃鸡  拳皇</span><br><span class="line">        <span class="number">6.</span>客户端开发: 可视化界面开发mfc/QT --&gt; 写个QQ,酷狗,网易云这样的客户端工具</span><br><span class="line">    C<span class="comment">#: 微软公司一开始为了对标干掉java而研发的编程语言.所以大部分都是模仿的java.但是没干过</span></span><br><span class="line">        <span class="number">1.j</span>ava能做的它基本能做.但是基本都弱一点</span><br><span class="line">        <span class="number">2.</span>游戏开发 (unity3D)</span><br><span class="line">        <span class="number">3.</span>windows环境下的软件开发 --&gt; 性能会更好,更好用</span><br><span class="line">        </span><br><span class="line">    php:</span><br><span class="line">        小体量的网页网站开发 --&gt; 小型的网站 --&gt; 个人博客啥的是OK</span><br><span class="line">    golang:</span><br><span class="line">        对标C/C++,也是一个主要用来做服务器开发为主的语言. 近几年强势. 可以关注下</span><br><span class="line">        go主打 大道至简 天生支持高并发  可以做区块链 </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    前端(html,css,JavaScript):</span><br><span class="line">        <span class="number">1.</span>写网页网站 --&gt; 给用户看的部分</span><br><span class="line">        <span class="number">2.</span>写小程序   --&gt; 给用户看的部分  </span><br><span class="line">        <span class="number">3.</span>写h5程序  --&gt; h5游戏,各种js进阶的网页</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h2 id="项目开发流程"><a href="#项目开发流程" class="headerlink" title="项目开发流程"></a>项目开发流程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##项目开发流程</span></span><br><span class="line">    你们觉得在开发项目时,可能会出现什么毛病???</span><br><span class="line">        <span class="number">1.</span>bug满天飞</span><br><span class="line">        <span class="number">2.</span>频繁改需求,重新调整</span><br><span class="line">        <span class="number">3.</span>写着写着没思路</span><br><span class="line">        </span><br><span class="line">    养成一个好习惯:</span><br><span class="line">        <span class="number">1.</span>先做好的项目框架分析:     </span><br><span class="line">            我的项目由什么功能组成,可以拆分成多少个部分,模块</span><br><span class="line">        <span class="number">2.</span>在生活中找灵感,整理思路 --&gt; 编程源自于生活</span><br><span class="line">        <span class="number">3.</span>写一份说明文档 --&gt; 项目使用说明,变量,函数说明. 注意事项</span><br><span class="line">        <span class="number">4.</span>脑子里先大概脑补下,做好的样子是怎样的.</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##项目环境搭建</span></span><br><span class="line">    这次的项目并没有涉及到新的知识点,而是对于之前的知识点的积累使用</span><br><span class="line">    但是里面的开发规格更细致. 命名,功能区分等等划分的更加详细 --&gt; 分工明确</span><br><span class="line">    正式项目,软件不管是变量/文件夹命名都是有一定的规律. --&gt; 见名知意</span><br><span class="line"></span><br><span class="line">    ATM-<span class="number">73</span></span><br><span class="line">        api -- 应用程序编程接口 -- 作案工具,一般负责存业务逻辑相关的功能. 存钱,取钱,流水</span><br><span class="line">            user_i.py --&gt; 用户的业务逻辑  </span><br><span class="line">            bank_i.py --&gt; 银行的业务逻辑  </span><br><span class="line">        config -- 配置信息(数据库账号信息,python版本信息,模块说明,数据存储位置)</span><br><span class="line">            setting.py --&gt; 这个项目的配置信息</span><br><span class="line">        core -- 核心文件.主要写用户交互内容 --&gt; 给用户看的,操作的部分写在这</span><br><span class="line">            src.py --&gt; 功能文件,给用户看的部分</span><br><span class="line">        DB -- database数据 存储/操作数据. 因为还没学习数据库,数据先用json文件保存到本地</span><br><span class="line">            db_handle.py --&gt; 数据处理层,负责对数据进行增删改查</span><br><span class="line">            user_data --&gt; 负责保存用户数据的文件夹</span><br><span class="line">        lib -- 功能模块,把一些功能插件写到这. 装饰器</span><br><span class="line">            common.py --&gt; 把项目中会用到的功能插件放进来. 判断是否登录,验证码生成,密码哈希加密</span><br><span class="line">        run.py --&gt; 项目的启动文件</span><br><span class="line">        readme.txt --&gt; 项目的说明文档</span><br><span class="line"></span><br><span class="line">    作业: </span><br><span class="line">        把上面这段东西,你们自己敲一遍.</span><br><span class="line"><span class="number">1.</span>注册</span><br><span class="line"><span class="number">2.</span>登录</span><br><span class="line"><span class="number">3.</span>余额</span><br><span class="line"><span class="number">4.</span>存款</span><br><span class="line"><span class="number">5.</span>取款</span><br><span class="line"><span class="number">6.</span>流水</span><br><span class="line"><span class="number">0.</span>退出</span><br></pre></td></tr></table></figure>







































]]></content>
  </entry>
  <entry>
    <title>Python基础</title>
    <url>/2022/10/26/Python%E6%88%90%E9%95%BF%E8%AE%B02/</url>
    <content><![CDATA[<h3 id="python基础2"><a href="#python基础2" class="headerlink" title="python基础2"></a><em>python基础2</em></h3><span id="more"></span>

<h1 id="一-流程控制语句"><a href="#一-流程控制语句" class="headerlink" title="一.流程控制语句"></a>一.流程控制语句</h1><p>重点说明这节课的重要性，分水岭，进阶到逻辑性的东西</p>
<h2 id="上节回顾"><a href="#上节回顾" class="headerlink" title="上节回顾"></a>上节回顾</h2><ul>
<li>set集合 用<code>&#123;&#125;</code> 包裹的数据（字符串，数字，元组）就是集合，特点 ，去重，无序的，<ul>
<li>{“韦小宝”, 12, (123,999)}</li>
</ul>
</li>
<li>dict字典 用<code>&#123;&#125;</code> 包裹的 数据 （键值对 ）就是 字典， 特点 数据是以键值对类型的， 什么数据都可以放， <ul>
<li>{“name”:”阿飞”, “age”: 18}</li>
</ul>
</li>
</ul>
<h2 id="程序三大流程控制"><a href="#程序三大流程控制" class="headerlink" title="程序三大流程控制"></a>程序三大流程控制</h2><p>流程控制即控制流程，具体指控制程序的执行流程，而程序的执行流程分为三种结构：<strong>顺序结构、选择结构、循环结构</strong></p>
<ul>
<li>顺序结构就是让程序按照从头到尾的顺序依次执行每一条 Python 代码，之前我们写的代码都是顺序结构</li>
<li>选择结构也称分支结构，就是让程序“拐弯”，有选择性的执行代码</li>
<li>循环结构就是让程序“重新做一遍”，不断地重复执行同一段代码。</li>
</ul>
<h2 id="分支结构-判断语句"><a href="#分支结构-判断语句" class="headerlink" title="分支结构(判断语句)"></a>分支结构(判断语句)</h2><p>大家想一想</p>
<p>生活中有哪些判断场景</p>
<ul>
<li><p>火车站安检</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/28808270/1654168499051-b35b8c03-c8b2-45cb-8b42-291b37d3fef7.png?x-oss-process=image/resize,w_812,limit_0" alt="image.png"> </p>
</li>
<li><p>上网吧</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/28808270/1654168719834-7545adb0-09c2-4ca9-9831-2d91b2f525b1.png?x-oss-process=image/resize,w_481,limit_0" alt="image.png"> </p>
</li>
<li><p>密码判断</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/28808270/1654168875511-11a0b8db-5378-46b9-9b8c-eec2b57d5789.png?x-oss-process=image/resize,w_257,limit_0" alt="image.png"></p>
</li>
</ul>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ul>
<li>如果某些条件满足，才能做某件事情；条件不满足时，则不能做，这就是所谓的判断。</li>
<li>不仅生活中有，在软件开发中”判断”功能也经常会用到</li>
</ul>
<h3 id="单分支-if"><a href="#单分支-if" class="headerlink" title="单分支(if)"></a>单分支(if)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">如果 </span><br><span class="line"><span class="keyword">if</span> 要判断的条件:  <span class="comment"># True 、False </span></span><br><span class="line">    条件成立时，要做的事情</span><br></pre></td></tr></table></figure>

<p>demo1:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;if 判断开始&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;已成年了，可以上网了&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;if 判断结束&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>demo2:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;if 判断开始&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;已成年了，可以上网了&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;if 判断结束&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="小总结："><a href="#小总结：" class="headerlink" title="小总结："></a>小总结：</h4><ul>
<li>以上2个demo仅仅是age变量的值不一样，导致结果却不同；能够看得出if判断语句的作用：就是当满足一定条件时才会执行<strong>代码块(也就是条件判断)</strong>(语句，否则就不执行代码块语句。</li>
<li>注意：代码的缩进为一个tab键，或者4个空格</li>
</ul>
<h4 id="想一想"><a href="#想一想" class="headerlink" title="想一想"></a>想一想</h4><p>判断age大于或者等于18岁使用的是 &gt;&#x3D;，如果是其他判断，还有哪些呢？</p>
<h2 id="比较运算符和-逻辑运算符"><a href="#比较运算符和-逻辑运算符" class="headerlink" title="比较运算符和 逻辑运算符"></a>比较运算符和 逻辑运算符</h2><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>python中的比较运算符如下表</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>描述</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;&#x3D;</td>
<td>检查两个操作数的值是否相等，如果是则条件变为真。</td>
<td>如a&#x3D;3,b&#x3D;3，则（a &#x3D;&#x3D; b) 为 True</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>检查两个操作数的值是否相等，如果值不相等，则条件变为真。</td>
<td>如a&#x3D;1,b&#x3D;3，则(a !&#x3D; b) 为 True</td>
</tr>
<tr>
<td>&gt;</td>
<td>检查左操作数的值是否大于右操作数的值，如果是，则条件成立。</td>
<td>如a&#x3D;7,b&#x3D;3，则(a &gt; b) 为 True</td>
</tr>
<tr>
<td>&lt;</td>
<td>检查左操作数的值是否小于右操作数的值，如果是，则条件成立。</td>
<td>如a&#x3D;7,b&#x3D;3，则(a &lt; b) 为 False</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>检查左操作数的值是否大于或等于右操作数的值，如果是，则条件成立。</td>
<td>如a&#x3D;3,b&#x3D;3，则(a &gt;&#x3D; b) 为 True</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>检查左操作数的值是否小于或等于右操作数的值，如果是，则条件成立。</td>
<td>如a&#x3D;3,b&#x3D;3，则(a &lt;&#x3D; b) 为 True</td>
</tr>
</tbody></table>
<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>逻辑表达式</strong></th>
<th><strong>描述</strong></th>
<th><strong>实例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>x and y</td>
<td>布尔”与”：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。</td>
<td>True and False， 返回 False。</td>
</tr>
<tr>
<td>or</td>
<td>x or y</td>
<td>布尔”或”：如果 x 是 True，它返回 True，否则它返回 y 的值。</td>
<td>False or True， 返回 True。</td>
</tr>
<tr>
<td>not</td>
<td>not x</td>
<td>布尔”非”：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td>
<td>not True 返回 False, not False 返回 True</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">## 逻辑运算符</span></span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># and 左右表达式都为True，则结果为True</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> (<span class="number">1</span> == <span class="number">1</span>) <span class="keyword">and</span> (<span class="number">10</span> &gt; <span class="number">3</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&quot;条件成立&quot;</span>)</span><br><span class="line">...</span><br><span class="line">条件成立</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># or 左右两边表达式有一个为True，则结果为True</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> (<span class="number">100</span> == <span class="number">100</span>) <span class="keyword">or</span> (<span class="number">10</span> &lt; <span class="number">3</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&quot;条件成立&quot;</span>)</span><br><span class="line">...</span><br><span class="line">条件成立</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># not  将右边表达式的逻辑结果取反，True变为False， False 变为True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">1</span>==<span class="number">2</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&quot;条件成立&quot;</span>)</span><br><span class="line">...</span><br><span class="line">条件成立</span><br></pre></td></tr></table></figure>



<h3 id="双分支-if-else"><a href="#双分支-if-else" class="headerlink" title="双分支(if-else)"></a>双分支(if-else)</h3><blockquote>
<p>满足条件时做什么，那不满足时做什么呢？<br>答 ：if-else</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">	满足条件时要做的事情<span class="number">1</span></span><br><span class="line">	满足条件时要做的事情<span class="number">2</span></span><br><span class="line">	满足条件时要做的事情<span class="number">3</span></span><br><span class="line">	...(省略)...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	不满足条件时要做的事情<span class="number">1</span></span><br><span class="line">	不满足条件时要做的事情<span class="number">2</span></span><br><span class="line">	不满足条件时要做的事情<span class="number">3</span></span><br><span class="line">	...(省略)...</span><br></pre></td></tr></table></figure>

<p>demo:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;if 判断开始&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;已成年了，可以上网了&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未成年，禁止上网&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;if 判断结束&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="多分支（if-elif-elif…）（if-elif-elif-…-else）"><a href="#多分支（if-elif-elif…）（if-elif-elif-…-else）" class="headerlink" title="多分支（if-elif-elif…）（if-elif-elif-…-else）"></a>多分支（if-elif-elif…）（if-elif-elif-…-else）</h3><blockquote>
<p>if 能完成当xxx时做什么事情1，</p>
<p>if-else能完成当xxx时做事情1，否则做事情2</p>
<p>如果有这样一种情况：当xxx1满足时，做事情1；当xxx1不满足时，xxx2满足时做事情2；当xxx2不满足时，xxx3 满足时做事情3 ，那怎么实现呢？</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> xxx1:      健康码  绿码</span><br><span class="line">	事情<span class="number">1</span>           做核酸</span><br><span class="line"><span class="keyword">elif</span> xxx2:           黄码</span><br><span class="line">	事情<span class="number">2</span>    			叫我需要去另外一个地方做</span><br><span class="line"><span class="keyword">elif</span> xxx3: 			体温<span class="number">38</span>度</span><br><span class="line">	事情<span class="number">3</span>     		 隔离</span><br><span class="line"><span class="keyword">elif</span> xxx4: 			体温<span class="number">38</span>度</span><br><span class="line">	事情<span class="number">4</span> </span><br></pre></td></tr></table></figure>

<p>demo:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pick_che = <span class="number">0</span>   <span class="comment"># 1 表示买票了， 0 表示没有买票</span></span><br><span class="line">weijin = <span class="number">0</span>     <span class="comment"># 1 表示有违禁品， 0 表示没哟</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> weijin:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;那不能进入车站&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> pick_che:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;可以进入车站&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有车票回去购买&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<blockquote>
<p>elif必须和if一起使用，否则出错</p>
<p>else 一般用在最后，即所有条件都不满足时使用</p>
</blockquote>
<h3 id="if-嵌套"><a href="#if-嵌套" class="headerlink" title="if 嵌套"></a>if 嵌套</h3><p>通过学习已经知道了</p>
<ul>
<li>满足xxx时做事情a ，用 if</li>
<li>满足xxx时做事情a，不满足时做事情b  用 if-else</li>
</ul>
<p>想一想</p>
<blockquote>
<p>坐火车或者地铁的实际情况是：先进行安检如果安检通过才会判断是否有车票，或者是先检查是否有车票之后才会进行安检，即实际的情况某个判断是再另外一个判断成立的基础上进行的，这样的情况该怎样解决呢？</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>成立:</span><br><span class="line">	做的事情<span class="number">1</span></span><br><span class="line">	做的事情<span class="number">2.</span>....</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> 条件<span class="number">2</span>成立:</span><br><span class="line">		做的事情<span class="number">1.</span>..</span><br><span class="line">		做的事情<span class="number">2.</span>..</span><br></pre></td></tr></table></figure>

<ul>
<li>说明 注意缩进</li>
<li><ul>
<li>外层的if判断，也可以是if-else</li>
<li>内层的if判断，也可以是if-else</li>
<li>根据实际开发的情况，进行选择</li>
</ul>
</li>
</ul>
<p>demo:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pick_che = <span class="number">1</span> <span class="comment"># 1 表示买票了， 0 表示没有买票</span></span><br><span class="line">weijin = <span class="number">0</span> <span class="comment"># 1 表示有违禁品， 0 表示没哟</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> weijin:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;可以进入车站&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pick_che:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;可以去见女朋友了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;请购票，先生&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;携带违禁品，等待警察处理&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="循环结构-循环语句"><a href="#循环结构-循环语句" class="headerlink" title="循环结构(循环语句)"></a>循环结构(循环语句)</h2><p>《1》生活中的循环场景</p>
<p>操场</p>
<p> <img src="E:\blog\source_posts\imgs\image.png" alt="image.png"> </p>
<p>电风扇</p>
<p> <img src="E:\blog\source_posts\imgs\cat.gif" alt="cat.gif"> </p>
<p>《2》程序中的循环使用场景</p>
<p>跟女朋友承认错误，说一万遍“宝贝，我错了”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;宝贝，我错了&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;宝贝，我错了&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;宝贝，我错了&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;宝贝，我错了&quot;</span>)</span><br><span class="line">。。。。</span><br></pre></td></tr></table></figure>

<p>使用循环语句一句话搞定</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt; <span class="number">10001</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;宝贝，我错了&quot;</span>)</span><br><span class="line">    i +=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><ul>
<li>while和if的用法基本类似，区别在于：if 条件成立，则执行一次； while 条件成立，则重复执行，直到条件不成立为止。</li>
<li>一般情况下，需要多次重复执行的代码，都可以用循环的方式来完成</li>
<li>循环不是必须要使用的，但是为了提高代码的重复使用率，所以有经验的开发者都会采用循环</li>
</ul>
<h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">	条件满足时，做的事情<span class="number">1</span></span><br><span class="line">	条件满足时，做的事情<span class="number">2</span></span><br><span class="line">	条件满足时，做的事情<span class="number">3</span></span><br><span class="line">	...(省略)...</span><br></pre></td></tr></table></figure>

<p>demo:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前执行的次数，%d&quot;</span> %(i +<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i =%d&quot;</span> % i)</span><br><span class="line">    i +=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="while嵌套"><a href="#while嵌套" class="headerlink" title="while嵌套"></a>while嵌套</h3><p>要求：打印如下的图形</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">* *</span><br><span class="line">* * *</span><br><span class="line">* * * *</span><br><span class="line">* * * * *</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i = 1</span><br><span class="line">while i &lt;=5: # 4 &lt;= 5</span><br><span class="line">    j = 1</span><br><span class="line">    while j &lt;=i:  # 3 &lt;= 4:</span><br><span class="line">        print(&quot;* &quot;, end=&quot;&quot;) # 取消 换行  用ctrl键+点击鼠标  可以查看鼠标指定的位置代码的源码</span><br><span class="line">        j +=1</span><br><span class="line">    print(&quot;\n&quot;)</span><br><span class="line">    i +=1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>在Python中for循环可以遍历任何序列的类型，如一个列表或字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 列表或者字符串等可迭代对象:  </span><br><span class="line">    循环满足条件时执行的代码</span><br></pre></td></tr></table></figure>

<p>demo:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;hello world&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">h</span><br><span class="line">e</span><br><span class="line">l</span><br><span class="line">l</span><br><span class="line">o</span><br><span class="line"> </span><br><span class="line">w</span><br><span class="line">o</span><br><span class="line">r</span><br><span class="line">l</span><br><span class="line">d</span><br></pre></td></tr></table></figure>

<p>demo2:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">效果等同于 while 循环的：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">i = 0</span></span><br><span class="line"><span class="string">while i &lt; 5:</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string">    i += 1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>补充：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">range</span>里面的值:</span><br><span class="line">       <span class="number">1.</span>默认从<span class="number">0</span>开始</span><br><span class="line">       <span class="number">2.</span>终点值到它的前一位</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(数值):</span><br><span class="line">       执行语句</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">       <span class="built_in">print</span>(i) <span class="comment"># 输出0-49</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>,<span class="number">101</span>):</span><br><span class="line">       <span class="built_in">print</span>(i) <span class="comment"># 自定义起点.输出50-100</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>,<span class="number">101</span>,<span class="number">2</span>):</span><br><span class="line">       <span class="built_in">print</span>(i) <span class="comment"># 这里的2为步长</span></span><br></pre></td></tr></table></figure>

<h2 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h2><h3 id="1-break"><a href="#1-break" class="headerlink" title="1.break"></a>1.break</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<p>带有break的循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 结束循环</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<p>continue</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment"># 跳过循环</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul>
<li>break的作用：立刻结束break所在的循环</li>
<li>continue的作用：用来结束本次循环，紧接着执行下一次的循环，相当于跳过了当前这次循环</li>
</ul>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul>
<li>break&#x2F; continue 只能用在循环中，除此以外不能单独使用</li>
<li>break&#x2F;continue 在嵌套循环中，只对最近的一层循环起作用</li>
</ul>
<h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>1.要求：从键盘输入身高，如果身高没有超过150cm，则进动物园不用买票，否则需要买票。</p>
<p>2.编写代码，1-7七个数字，分别代表周一到周日，如果输入的数字是6或7，输出“周末”，如果输入的数字是1-5,输 出“工作日”，如输入其他数字，输出“错误”。</p>
<p>3.情节描述：上公交车去公园，并且可以有座位坐下</p>
<p>要求：输入公交卡当前的余额，只要超过2元，就可以上公交车,否则走着去；如果车上有空座位，就可以坐下，否则就站着吧。</p>
<p>4.输出 1-100 内的所有奇数（for，while 都可以）</p>
<p>5.99乘法表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.要求：从键盘输入身高，如果身高没有超过150cm，则进动物园不用买票，否则需要买票。</span></span><br><span class="line"><span class="comment"># a = int(input(&quot;请输入用户身高 cm&quot;))</span></span><br><span class="line"><span class="comment"># if a &gt; 150 :</span></span><br><span class="line"><span class="comment">#     print(&quot;请买票进入&quot;)</span></span><br><span class="line"><span class="comment"># else:print(&quot;请进入！&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.编写代码，1-7七个数字，分别代表周一到周日，如果输入的数字是6或7，输出“周末”，如果输入的数字是1-5,输 出“工作日”，如输入其他数字，输出“错误”。</span></span><br><span class="line"><span class="comment"># i = int(input(&quot;请输入相应的值i：&quot;))</span></span><br><span class="line"><span class="comment"># if (i == 6) or (i == 7) :</span></span><br><span class="line"><span class="comment">#     print(&quot;周末&quot;)</span></span><br><span class="line"><span class="comment"># elif 1 &lt;= i and i &lt;= 5:   # 1 &lt;= i &lt;= 5</span></span><br><span class="line"><span class="comment">#     print(&quot;工作日&quot;)</span></span><br><span class="line"><span class="comment"># else:</span></span><br><span class="line"><span class="comment">#     print(&quot;错误！&quot;)</span></span><br><span class="line"><span class="comment"># 3.情节描述：上公交车去公园，并且可以有座位坐下</span></span><br><span class="line"><span class="comment"># 要求：输入公交卡当前的余额，只要超过2元，就可以上公交车,否则走着去；如果车上有空座位，就可以坐下，否则就站着吧。</span></span><br><span class="line"><span class="comment"># m = int(input(&quot;请输入公交卡当前的余额：&quot;))</span></span><br><span class="line"><span class="comment"># if (m &gt; 2):</span></span><br><span class="line"><span class="comment">#     print(&quot;请上车&quot;)</span></span><br><span class="line"><span class="comment">#     n = int(input(&quot;1  有座位   0   无座位 请输入&quot;))</span></span><br><span class="line"><span class="comment">#     if(n==1):</span></span><br><span class="line"><span class="comment">#         print(&quot;坐下&quot;)</span></span><br><span class="line"><span class="comment">#     else:print(&quot;站着&quot;)</span></span><br><span class="line"><span class="comment"># else:print(&quot;走着去&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.输出 1-100 内的所有奇数（for，while 都可以）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=============&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span> :</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------------------&quot;</span>)</span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: <span class="comment"># 死循环</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">100</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.99乘法表</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">9</span>: <span class="comment"># 控制打印多少行</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i: <span class="comment"># 控制打印多少行</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i&#125;</span>*<span class="subst">&#123;j&#125;</span>=<span class="subst">&#123;i*j&#125;</span>&quot;</span>,end=<span class="string">&#x27; |&#x27;</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;===============&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> j &lt;= i:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;*&#123;&#125;=&#123;&#125;  &quot;</span>.<span class="built_in">format</span>(i, j, i*j), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>) <span class="comment"># 多了个空格</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="课前预习"><a href="#课前预习" class="headerlink" title="课前预习"></a>课前预习</h2><p><a href="http://c.biancheng.net/python/function/">http://c.biancheng.net/python/function/</a>    函数</p>
<h1 id="二-函数基础与函数参数"><a href="#二-函数基础与函数参数" class="headerlink" title="二.函数基础与函数参数"></a>二.函数基础与函数参数</h1><h2 id="上节回顾-1"><a href="#上节回顾-1" class="headerlink" title="上节回顾"></a>上节回顾</h2><p>流程控制：</p>
<ul>
<li>顺序结构</li>
<li>选择结构（if判断语句）<ul>
<li>单分支 if</li>
<li>双分支 if -else</li>
<li>多分支 if - elif - else</li>
</ul>
</li>
<li>循环结构<ul>
<li>while </li>
<li>for</li>
</ul>
</li>
<li>解决循环<ul>
<li>break   （结束循环）</li>
<li>continue  (跳出循环)</li>
</ul>
</li>
<li>逻辑运算符 and  or  not</li>
</ul>
<h2 id="初始函数"><a href="#初始函数" class="headerlink" title="初始函数"></a>初始函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我现在想吃一个苹果。需要买一把水果刀，后面我需要做三杯鸡，需要买一把切肉刀，</span><br><span class="line">有一天，我看到了瑞士军刀，它什么功能，都有了， 这样我就不需要买水果刀了，</span><br><span class="line"></span><br><span class="line">瑞士军刀 &gt;&gt; 就是把一些功能结合到一起的函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">函数：</span><br><span class="line">	通过的专门的代码，用来实现特定的功能</span><br><span class="line"></span><br><span class="line">优点:</span><br><span class="line">    <span class="number">1.</span>独立性</span><br><span class="line">    <span class="number">2.</span>可以重复使用</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">定义一个函数  &gt;&gt; 封装一个功能</span><br><span class="line">调用函数      &gt;&gt; 使用函数的功能</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 如何定义一个函数  注意定义的函数名与规定的内置函数名一样会报错</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">函数名</span>():</span><br><span class="line">        代码块</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 需要先定义，才能调用</span></span><br><span class="line">	函数名()</span><br><span class="line"></span><br><span class="line"><span class="comment"># demo:</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">printInfo</span>():</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">20</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;         人生苦短，我用Python           &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    printInfo()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 定义一个空的函数</span></span><br><span class="line"><span class="comment"># pass 作为占位符</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="return-返回值-是个列表"><a href="#return-返回值-是个列表" class="headerlink" title="return 返回值(是个列表)"></a>return 返回值(是个列表)</h2><p>为什么要有返回值，或者，比如，这个函数完成 的是两个变量的相加，但是另一个函数的功能是需要这两个变量的和进行相加   这个时候就需要使用return把返回值返回出来，这样才能使用</p>
<p>例子：你计算的数据，要想给别人使用，怎么办，那你得拿出来，是吧，这里就是return 的作用，把数据return 出来，那么其他人就能使用了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义有返回值的函数</span></span><br><span class="line"><span class="comment"># return / 返回值  / 结束函数</span></span><br><span class="line"><span class="comment"># 函数 默认返回值 None（空） </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>():</span><br><span class="line">    代码块</span><br><span class="line">    <span class="keyword">return</span> 返回值 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># demo:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    rest = <span class="number">100</span> +<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> rest </span><br><span class="line"><span class="built_in">print</span>(fun1())</span><br></pre></td></tr></table></figure>

<h4 id="小结：-1"><a href="#小结：-1" class="headerlink" title="小结："></a>小结：</h4><blockquote>
<p>return  返回值的类型，没有限制，不写返回值，<strong>默认返回None</strong></p>
<p>return 可以返回多个值， 中间用，逗号隔开，得到的数据类型为<strong>元组</strong></p>
<p><strong>函数命名 与变量名规则一致</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- 数字不能开头，首字母小写，其后的首字母大写（小驼峰）</span><br><span class="line">- 见名知意</span><br><span class="line">- </span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><ul>
<li>形参    &gt;&gt;&gt;   函数定义时圆括号() 里的变量，对象，   定义时传入的</li>
<li>实参    &gt;&gt;&gt;    函数使用时圆括号（）里的传的数据  调用时传入的</li>
<li>形参和实参的传入的名字尽量不要一样</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义带参数的函数------形参</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">形参<span class="number">1</span>，形参<span class="number">2</span></span>):</span><br><span class="line">    代码块</span><br><span class="line">	</span><br><span class="line"><span class="comment"># demo：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">money</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;今天收入<span class="subst">&#123;money&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#调用时传入的为实参    </span></span><br><span class="line">fun2(<span class="number">999</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 形参与实参要一一对应</span></span><br></pre></td></tr></table></figure>

<h2 id="参数进阶"><a href="#参数进阶" class="headerlink" title="参数进阶"></a>参数进阶</h2><ul>
<li><h3 id="默认参数-就是给参数一个默认值-必须在普通参数后面"><a href="#默认参数-就是给参数一个默认值-必须在普通参数后面" class="headerlink" title="默认参数 : 就是给参数一个默认值     必须在普通参数后面"></a>默认参数 : 就是给参数一个默认值     必须在普通参数后面</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义时；</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参<span class="number">1</span>, 参<span class="number">2</span>=<span class="number">123</span></span>):</span><br><span class="line">调用:</span><br><span class="line">    函数名(参<span class="number">1</span>,)</span><br><span class="line">    </span><br><span class="line">demo:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">desc</span>(<span class="params">name, age=<span class="number">18</span></span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">f&quot;姓名<span class="subst">&#123;name&#125;</span>年龄<span class="subst">&#123;age&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">   desc(<span class="string">&quot;韦小宝&quot;</span>)      <span class="comment"># 姓名韦小宝年龄18</span></span><br><span class="line">   desc(<span class="string">&quot;韦小宝&quot;</span>, <span class="number">2000</span>)<span class="comment"># 姓名韦小宝年龄2000</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="可变参数：-args"><a href="#可变参数：-args" class="headerlink" title="可变参数： *args"></a>可变参数： *args</h3><p><em><strong>参数个数不定，但是接受后的数据为元组（）类型</strong></em>，</p>
<ul>
<li>参数名不固定  一般都是args 命名  前面 加个 *****</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义：</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">*可变参数</span>):</span><br><span class="line">        xxx</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fun4</span>(<span class="params">*args</span>):</span><br><span class="line"></span><br><span class="line">调用：</span><br><span class="line">	函数名(参<span class="number">1</span>，参<span class="number">2</span>，参<span class="number">3</span>，...):</span><br><span class="line"></span><br><span class="line"> demo:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">fun4</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="comment">#print(args)    #(123, 12.5, &#x27;123&#x27;, [123, &#x27;aa&#x27;], &#123;&#x27;name&#x27;: &#x27;言沫沫&#x27;&#125;)</span></span><br><span class="line">    <span class="built_in">print</span>(*args)  <span class="comment"># 解包  123 12.5 123 [123, &#x27;aa&#x27;] &#123;&#x27;name&#x27;: &#x27;言沫沫&#x27;&#125;</span></span><br><span class="line">    <span class="comment">#print([*args])  #[123, 12.5, &#x27;123&#x27;, [123, &#x27;aa&#x27;], &#123;&#x27;name&#x27;: &#x27;言沫沫&#x27;&#125;]</span></span><br><span class="line">    <span class="comment">#print(&#123;*args&#125;)  #unhashable type: &#x27;list&#x27;</span></span><br><span class="line">fun4(<span class="number">123</span>, <span class="number">12.5</span>, <span class="string">&quot;123&quot;</span>,[<span class="number">123</span>,<span class="string">&quot;aa&quot;</span>],&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;言沫沫&quot;</span>&#125;)   </span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="关键字参数-（-kwargs）"><a href="#关键字参数-（-kwargs）" class="headerlink" title="关键字参数 （**kwargs）"></a>关键字参数 （**kwargs）</h3><p><strong>参数个数不定，但是接受后的数据为字典类型，</strong></p>
<ul>
<li><p>参数名不固定， 一般都是 kwargs 前面 + **</p>
<p>​</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义：</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">**参数</span>):</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">fun4</span>(<span class="params">**kwargs</span>):</span><br><span class="line">        </span><br><span class="line">调用：</span><br><span class="line">	函数名(**&#123;字典&#125;)</span><br><span class="line">    fun4(**&#123;<span class="string">&quot;时间&quot;</span>:<span class="number">20</span>,<span class="string">&quot;地点&quot;</span>: <span class="string">&quot;Python课程&quot;</span>&#125;)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">demo:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun4</span>(<span class="params">**kwargs</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(kwargs) </span><br><span class="line">   </span><br><span class="line"><span class="comment"># ** 只能对字典解包</span></span><br><span class="line">fun4(**&#123;<span class="string">&quot;时间&quot;</span>:<span class="number">20</span>,<span class="string">&quot;地点&quot;</span>: <span class="string">&quot;Python课程&quot;</span>&#125;)  <span class="comment"># 对字典 解包</span></span><br><span class="line"></span><br><span class="line">fun4(time=<span class="number">20</span>, addr=<span class="string">&quot;python&quot;</span>)</span><br><span class="line"></span><br><span class="line">demo:</span><br><span class="line"><span class="comment"># # 定义一个函数。计算a，b 的和</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mySum</span>(<span class="params">a, b, name=<span class="number">123</span>, *args, **kwargs</span>):  <span class="comment"># 形参 a，b</span></span><br><span class="line">    <span class="built_in">print</span>(a)              <span class="comment"># 999</span></span><br><span class="line">    <span class="built_in">print</span>(b)              <span class="comment"># 123</span></span><br><span class="line">    <span class="built_in">print</span>(args)           <span class="comment"># (675, [123, 520], &#123;&#x27;age&#x27;: 2000&#125;)</span></span><br><span class="line">    <span class="built_in">print</span>(kwargs)         <span class="comment"># &#123;&#x27;name1&#x27;: &#x27;韦小宝&#x27;&#125;</span></span><br><span class="line">    <span class="built_in">print</span>(name,<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>)  <span class="comment"># 34564 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line">    <span class="comment"># 解包</span></span><br><span class="line">    <span class="built_in">print</span>(name)                <span class="comment"># 34564</span></span><br><span class="line">    num1, num2, num3 = args</span><br><span class="line">    <span class="built_in">print</span>(num1, num2, num3)    <span class="comment"># 675 [123, 520] &#123;&#x27;age&#x27;: 2000&#125;</span></span><br><span class="line">    <span class="keyword">return</span> a + b  <span class="comment"># return 返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####                        args   args       args         kwargs</span></span><br><span class="line">  num = mySum(<span class="number">999</span>,<span class="number">123</span>,<span class="number">34564</span>,<span class="number">675</span>,[<span class="number">123</span>,<span class="number">520</span>],&#123;<span class="string">&quot;age&quot;</span>:<span class="number">2000</span>&#125;,**&#123;<span class="string">&quot;name1&quot;</span>:<span class="string">&quot;韦小宝&quot;</span>&#125;)</span><br><span class="line">  <span class="built_in">print</span>(num)    <span class="comment"># 1122</span></span><br></pre></td></tr></table></figure>


<p>​</p>
<p>​</p>
<h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><p>  参数的顺序一般为（从左到右）：普通参数  默认参数   可变参数（*args）  关键字参数（**kwargs）</p>
<p>  可变参数一般可以解包任何类型的数据   关键字参数只能解包字典类型的数据</p>
<p>  如果字典里解包后输出的键值名与前面的有重复  则会报错</p>
<p>  解包实质就是一种其他的解决方法</p>
<p>​</p>
<p>​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#解包demo</span></span><br><span class="line"></span><br><span class="line">tu1 = (<span class="number">123</span>, <span class="number">213</span>)</span><br><span class="line">tu2 = (<span class="number">520</span>, <span class="number">1314</span>)</span><br><span class="line"><span class="comment">#元组解包</span></span><br><span class="line">tu3 = tu1 + tu2</span><br><span class="line"><span class="built_in">print</span>(tu3 )         <span class="comment"># (123, 213, 520, 1314)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((*tu1, *tu2))  <span class="comment"># (123, 213, 520, 1314)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reset1 = &#123;<span class="string">&quot;time&quot;</span>: <span class="number">120</span>&#125;</span><br><span class="line">reset2 = &#123;<span class="string">&quot;addr&quot;</span>: <span class="string">&quot;python课程&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">reset1.update(reset2)</span><br><span class="line"><span class="comment">#字典解包</span></span><br><span class="line">rest3 = &#123;**reset1,**reset2&#125;</span><br><span class="line"><span class="built_in">print</span>(rest3)  <span class="comment"># &#123;&#x27;time&#x27;: 120, &#x27;addr&#x27;: &#x27;python课程&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="内置函数-基础篇"><a href="#内置函数-基础篇" class="headerlink" title="内置函数(基础篇)"></a>内置函数(基础篇)</h2><p>python自带的一些功能函数,可以直接使用  这里列举</p>
<p>print() 输出语句<br>input() 输入语句<br>type() 获取数据类型<br>min() 获取最小值<br>max() 获取最大值<br>len() 获取数据长度(有几个数据)<br>sum() 获取数据的总值</p>
<h2 id="文档字符串"><a href="#文档字符串" class="headerlink" title="文档字符串"></a>文档字符串</h2><p>针对函数的注释,看起来和注释一样,但是可以被用来调用输出,所以在写函数时更推荐用文档字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 文档字符串内容 &quot;&quot;&quot;</span></span><br><span class="line">        代码块</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这是一个测试函数</span></span><br><span class="line"><span class="string">    我是一个文档字符串</span></span><br><span class="line"><span class="string">    我可以被输出</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hey boy&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> 输出方式:</span><br><span class="line">     函数名.__doc__</span><br><span class="line">     fun.__doc__</span><br><span class="line">     <span class="built_in">print</span>.__doc__</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">  demo1:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这是一个测试函数</span></span><br><span class="line"><span class="string">    我是一个文档字符串</span></span><br><span class="line"><span class="string">    我可以被输出</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hey boy&#x27;</span>)</span><br><span class="line"> <span class="built_in">print</span>(fun.__doc__)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    这是一个测试函数</span></span><br><span class="line"><span class="string">    我是一个文档字符串</span></span><br><span class="line"><span class="string">    我可以被输出</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  demo2:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">tune</span>(<span class="params">a, b</span>):</span><br><span class="line">   	 <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    	python基础  三器 装饰器 生成器  迭代器   一闭  闭包</span></span><br><span class="line"><span class="string">    	&quot;&quot;&quot;</span></span><br><span class="line"> <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">tune(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(tune.__doc__)  <span class="comment">#    python基础  三器 装饰器 生成器  迭代器   一闭  闭包</span></span><br><span class="line"><span class="built_in">print</span>(tune(<span class="number">3</span>,<span class="number">5</span>))  <span class="comment"># 8</span></span><br></pre></td></tr></table></figure>



<p>  <code>核心作用就是查看函数的说明文档(文档尽量简洁,描述本质作用):   </code>1.函数的作用<br>  <code>2.函数参数的作用   </code>3.函数返回值的作用</p>
<h2 id="作业-1"><a href="#作业-1" class="headerlink" title="作业"></a>作业</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 用函数写一个自我介绍功能 </span><br><span class="line">  - 获取用户输入的数据，并且打印出来  </span><br><span class="line">  - 格式为  我是 xxx  年龄：<span class="number">20</span>    身高 ：<span class="number">180</span>   样貌：帅</span><br><span class="line">  - 姓名，年龄，身高，样貌</span><br><span class="line">- 接受n个数字，求这些数字的和 </span><br><span class="line">- 写函数，检查传入形参的长度，如果长度大于<span class="number">2</span>，那么仅保留前两个长度的内容，并将新内容返回给调用者 </span><br><span class="line">- 写一个函数，根据 传入的是形参 是字符串类型 提取出形参 中所有奇数位上的字符 不是则提示错误 </span><br><span class="line">- 写一个函数， 获取列表中的成绩的平均值，和最高分   如果不是 那就提示错误 </span><br><span class="line">  - 例如   li = [<span class="number">123</span>,<span class="number">1314</span>,<span class="number">520</span>]</span><br><span class="line">- 修改猜拳小游戏修复bug，并且程序一直执行，除非玩家胜出，程序才会结束</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">- 用函数写一个自我介绍功能</span></span><br><span class="line"><span class="string">  - 获取用户输入的数据，并且打印出来</span></span><br><span class="line"><span class="string">  - 格式为  我是 xxx  年龄：20    身高 ：180   样貌：帅</span></span><br><span class="line"><span class="string">  - 姓名，年龄，身高，样貌</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># def induction():</span></span><br><span class="line"><span class="comment">#     try:# 捕获异常</span></span><br><span class="line"><span class="comment">#         name = input(&quot;请输入姓名： &quot;)</span></span><br><span class="line"><span class="comment">#         age = int(input(&quot;请输入年龄：&quot;))</span></span><br><span class="line"><span class="comment">#         height = float(input(&quot;请输入身高：&quot;))</span></span><br><span class="line"><span class="comment">#         ap = input(&quot;请输入样貌：&quot;)</span></span><br><span class="line"><span class="comment">#         print(f&quot;我是 &#123;name&#125;  年龄：&#123;age&#125;    身高 ：&#123;height&#125;   样貌：&#123;ap&#125;&quot;)</span></span><br><span class="line"><span class="comment">#     except Exception as e:  # 这里处理异常</span></span><br><span class="line"><span class="comment">#         print(e)  # invalid literal for int() with base 10: &#x27;jk&#x27;</span></span><br><span class="line"><span class="comment">#         print(&quot;输入错误！---------&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># induction()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - 接受n个数字，求这些数字的和</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">summ1</span>(<span class="params">*args</span>):</span><br><span class="line">    a = <span class="built_in">sum</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">summ1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">999</span>)  <span class="comment"># 1037</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># - 写函数，检查传入形参的长度，如果长度大于2，那么仅保留前两个长度的内容，并将新内容返回给调用者</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def check(li1):</span></span><br><span class="line"><span class="comment">#     if len(li1) &gt; 2:</span></span><br><span class="line"><span class="comment">#         return li1[0:2]</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         print(&quot;传入形参的长度小于2&quot;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # li1 = [&quot;wk&quot;,&quot;md&quot;,1456]  # [&#x27;wk&#x27;, &#x27;md&#x27;]</span></span><br><span class="line"><span class="comment"># li1 = [&quot;wk&quot;,&quot;md&quot;] # 传入形参的长度小于2  函数没有返回值  默认返回None</span></span><br><span class="line"><span class="comment"># # rest = check(li1)</span></span><br><span class="line"><span class="comment"># print(check(li1))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># - 写一个函数，根据 传入的形参 是字符串类型 提取出形参中所有奇数位上的字符 不是则提示错误</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(li) <span class="keyword">is</span> <span class="built_in">str</span>:</span><br><span class="line">        str1 = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(li),<span class="number">2</span>):</span><br><span class="line">            str1.append(li[i])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>.join(str1))   <span class="comment"># a m m</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;传入的形参不是字符串！&quot;</span>)</span><br><span class="line"></span><br><span class="line">fun(<span class="string">&quot;yanmomo&quot;</span>)</span><br><span class="line"><span class="comment"># - 写一个函数， 获取列表中的成绩的平均值，和最高分   如果不是 那就提示错误</span></span><br><span class="line"><span class="comment">#   - 例如   li = [123,1314,520]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun3</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(li) == <span class="built_in">list</span>:</span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">            num += i</span><br><span class="line">            avg = num/<span class="built_in">len</span>(li)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;成绩平均值：&#x27;</span>,avg)   <span class="comment"># 成绩平均值： 123.0</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;最高分：&#x27;</span>,<span class="built_in">max</span>(li))  <span class="comment"># 最高分： 123</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入数据不是列表&quot;</span>)</span><br><span class="line"></span><br><span class="line">li = [<span class="number">123</span>,<span class="number">123</span>]</span><br><span class="line">fun3(li)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># - 修改猜拳小游戏修复bug，并且程序一直执行，除非玩家胜出，程序才会结束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        player = <span class="built_in">input</span>(<span class="string">&#x27;请输入：剪刀(0)  石头(1)  布(2):&#x27;</span>)</span><br><span class="line">        player = <span class="built_in">int</span>(player)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入错误！请重新输入！&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 产生随机整数：0、1、2 中的某一个</span></span><br><span class="line">    computer = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(computer)</span><br><span class="line">    <span class="comment"># 用来进行测试</span></span><br><span class="line">    <span class="comment"># print(&#x27;player=%d,computer=%d&#x27;,(player,computer))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((player == <span class="number">0</span>) <span class="keyword">and</span> (computer == <span class="number">2</span>)) <span class="keyword">or</span> ((player == <span class="number">1</span>) <span class="keyword">and</span> (computer == <span class="number">0</span>)) <span class="keyword">or</span> (</span><br><span class="line">            (player == <span class="number">2</span>) <span class="keyword">and</span> (computer == <span class="number">1</span>)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;获胜，哈哈，你太厉害了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> player == computer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;平局，要不再来一局&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输了，不要走，洗洗手接着来，决战到天亮&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>个人推荐：</p>
<p>  <a href="http://cxy521.com/">程序员工具网</a></p>
<p><a href="https://pythontutor.com/visualize.html#mode=edit"> 代码可视化网站</a></p>
<h1 id="三-函数作用域与名称空间"><a href="#三-函数作用域与名称空间" class="headerlink" title="三.函数作用域与名称空间"></a>三.函数作用域与名称空间</h1><h2 id="上节回顾-2"><a href="#上节回顾-2" class="headerlink" title="上节回顾"></a>上节回顾</h2><p>函数  &gt;&gt;  就是通过专门的代码，实现特定的功能</p>
<p>​     定义 函数， 封装一些功能</p>
<p>​	使用函数：&gt;&gt;  调用函数的功能</p>
<p>参数</p>
<ul>
<li>形参 ：函数定义时小括号里的变量就是形参</li>
<li>实参 ：函数使用时小括号里传递的变量，对象，数据 </li>
<li>return  把要返回的数据 放在return 后面   #  结束函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是 函数&quot;</span>) </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">fun1()</span><br><span class="line"><span class="comment"># 有参数有返回值的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a,b</span>):  <span class="comment">#  a,b   形参</span></span><br><span class="line">    <span class="keyword">if</span> a &gt;<span class="number">1</span>:</span><br><span class="line">    	<span class="keyword">return</span> a + b </span><br><span class="line"></span><br><span class="line">rest = fun2(<span class="number">1</span>,<span class="number">2</span>)       <span class="comment"># 1,2    实参 </span></span><br><span class="line"><span class="built_in">print</span>(rest) <span class="comment"># fun2 函数的返回值</span></span><br></pre></td></tr></table></figure>

<p>参数进阶：</p>
<ul>
<li><p>默认参数  :  就是给参数一个默认值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">an</span>(<span class="params">a,b=<span class="number">12</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line"></span><br><span class="line">an(<span class="number">123</span>,<span class="number">123</span>)    </span><br><span class="line">an(<span class="number">123</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>可变参数 可以接收多个参数，*args 数据类型  类型为元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)  <span class="comment"># 元组 类型</span></span><br><span class="line">	</span><br><span class="line">fun2(<span class="number">123</span>,<span class="number">123</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">21</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">32</span>,)</span><br><span class="line">fun2(&#123;<span class="string">&quot;dsfds&quot;</span>:dfdsfds&#125;,<span class="number">12</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>关键字参数   可以接收多个参数，**kwargs  数据类型  类型为字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun3</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line">    </span><br><span class="line">fun3(**&#123;<span class="string">&quot;ke&quot;</span>:<span class="string">&quot;le&quot;</span>,<span class="string">&quot;age&quot;</span>: <span class="number">123</span>&#125;)  </span><br><span class="line">fun3(name=<span class="string">&quot;韦小宝&quot;</span>, height=<span class="number">123</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>文档字符串</p>
<p>就是函数的说明书，可以打印出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    作用：</span></span><br><span class="line"><span class="string">    文档字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文档字符串&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(fun1.__doc__)  </span><br></pre></td></tr></table></figure>



<h2 id="初始函数对象"><a href="#初始函数对象" class="headerlink" title="初始函数对象"></a>初始函数对象</h2><p>​	函数，非常重要 ，	</p>
<p>​	函数，非常重要 ，</p>
<p>​	函数，非常重要 ， 但是有句话叫做通过表象，看本质</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">函数，就是一个高级的数据容器， </span><br><span class="line"><span class="number">1.</span> 函数可以被引用   函数也可以赋值</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1314</span>)</span><br><span class="line">a = test  <span class="comment">#  a 指向这个函数</span></span><br><span class="line">a()       <span class="comment">#调用a也可以运行这个函数</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 函数可以作为元素，放到字典。集合，元组，列表</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test 函数&quot;</span>)</span><br><span class="line">    </span><br><span class="line">func_dict = &#123;<span class="string">&quot;test&quot;</span>: test&#125;  <span class="comment"># 函数test作为元素放到了字典中</span></span><br><span class="line">func_dict[<span class="string">&quot;test&quot;</span>]()   <span class="comment"># 运行后：test 函数   （）表示调用这个函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 函数作为参数，传给别的函数</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b)  <span class="comment"># 1 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_func</span>(<span class="params">x, y, func</span>):</span><br><span class="line">    <span class="keyword">return</span> func(x, y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rest = my_func(<span class="number">1</span>, <span class="number">2</span>, test)  <span class="comment">#1 2     全局名称空间</span></span><br><span class="line"><span class="built_in">print</span>(rest)  <span class="comment"># None 因为</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span> 函数也可以作为返回值</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test3</span>(<span class="params">a,b</span>):  <span class="comment"># a ,b 局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_func</span>():   <span class="comment"># 全局名称空间</span></span><br><span class="line">    <span class="keyword">return</span> test3  <span class="comment"># 加括号 调用函数 没括号就是函数对象</span></span><br><span class="line"></span><br><span class="line">test = my_func()</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>)   <span class="comment"># 1 2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="名称空间"><a href="#名称空间" class="headerlink" title="名称空间"></a>名称空间</h2><p>名称空间  &gt;&gt; 用来存储名字的地方</p>
<p>变量名 ， 函数名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">程序中有专门的一些内存区域,来存储对应的数据</span><br><span class="line">        名称空间 --&gt; 存储变量名,函数名</span><br><span class="line">        内存数据 --&gt; 变量值,函数代码</span><br><span class="line">    有一个东西,叫<span class="string">&#x27;名称空间&#x27;</span>.它就是专门用来存名字的地方.它一共有三层结构</span><br><span class="line"> </span><br><span class="line">    <span class="number">1.</span>内建名称空间(存内置函数)</span><br><span class="line">        生命周期: 随着python程序启动而生成,在程序关闭时回收.清除所有数据</span><br><span class="line">        加载顺序: 最先被加载出来的</span><br><span class="line">        存放对象: 内置函数<span class="built_in">print</span> <span class="built_in">input</span> <span class="built_in">type</span> <span class="built_in">sum</span> <span class="built_in">len</span></span><br><span class="line">    <span class="number">2.</span>全局名称空间(存在python外层的名字)</span><br><span class="line">        生命周期: 随着python程序启动而生成,在程序关闭时回收.清除所有数据</span><br><span class="line">        加载顺序: 第二个被加载出来的</span><br><span class="line">        存放对象: 在python外层写的代码,定义的变量名,函数名</span><br><span class="line">    <span class="number">3.</span>局部名称空间(存在函数内定义的名字)</span><br><span class="line">        生命周期: 随着函数的调用而生成,在结束调用时销毁</span><br><span class="line">        加载顺序: 在调用时才会被加载</span><br><span class="line">        存放对象: 在函数里定义的变量名,函数名,形参</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 名称空间的加载顺序</span><br><span class="line">   <span class="number">1.</span> 内置名称空间&gt;全局名称空间&gt;局部名称空间</span><br><span class="line"><span class="number">2.</span> 销毁顺序</span><br><span class="line">   <span class="number">1.</span> 局部名称空间&gt;全局名称空间&gt;内置名称空间</span><br><span class="line"><span class="number">3.</span> 名字的查找优先级</span><br><span class="line">   <span class="number">1.</span> 当前所在的位置向上一层一层查找,查找一个名字，必须从三个名称空间之一找到，查找顺序为：局部名称空间-&gt;全局名称空间-&gt;内置名称空间</span><br><span class="line">    </span><br><span class="line">       </span><br><span class="line">a,b=<span class="number">11</span>,<span class="number">22</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line"></span><br><span class="line">my_func2()   <span class="comment"># 11 22</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<blockquote>
<p>一个程序里的数据，是有专门的地方的存储的</p>
<p>名称空间  &gt;&gt; 专门又来存储名字的地方</p>
</blockquote>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域：一个数据能够使用的范围</p>
<p>wifi：一个WiFi能够使用的范围、</p>
<h3 id="全局作用域和局部作用域"><a href="#全局作用域和局部作用域" class="headerlink" title="全局作用域和局部作用域"></a>全局作用域和局部作用域</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">全局作用域: 整个程序里都可以使用</span><br><span class="line">       (内建名称空间,全局名称空间)</span><br><span class="line">       内置函数,在外层定义的变量,函数名</span><br><span class="line">   公共wifi: 所有人都可以连的wifi</span><br><span class="line"></span><br><span class="line">   局部作用域 = 只有在局部位置才能使用(函数内)</span><br><span class="line">       局部名称空间</span><br><span class="line">       函数里面定义的变量和函数名</span><br><span class="line">   公司wifi: 只有公司里的人才可以连接</span><br></pre></td></tr></table></figure>

<h3 id="作用域与名字查找的优先级"><a href="#作用域与名字查找的优先级" class="headerlink" title="作用域与名字查找的优先级"></a>作用域与名字查找的优先级</h3><p>在局部作用域查找名字时，起始位置是局部作用域，所以先查找局部名称空间，没有找到，再去全局作用域查找：先查找全局名称空间，没有找到，再查找内置名称空间，最后都没有找到就会抛出异常</p>
<p>在局部作用域查找时 &gt;&gt; 局部作用域(局部名称空间) &gt;&gt;  全局作用域（全局名称空间） &gt;&gt; 内置名称空间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">100</span> <span class="comment"># 全局作用域的名字 x</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    x = <span class="number">300</span> <span class="comment"># 局部作用域的名字 x</span></span><br><span class="line">    <span class="built_in">print</span>(x) <span class="comment">#在局部找x  300</span></span><br><span class="line">foo()<span class="comment">#结果为300</span></span><br><span class="line"> </span><br><span class="line">在全局作用域查找名字时，起始位置便是全局作用域，所以先查找全局名称空间，没有找到，再查找内置名称空间，最后都没有找到就会抛出异常</span><br><span class="line"></span><br><span class="line">全局作用域（全局名称空间） &gt;&gt;&gt;  内置名称空间</span><br><span class="line"></span><br><span class="line">x = <span class="number">100</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    x = <span class="number">300</span> <span class="comment">#在函数调用时产生局部作用域的名字 x</span></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">#在全局找x, 结果为 100</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>提示</strong>：可以调用内建函数locals()和globals()来分别查看局部作用域和全局作用域的名字，查看的结果都是字典格式。在全局作用域查看到的locals()的结果等于globals()</p>
<h3 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Python支持函数的嵌套定义，在内嵌的函数内查找名字时，会优先查找自己局部作用域的名字，然后由内而外一层层查找外部嵌套函数定义的作用域，没有找到，则查找全局作用域</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">x=<span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    <span class="keyword">global</span> x=<span class="number">2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(): <span class="comment"># 函数名inner属于outer这一层作用域的名字</span></span><br><span class="line">        x=<span class="number">3</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;inner x:%s&#x27;</span> %x)  <span class="comment"># </span></span><br><span class="line"> </span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;outer x:%s&#x27;</span> %x)  <span class="comment"># </span></span><br><span class="line"> </span><br><span class="line">outer() </span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment"># 2 </span></span><br><span class="line"><span class="comment">#结果为</span></span><br><span class="line">inner x:<span class="number">3</span></span><br><span class="line">outer x:<span class="number">2</span></span><br></pre></td></tr></table></figure>



<p> 在函数内，无论嵌套多少层，都可以查看到全局作用域的名字，若要在函数内修改全局名称空间中名字的值，当值为不可变类型时，则需要用到global关键字 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    如果要提权 -- 让一个数据,从局部变成全局 -- <span class="keyword">global</span></span><br><span class="line">    <span class="keyword">global</span> = 全局 = 大方的人,让所有人都可以使用</span><br><span class="line"> 	</span><br><span class="line">    变量名 = 数据</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">函数名</span>():</span><br><span class="line">        gloabl 变量名</span><br><span class="line">        操作变量</span><br><span class="line">    函数名()</span><br><span class="line">    <span class="built_in">print</span>(变量)</span><br><span class="line"> 	</span><br><span class="line">    name = <span class="string">&quot;韦小宝&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">        <span class="keyword">global</span> name</span><br><span class="line">        name = <span class="string">&#x27;韦寻&#x27;</span></span><br><span class="line">    fun()</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="comment"># 要使用函数里的变量,除了要给他global提权外,还需要调用函数,才能生成对应的名称空间</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">nonlocal</span> -- 非公有 -- 让一个代码,变成你专属的 -- <span class="keyword">nonlocal</span></span><br><span class="line">    在公司里有个wifi --&gt; 公司里的人都可以使用,外面的人用不了</span><br><span class="line">    我想办法霸占了这个wifi,让它只能我一个人连</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">nonlocal</span> = 非公有 = 小气的人,原本大家都能用,但是现在只有我能用</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">        a = <span class="number">520</span> <span class="comment"># 这个a,从在函数里的角度说,是公有的,函数里的大家都能使用</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">            <span class="keyword">nonlocal</span> a <span class="comment"># 把变量a,抢过来,私有化. 从此以后它归老子管</span></span><br><span class="line">            a = <span class="number">99</span></span><br><span class="line">        fun2()</span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">     </span><br><span class="line">    fun1()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># nonlocal a会从当前函数的外层函数开始一层层去查找名字a，若是一直到最外层函数都找不到，则会抛出异常</span></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<blockquote>
<p>在函数内部，要想修改全局变量， 就用 global 进行提权</p>
<p>并且要执行函数才能生效</p>
</blockquote>
<h2 id="匿名函数-lambda函数"><a href="#匿名函数-lambda函数" class="headerlink" title="匿名函数  lambda函数"></a>匿名函数  lambda函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://c.biancheng.net/view/<span class="number">2262.</span>html</span><br><span class="line"> </span><br><span class="line">省略函数名 --&gt; 如果你要用一个函数,但是不想给她取名字,那就用<span class="keyword">lambda</span>表达式.可以不取名字使用函数</span><br><span class="line"> </span><br><span class="line">原来的写法:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">70</span>,<span class="number">47</span>))</span><br><span class="line"> </span><br><span class="line">现在的写法</span><br><span class="line">add = <span class="keyword">lambda</span> a,b:a+b</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">70</span>,<span class="number">47</span>))</span><br><span class="line"> </span><br><span class="line">语法格式:</span><br><span class="line"><span class="keyword">lambda</span> 变量:操作</span><br><span class="line">lamdba a:<span class="built_in">print</span>(a)</span><br><span class="line"> </span><br><span class="line">talk = <span class="keyword">lambda</span> a:<span class="built_in">print</span>(a)</span><br><span class="line">talk(<span class="string">&#x27;小包，小宝&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="作业-2"><a href="#作业-2" class="headerlink" title="作业"></a>作业</h2><p>填空题：</p>
<ol>
<li>输入函数 ：（input ）输出（print ）</li>
<li>序列类型和散列类型的区别是_有序  可以  用 下标  切片 的方式取出数据 ，，无序， 不会存重复的数据_   </li>
<li>字典是用__键值对_的方式来存储值   </li>
<li>分支语句分为三种,分别是   单分支__  , <em>双分支</em>  和_多分支_  分支语句的结构代码也是三种,分别是  ( if),(if…else),( if…elif…else)  </li>
<li>有一个循环,我还没想好里面要写啥,但是先声明下来.我应该在循环内写上   pass__避免报错</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> xxxx:</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="comment"># 代码块</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 代码块</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> xxxx:</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="comment"># 代码块</span></span><br><span class="line"><span class="keyword">elif</span> xxx:</span><br><span class="line">    <span class="comment"># 代码块</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 代码块</span></span><br></pre></td></tr></table></figure>



<p>因为try 这个是高级编程</p>
<p>解答题：</p>
<ol>
<li><p>变量名，函数名的命名规则有哪些？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">``由数字,字母,下划线组成</span><br><span class="line">``2.不能数字开头,不能有别的特殊符号</span><br><span class="line">``3.大驼峰，小驼峰,不要用关键字</span><br><span class="line">``4.见名知意</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看变量类型的Python内置函数是 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(变量名)</span><br></pre></td></tr></table></figure>
</li>
<li><pre><code>名称空间有三种,分别是?分别是存储啥?
  ``内建名称空间 --&gt; 存储内置函数
  ``全局名称空间 --&gt; 在外层存储定义的变量,函数名
  ``局部名称空间 --&gt; 存储函数内定义的变量,函数名
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4. 序列类型的下标是从几开始?</span><br><span class="line">   0</span><br><span class="line"></span><br><span class="line">5. 在循环语句中，什么语句跳过本层循环  ？ 什么语句结束循环   ？</span><br><span class="line"></span><br><span class="line">   continue，break</span><br><span class="line"></span><br><span class="line">代码题：（函数方式）</span><br><span class="line"></span><br><span class="line">1. 字符串str1 =  “韦小宝ppd”</span><br><span class="line"></span><br><span class="line">   1. 切片取出 &quot;韦小宝&quot;</span><br><span class="line"></span><br><span class="line">      `str1=str1[0:3] `</span><br><span class="line"></span><br><span class="line">      1. 通过方法ppd变成 Python</span><br><span class="line"></span><br><span class="line">      `str1 = str1.replace(&quot;ppd&quot;, &quot;Python&quot;)`</span><br><span class="line"></span><br><span class="line">   2. 获取字符串长度</span><br><span class="line"></span><br><span class="line">      `len(str1)`</span><br><span class="line"></span><br><span class="line">      ```python</span><br><span class="line">      str1 =  &quot;韦小宝ppd&quot;  # 作为全局变量</span><br><span class="line">      def test_str():</span><br><span class="line">          # 对str1 进行操作</span><br><span class="line">          # 1. 切片取出 &quot;韦小宝&quot;</span><br><span class="line">          index = str1.find(&quot;韦小宝&quot;) # 找到下标  找不到 -1</span><br><span class="line">          # 0 </span><br><span class="line">          rest = str1[index:index+3]</span><br><span class="line">          print(rest)</span><br><span class="line">          </span><br><span class="line">          # 通过方法  ppd 变成 Python</span><br><span class="line">          print(str1.replace(&quot;ppd&quot;, &quot;Python&quot;))</span><br><span class="line">          #  如果没写参数3 是全部替换</span><br><span class="line">          </span><br><span class="line">          # 获取字符串长度</span><br><span class="line">          print(len(str1))</span><br><span class="line">          </span><br><span class="line">      test_str()</span><br><span class="line">          </span><br><span class="line">      str1 = &quot;韦小宝ppd&quot;  # 作为全局变量</span><br><span class="line"></span><br><span class="line">      &quot;&quot;&quot;进行 升级  写上形参  并且bug 修复  完善 它 &quot;&quot;&quot;</span><br><span class="line">      def test_str(str3):</span><br><span class="line">          if type(str3) is str:</span><br><span class="line">              # 对str3 进行操作</span><br><span class="line">              # 1. 切片取出 &quot;韦小宝&quot;</span><br><span class="line">              index = str3.find(&quot;韦小宝&quot;)  # 找到下标  找不到 -1</span><br><span class="line">              # index 0 </span><br><span class="line">              rest = str3[index:index + 3]  # [0:3]</span><br><span class="line">              print(rest)</span><br><span class="line">              # 通过方法  ppd 变成 Python</span><br><span class="line">              print(str3.replace(&quot;ppd&quot;, &quot;Python&quot;))</span><br><span class="line">              # 获取字符串长度</span><br><span class="line">              print(len(str3))</span><br><span class="line">          else:</span><br><span class="line">              print(&quot;传入数据类型错误&quot;)</span><br><span class="line">              </span><br><span class="line">      test_str([&quot;sdfdsa&quot;])</span><br><span class="line"></span><br><span class="line">      # try 可以捕获一切的异常</span><br></pre></td></tr></table></figure>

   ​
</code></pre>
</li>
<li><p>用列表，存入你的成绩  成绩类型为元组（12,23,99,230）</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = (<span class="number">12</span>,<span class="number">23</span>,<span class="number">99</span>,<span class="number">230</span>)</span><br><span class="line">li1 = []  <span class="comment"># 空的列表 </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_list</span>():</span><br><span class="line">    <span class="comment"># for i in 字符串，列表 元组，</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> score:</span><br><span class="line">        li1.append(i)   <span class="comment"># 添加append方法 会把数据添加到数据最后面</span></span><br><span class="line">    <span class="built_in">print</span>(li1)</span><br><span class="line"></span><br><span class="line">test_list()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; 升级 &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_list</span>(<span class="params">re_score, li</span>):</span><br><span class="line">    num1 = <span class="number">1000</span>  <span class="comment"># 从函数调用 属于局部 </span></span><br><span class="line">   	<span class="keyword">if</span> <span class="built_in">type</span>(re_score) == <span class="built_in">tuple</span> <span class="keyword">and</span> <span class="built_in">type</span>(li) == <span class="built_in">list</span>:</span><br><span class="line">        <span class="comment"># print(list(re_score))</span></span><br><span class="line">        <span class="comment"># for i in 字符串，列表 元组，</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> re_score:</span><br><span class="line">            li.append(i)   <span class="comment"># 添加append方法</span></span><br><span class="line">        <span class="built_in">print</span>(li)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_li2</span>(<span class="params">num</span>): <span class="comment"># 局部函数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;内部函数&quot;</span>, num)</span><br><span class="line"></span><br><span class="line">    test_li2(num1)  <span class="comment"># 从这里看 num1 全局</span></span><br><span class="line">    </span><br><span class="line">test_list(score, li1) </span><br></pre></td></tr></table></figure>

<ol>
<li><p>累加10 – 60之间,个位不是3&#x2F;5&#x2F;8的整数和。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_num</span>():</span><br><span class="line">    </span><br><span class="line">    sum_value = <span class="number">0</span>  <span class="comment"># 用这个存储整数和</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">61</span>):</span><br><span class="line">        <span class="comment"># 60 % 10 = 0</span></span><br><span class="line">        unit = number % <span class="number">10</span>   <span class="comment"># 求个位上的数  % 取余 </span></span><br><span class="line">        <span class="keyword">if</span> unit == <span class="number">3</span> <span class="keyword">or</span> unit == <span class="number">5</span> <span class="keyword">or</span> unit == <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">continue</span>         <span class="comment"># continue 跳过循环</span></span><br><span class="line">        sum_value += number</span><br><span class="line">    <span class="built_in">print</span>(sum_value)</span><br><span class="line">    </span><br><span class="line">test_num()</span><br></pre></td></tr></table></figure>

</li>
<li><p>将列表中的数字累乘</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list01 = [<span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment"># 结果：806400</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mxo</span>():</span><br><span class="line">	result = <span class="number">1</span>  <span class="comment"># 因为1乘以任何数字,都不改变.</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> list01:</span><br><span class="line">        result *= x</span><br><span class="line">        <span class="comment"># result = result * x</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    </span><br><span class="line">mxo()</span><br></pre></td></tr></table></figure>
</li>
<li><p>&#96;&#96;&#96;python</p>
<h1 id="打印出来一下图形"><a href="#打印出来一下图形" class="headerlink" title="打印出来一下图形"></a>打印出来一下图形</h1><p>“””</p>
<ul>
<li>**</li>
</ul>
<hr>
<hr>
<hr>
<p>“””<br>i &#x3D; 1<br>while i &lt;&#x3D; 5:<br>    while j &lt;&#x3D;i:<br>     print(“*”,end&#x3D;””)<br>        j +&#x3D;1<br>    print(“\n”)<br>    i+&#x3D;1</p>
<p>def xingxing():<br>    for i in range(1,6):<br>            print(“*”*i)<br>xingxing()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 用函数定义 一个计算 两个数 功能</span><br><span class="line"></span><br><span class="line">   ```python&#x27;</span><br><span class="line">   def sum1(a, b):</span><br><span class="line">       flag = int(input(&quot;输入 加法（1）减法（2）乘法（3）除法（4）&quot;))</span><br><span class="line">       if flag == 1:</span><br><span class="line">           return a + b</span><br><span class="line">       elif flag == 2:</span><br><span class="line">           return a - b</span><br><span class="line">    elif flag == 3:</span><br><span class="line">           return a * b</span><br><span class="line">       elif flag == 4:</span><br><span class="line">           return a / b</span><br><span class="line">       else:</span><br><span class="line">           print(&quot;提示 用户输入错误&quot;)</span><br><span class="line"></span><br><span class="line">   print(&quot;欢迎使用Python 计算机&quot;)</span><br><span class="line">   num1 = int(input(&quot;请输入第一个数  &quot;))</span><br><span class="line">   num2 = int(input(&quot;请输入第二个数  &quot;))</span><br><span class="line"></span><br><span class="line">   rest = sum1(num1, num2)</span><br><span class="line">   print(&quot;计算后的结果&quot;,rest)</span><br></pre></td></tr></table></figure>

<p>7.用函数完成 集合练习</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一家公司有如下岗位：</span></span><br><span class="line"><span class="comment"># 经理 ：&quot;曹操&quot;,&quot;刘备&quot;,&quot;孙权&quot;</span></span><br><span class="line"><span class="comment"># 技术 ：&quot;曹操&quot;,&quot;刘备&quot;,&quot;张飞&quot;,&quot;关羽&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="comment">#使用集合存储以上信息</span></span><br><span class="line">    mag = &#123;<span class="string">&quot;曹操&quot;</span>,<span class="string">&quot;刘备&quot;</span>,<span class="string">&quot;孙权&quot;</span>&#125;</span><br><span class="line">    tec = &#123;<span class="string">&quot;曹操&quot;</span>,<span class="string">&quot;刘备&quot;</span>,<span class="string">&quot;张飞&quot;</span>,<span class="string">&quot;关羽&quot;</span>&#125;</span><br><span class="line">    <span class="comment"># 是经理也是技术的都有谁?</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;是经理也是技术的都有谁&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(mag &amp; tec)  <span class="comment"># 交集 </span></span><br><span class="line">    <span class="comment">#是经理也不是技术的都有谁?</span></span><br><span class="line">    <span class="built_in">print</span>(mag - tec)  <span class="comment"># 差集</span></span><br><span class="line">    <span class="comment">#不是经理是技术的都有谁?</span></span><br><span class="line">    <span class="built_in">print</span>(tec - mag)</span><br><span class="line">    <span class="comment">#身兼一职的都有谁?</span></span><br><span class="line">    <span class="built_in">print</span>(tec ^ mag)  <span class="comment"># 对称差集  返回各自独有的</span></span><br><span class="line">    <span class="comment">#公司总共有多少人数?</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(tec | mag))  <span class="comment"># 并集 返回长度</span></span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">test()</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="四-复习拓展"><a href="#四-复习拓展" class="headerlink" title="四.复习拓展"></a>四.复习拓展</h1><p>作业讲解&amp;&amp;复习   这种方式老师觉得更适合你们 </p>
<p><a href="https://blog.csdn.net/u010986753/article/details/122677952">pycharm的debug的使用 </a></p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>手机操作系统  安卓（开源，小工具），ios (封闭，闭环)，鸿蒙（华为）（打破垄断，自己的生态，信息安全），</p>
<p>电脑操作系统：Mac，win   linux （开发服务器，项目上线 ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">大前提：我们编程的目的就是控制电脑，让电脑硬件自发的运行起来，毕竟硬件是死的</span><br><span class="line"></span><br><span class="line">硬件的运行都是有软件支配的</span><br></pre></td></tr></table></figure>

<p>我想开发 一个软件 网易云音乐  》》 音响，屏幕    调用其他东西</p>
<p>网易云音乐 ： 应用程序 </p>
<p>通用的软件： 操作系统</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">网易云音乐（音乐软件）</span><br><span class="line">控制程序（操作系统）</span><br><span class="line">	<span class="number">1.</span> 控制计算机硬件的基本运行</span><br><span class="line">    <span class="number">2.</span> 把硬件运行的复杂操作封装成简单的功能，给上层的应用程序使用</span><br><span class="line">计算机硬件</span><br><span class="line"></span><br><span class="line">操作系统是一个协调，管理，控制计算机硬件资源和应用软件资源的一个控制程序</span><br><span class="line"></span><br><span class="line">作用：</span><br><span class="line">	<span class="number">1.</span>控制计算机硬件的基本运行</span><br><span class="line">    <span class="number">2.</span>把使用硬件的复杂操作封装成简单的功能，给上层的应用程序使用</span><br><span class="line">    比如：</span><br><span class="line">    	文件就是操作系统提供给应用程序/用户操作硬盘的一种功能</span><br><span class="line">        </span><br><span class="line">文件扩展名也称为文件的后缀名，时操作系统用来标识文件类型的机制</span><br><span class="line">让系统快速识别文件类型，然后交给相应的程序处理</span><br><span class="line">扩展名几乎是每个文件必不可少的一部分</span><br><span class="line">	如果一个文件没有扩展名，Windows操作系统就无法处理这个文件</span><br><span class="line">    无法辨别到底如何处理该文件</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">程序的区别：</span><br><span class="line">	计算机的硬件是死的，计算机的硬件的运行都受软件的控制，所以说软件是计算机的灵魂</span><br><span class="line">    具体来说软件分为两种：</span><br><span class="line">    	<span class="number">1.</span>应用软件：应用程序相关的逻辑</span><br><span class="line">        <span class="number">2.</span>系统软件：控制底层硬件的    操作系统</span><br><span class="line">    </span><br><span class="line">延伸几个问题： </span><br><span class="line">    <span class="number">1.</span>   没有操作系统可以吗？    某些特定的场景不一定用  取决实际情况      可以，但不是必须的   </span><br><span class="line">    <span class="number">2.</span>   我们以后写的是什么软件？应用软件</span><br><span class="line">    <span class="number">3.</span>   找准自己的用户定位   </span><br><span class="line">    开发手机App   那用户是 手机用户    手机用户使用方式</span><br><span class="line"> 	</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">**平台** </span><br><span class="line">            应用程序都是运行于操作系统之上，而操作系统则是运行于硬件之上的，</span><br><span class="line">            所以承载应用程序的是一台运行有操作系统的计算机，称之为应用程序的运行平台，</span><br><span class="line">            即：硬件 + 操作系统 == 平台</span><br><span class="line"> </span><br><span class="line">            软件的跨平台性是指：一款软件可以在任意平台上运行，是衡量软件质量高低的一个非常重要的指标</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">windows   可视化界面  鼠标    一个月不关机  卡的 要死   一周关机一次</span><br><span class="line"> </span><br><span class="line">玩游戏    服务器linux    服务器不能轻易的关机   你上网就是访问别人的电脑      </span><br><span class="line">跨平台  在其他的平台上，可以几乎不改动代码，也能正常运行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">内功  》》  看能力  空间复杂度，</span><br><span class="line">没有任何一个语言可以在领域，做到统治</span><br><span class="line"></span><br><span class="line">python  <span class="comment">#  看能力  能力强， 说不定 你就是 某大厂的 产品 技术人员</span></span><br><span class="line">Rust    <span class="comment">#  也是作为系统开发语言  并且 已经 被Linux 开源 同意 它进入</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

































]]></content>
  </entry>
</search>
